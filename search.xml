<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>debian 安装fcitx五笔拼音</title>
    <url>/2015/2015-2015-02-20-debian-install-fcitx-wubi/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新本地软件包索引，并安装fcitx输入法框架以及fcitx五笔拼音输入法</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install fcitx fcitx-table-wbpy fcitx-config-gtk</span><br></pre></td></tr></table></figure>
<h1 id="配置fcitx五笔拼音输入法"><a href="#配置fcitx五笔拼音输入法" class="headerlink" title="配置fcitx五笔拼音输入法"></a>配置fcitx五笔拼音输入法</h1><p>上面的 apt-get install命令完成后，重新登录系统，这样是为了检测新安装的输入法。然后以普通用户在终端里输入下面的命令打开fcitx输入法配置窗口。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fcitx-config-gtk3</span><br></pre></td></tr></table></figure>
<p>在安装fcitx五笔拼音的同时也会安装拼音和双拼输入法，所以如果你只想要五笔拼音，那么可以在这个配置窗口里将拼音和双拼删除，保留键盘布局和五笔拼音输入法</p>
<p>将拼音和双拼删除后，你就可以用Ctrl+空格键来调出fcitx五笔拼音输入法了。既可以打五笔，又可以打拼音。打拼音的同时还会教你五笔怎么打，非常方便。</p>
<h1 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h1><h2 id="Telegram不能使用fcitx输入中文的解决办法"><a href="#Telegram不能使用fcitx输入中文的解决办法" class="headerlink" title="Telegram不能使用fcitx输入中文的解决办法"></a>Telegram不能使用fcitx输入中文的解决办法</h2><p>解决的方法很简单：<br>打开home目录下的.bashrc文件<br>将下面的三行命令添加到文件末尾。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开home目录下的.bashrc文件</span></span><br><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下面的三行命令添加到文件末尾。</span></span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure>
<p>或者直接几句命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export GTK_IM_MODULE=fcitx"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export XMODIFIERS=@im=fcitx"</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"export QT_IM_MODULE=fcitx"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>然后：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>保存文件后重新登录系统。现在就可以在telegram里用fcitx输入中文了。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><img src="/2015/2015-2015-02-20-debian-install-fcitx-wubi/lopy.png">]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>fcitx</tag>
        <tag>wubi</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll bootstrap 的搭建</title>
    <url>/2015/2015-2015-02-20-jekyll-bootstrap-start-config/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h4 id="1、update-，你懂的"><a href="#1、update-，你懂的" class="headerlink" title="1、update ，你懂的"></a>1、update ，你懂的</h4><pre><code>sudo apt-get update
</code></pre><h4 id="2、安装-gem"><a href="#2、安装-gem" class="headerlink" title="2、安装 gem"></a>2、安装 gem</h4><pre><code>sudo apt-get install gem
</code></pre><h4 id="3、jekyll-依赖-ruby，so-安装之"><a href="#3、jekyll-依赖-ruby，so-安装之" class="headerlink" title="3、jekyll 依赖 ruby，so 安装之"></a>3、jekyll 依赖 ruby，so 安装之</h4><pre><code>sudo apt-get install ruby-full build-essential 
</code></pre><h4 id="4、安装-jekyll-等各项工具"><a href="#4、安装-jekyll-等各项工具" class="headerlink" title="4、安装 jekyll 等各项工具"></a>4、安装 jekyll 等各项工具</h4><pre><code>gem install jekyll
</code></pre><h4 id="5、"><a href="#5、" class="headerlink" title="5、"></a>5、</h4><pre><code>sudo gem install bundler
</code></pre><h4 id="6、"><a href="#6、" class="headerlink" title="6、"></a>6、</h4><pre><code>sudo gem install jekyll-sitemap
</code></pre><h4 id="7、"><a href="#7、" class="headerlink" title="7、"></a>7、</h4><pre><code>sudo gem install pygments.rb
</code></pre><h4 id="8、进入项目文件夹，启动服务"><a href="#8、进入项目文件夹，启动服务" class="headerlink" title="8、进入项目文件夹，启动服务"></a>8、进入项目文件夹，启动服务</h4><pre><code>cd USERNAME.github.com 
jekyll serve
</code></pre><h4 id="9、一般项目根目录里面有-Gemfile-和-Gemfile-lock-文件，这是依赖，和composer类似"><a href="#9、一般项目根目录里面有-Gemfile-和-Gemfile-lock-文件，这是依赖，和composer类似" class="headerlink" title="9、一般项目根目录里面有 Gemfile 和 Gemfile.lock 文件，这是依赖，和composer类似"></a>9、一般项目根目录里面有 Gemfile 和 Gemfile.lock 文件，这是依赖，和composer类似</h4><pre><code># install gems required 直接运行 
bundle install
</code></pre><h4 id="10、如果-jekyll-serve-无法启动，则可以用bundle-exec-COMMAND-来执行，一般是依赖的版本不对引起的"><a href="#10、如果-jekyll-serve-无法启动，则可以用bundle-exec-COMMAND-来执行，一般是依赖的版本不对引起的" class="headerlink" title="10、如果 jekyll serve 无法启动，则可以用bundle exec COMMAND 来执行，一般是依赖的版本不对引起的"></a>10、如果 jekyll serve 无法启动，则可以用bundle exec COMMAND 来执行，一般是依赖的版本不对引起的</h4><pre><code>bundle exec jekyll serve
</code></pre><h4 id="end"><a href="#end" class="headerlink" title="end"></a>end</h4><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><blockquote>
<pre><code>https://www.rosehosting.com/blog/how-to-install-jekyll-on-debian-8/
https://github.com/jekyll/jekyll/issues/4972
http://stackoverflow.com/questions/19061774/cannot-load-such-file-bundler-setup-loaderror
http://jekyllbootstrap.com/usage/jekyll-quick-start.html
</code></pre></blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>jekyll</tag>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>MySql更新多条数据不建议使用UPDATE语句</title>
    <url>/2015/2015-2015-03-20-mysql-updateupdate/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>我们知道当插入多条数据的时候insert支持多条语句：</p>
<pre><code>INSERT INTO t_member (id, name, email) VALUES (1, &apos;nick&apos;, &apos;nick@126.com&apos;),(4, &apos;angel&apos;,&apos;angel@163.com&apos;),(7, &apos;brank&apos;,&apos;ba198@126.com&apos;);
</code></pre><p>但是对于更新记录，由于update语法不支持一次更新多条记录，只能一条一条执行：</p>
<pre><code>UPDATE t_member SET name=&apos;nick&apos;, email=&apos;nick@126.com&apos; WHERE id=1; UPDATE t_member SET name=&apos;angel&apos;, email=&apos;angel@163.com&apos; WHERE id=4; UPDATE t_member SET name=&apos;brank&apos;, email=&apos;ba198@126.com&apos; WHERE id=7;
</code></pre><p>这里问题就出现了，倘若这个update list非常大时(譬如说5000条)，这个执行率可想而知。</p>
<p>这就要介绍一下在MySql中INSERT语法具有一个条件DUPLICATE KEY UPDATE，这个语法和适合用在需要判断记录是否存在，不存在则插入存在则更新的记录。</p>
<p>具体的语法可以参见：<a href="http://dev.mysql.com/doc/refman/5.0/en/insert.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.0/en/insert.html</a></p>
<p>基于上面这种情况，针对更新记录，仍然使用insert语句，不过限制主键重复时，更新字段。如下：</p>
<pre><code>INSERT INTO t_member (id, name, email) VALUES (1, &apos;nick&apos;, &apos;nick@126.com&apos;),(4, &apos;angel&apos;,&apos;angel@163.com&apos;),(7, &apos;brank&apos;,&apos;ba198@126.com&apos;) ON DUPLICATE KEY UPDATE name=VALUES(name), email=VALUES(email);
</code></pre><p>注意：ON DUPLICATE KEY UPDATE只是MySQL的特有语法，并不是SQL标准语法！</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>我的debian常用apt源</title>
    <url>/2015/2015-2015-05-19-debian-apt-source/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<pre><code>deb http://mirrors.aliyun.com/debian jessie main non-free contrib

deb-src http://mirrors.aliyun.com/debian jessie main non-free contrib

deb http://mirrors.aliyun.com/debian jessie-updates main non-free contrib

deb-src http://mirrors.aliyun.com/debian jessie-updates main non-free contrib
</code></pre><p>url中的aliyun可以改成163等；</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqli的参数化查询，学习一下，马上就用</title>
    <url>/2015/2015-2015-05-26-mysqli-learn/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>$db = new mysqli(“localhost”, “user”, “pass”, “database”);</p>
<p>$stmt = $mysqli -&gt; prepare(“SELECT priv FROM testUsers WHERE username=? AND password=?”);</p>
<p>$stmt -&gt; bind_param(“ss”, $user, $pass);</p>
<p>$stmt -&gt; execute();</p>
<p>以这个为基础，封装成类</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>safety</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式&#92;w并不完全等于[A-Za-z0-9]</title>
    <url>/2015/2015-2015-05-29-zhengzebug/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>不管是书本上还是网上的教程,在正则表达式中\w都被介绍为匹配任何单词字符,包括字母和下划线，等效于[A-Za-z0-9]</p>
<p>今天偶然间发现会员注册中出现了一个恶作剧账号”аdmin”,注意到那个а了没?那是一个俄文字母,在会员注册过滤中使用\w验证并不能防止。 </p>
<p>也就是说\w包括了英文字母以及俄文字母等，在会员注册这块我们肯定不希望类同的账号出现，要不然很容易造成会员间的误会。</p>
<p>所以改为^[A-Za-z0-9\u4E00-\u9FA5-]{2,16}$验证，只允许数字、26个英文字母大小写、中文及其组合。 </p>
<p>通过网络检测发现，目前的大部分网站账号基本有此误检测的BUG，DZ的不论PHP还是net版均存在此问题。</p>
<p>想象一下吧，一个网站已存存在一个英文会员账号“admin”，再出现一个俄文或俄文英文混合的账号，如“аdmin”，够混乱吧？</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>bug</tag>
        <tag>preg</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 修改时区</title>
    <url>/2015/2015-2015-06-18-debian-set-timezone/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>配置时区的命令是：</p>
<pre><code>dpkg-reconfigure tzdata
</code></pre><p>运行后选择要修改的时区对应的编号，如选Asia时，在Geographic area: 填6</p>
<pre><code>debconf: unable to initialize frontend: Dialog
debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76.)
debconf: falling back to frontend: Readline
Configuring tzdata
------------------
Please select the geographic area in which you live. Subsequent configuration questions will narrow this down by presenting a list of cities, representing the time zones in which they are located.
  1. Africa  2. America  3. Antarctica  4. Australia  5. Arctic Ocean  6. Asia  7. Atlantic Ocean  8. Europe  9. Indian Ocean  10. Pacific Ocean  11. System V timezones  12. US  13. None of the above
Geographic area: 6
</code></pre><p>选择后Asia后，</p>
<pre><code>Please select the city or region corresponding to your time zone.
  1. Aden      8. Baghdad   15. Chita       22. Dubai        29. Hovd       36. Kamchatka    43. Kuala_Lumpur  50. Muscat        57. Pontianak  64. Samarkand      71. Tbilisi        78. Urumqi
  2. Almaty    9. Bahrain   16. Choibalsan  23. Dushanbe     30. Irkutsk    37. Karachi      44. Kuching       51. Nicosia       58. Pyongyang  65. Seoul          72. Tehran         79. Ust-Nera
  3. Amman     10. Baku     17. Chongqing   24. Gaza         31. Istanbul   38. Kashgar      45. Kuwait        52. Novokuznetsk  59. Qatar      66. Shanghai       73. Tel_Aviv       80. Vientiane
  4. Anadyr    11. Bangkok  18. Colombo     25. Harbin       32. Jakarta    39. Kathmandu    46. Macau         53. Novosibirsk   60. Qyzylorda  67. Singapore      74. Thimphu        81. Vladivostok
  5. Aqtau     12. Beirut   19. Damascus    26. Hebron       33. Jayapura   40. Khandyga     47. Magadan       54. Omsk          61. Rangoon    68. Srednekolymsk  75. Tokyo          82. Yakutsk
  6. Aqtobe    13. Bishkek  20. Dhaka       27. Ho_Chi_Minh  34. Jerusalem  41. Kolkata      48. Makassar      55. Oral          62. Riyadh     69. Taipei         76. Ujung_Pandang  83. Yekaterinburg
  7. Ashgabat  14. Brunei   21. Dili        28. Hong_Kong    35. Kabul      42. Krasnoyarsk  49. Manila        56. Phnom_Penh    63. Sakhalin   70. Tashkent       77. Ulaanbaatar    84. Yerevan
Time zone: 66
</code></pre><p>选上海则选66</p>
<pre><code>Current default time zone: &apos;Asia/Shanghai&apos;

Local time is now:      Fri Oct 16 11:20:19 CST 2015.

Universal Time is now:  Fri Oct 16 03:20:19 UTC 2015.
</code></pre><p>设置成功</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>timezone</tag>
      </tags>
  </entry>
  <entry>
    <title>deban安装composer</title>
    <url>/2015/2015-2015-07-22-debian-install-composer/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h2 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h2><ol>
<li><p>-</p>
<pre><code>cd /usr/local/bin
</code></pre></li>
<li><p>-</p>
<pre><code>curl -sS https://getcomposer.org/installer | php
</code></pre></li>
<li><p>完成后，当前文件夹就会多出一个 composer.phar ，重命名为 composer </p>
<pre><code>mv composer.phar composer
</code></pre></li>
<li><p>-</p>
<pre><code>chmod a+x composer
</code></pre></li>
<li><p>-</p>
<pre><code>composer self-update
</code></pre></li>
<li><p>安装一些常用的全局的工具</p>
<pre><code>#phpunit
composer global require &apos;phpunit/phpunit&apos;
</code></pre></li>
</ol>
<pre><code>#php-cs-fixer
#composer global require &apos;fabpot/php-cs-fixer:dev-master&apos;   

#上面那个是老版本，改成下面那个了
composer global require &apos;friendsofphp/php-cs-fixer:dev-master&apos;
</code></pre><h2 id="优雅方式"><a href="#优雅方式" class="headerlink" title="优雅方式"></a>优雅方式</h2><p>本方式引用自 <a href="http://blog.csdn.net/meegomeego/article/details/38984051" target="_blank" rel="noopener">http://blog.csdn.net/meegomeego/article/details/38984051</a></p>
<ol>
<li><p>随便一个文件夹下载composer.phar , 比如 ~/</p>
<pre><code>cd ~ &amp;&amp; curl -sS https://getcomposer.org/installer | php
</code></pre></li>
<li><p>安装各类 global 工具，包括composer自己也是可以用composer来安装的</p>
<pre><code>./composer.phar global require &apos;composer/composer:dev-master&apos;

./composer.phar global require &apos;phpunit/phpunit:3.7.*&apos;

./composer.phar global require &apos;fabpot/php-cs-fixer:dev-master&apos;
</code></pre></li>
<li><p>将 vendor/bin 添加到你的PATH变量里</p>
<ul>
<li>本方式引用至 <a href="http://blog.csdn.net/meegomeego/article/details/38984051" target="_blank" rel="noopener">http://blog.csdn.net/meegomeego/article/details/38984051</a></li>
<li>原文中bin目录为 ~/.composer/vendor/bin</li>
<li>本人的bin目录为 ~/.config/composer/vendor/bin</li>
<li>可能是系统不同的原因（本人用的debian jessie）或者是composer版本等原因</li>
</ul>
</li>
<li><p>self-update 方法</p>
<p> 貌似没有找到。哈哈哈哈</p>
</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>composer</tag>
      </tags>
  </entry>
  <entry>
    <title>shadowsocks常用配置</title>
    <url>/2015/08-11-p-shadowsocks-config/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前有一堵墙，后来我们翻了过去。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装的方式有很多种，windows版的就不说了，无非一个双击或者cmd下执行二进制。下面说下linux的</p>
<h2 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h2><p>这个不多谈，去gayhub自己看</p>
<h2 id="下载编译好的二进制文件"><a href="#下载编译好的二进制文件" class="headerlink" title="下载编译好的二进制文件"></a>下载编译好的二进制文件</h2><p>这个不多谈，去gayhub的releases自己看</p>
<h2 id="用pip安装"><a href="#用pip安装" class="headerlink" title="用pip安装"></a>用pip安装</h2><p>以debian为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>我写了一个简单的脚本用来简单的安装，基于shadowsocks-go 1.2.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 终端代码 </span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/uljjmhn555/ssinstaller</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ssinstaller</span><br><span class="line"></span><br><span class="line">./install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后去 **/etc/shadowsocks** 编辑配置文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/shadowsocks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑配置文件略过，请看下文</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start sslocal|ssserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开机自启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> sslocal|ssserver</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>shadowsocks以json为配置文件格式，以下是一个样例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"remote-shadowsocks-server-ip-addr"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:443,</span><br><span class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:1080,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"your-passwd"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:300,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">"workers"</span>:1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>提示: 若需同时指定多个服务端ip，可参考”server”:[“1.1.1.1”,”2.2.2.2”],</p>
<p>server    服务端监听地址(IPv4或IPv6)</p>
<p>server_port    服务端端口，一般为443</p>
<p>local_address    本地监听地址，缺省为127.0.0.1</p>
<p>local_port    本地监听端口，一般为1080</p>
<p>password    用以加密的密匙</p>
<p>timeout    超时时间（秒）</p>
<p>method    加密方法，默认的table是一种不安全的加密，此处首推aes-256-cfb</p>
<p>fast_open    是否启用TCP-Fast-Open</p>
<p>wokers    worker数量，如果不理解含义请不要改</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>在config.json所在目录下运行 <strong>sslocal</strong> 即可；若需指定配置文件的位置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sslocal -c /etc/shadowsocks/config.json</span><br><span class="line"><span class="comment"># 注意: 有用户报告无法成功在运行时加载config.json，或可尝试手动运行：</span></span><br><span class="line"></span><br><span class="line">sslocal -s 服务器地址 -p 服务器端口 -l 本地端端口 -k 密码 -m 加密方法</span><br><span class="line"><span class="comment"># 提示: 当然也有图形化的使用shadowsocks-gui@gitHub,如果不希望自己编译的话，也可以到shadowsocks-gui@sourceforge下载。</span></span><br></pre></td></tr></table></figure>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>提示: 普通用户无需配置服务端；</p>
<p>在服务器上cd到config.json所在目录：</p>
<p>运行ssserver；</p>
<p>如果想在后台一直运行，可改执行：nohup ssserver &gt; log &amp;；</p>
<h2 id="以守护进程形式运行客户端"><a href="#以守护进程形式运行客户端" class="headerlink" title="以守护进程形式运行客户端"></a>以守护进程形式运行客户端</h2><p>Shadowsocks的systemd服务可在/etc/shadowsocks/里调用不同的conf-file.json（以conf-file为区分标志），例： 在/etc/shadowsocks/中创建了foo.json配置文件，那么执行以下语句就可以调用该配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl start shadowsocks@foo</span><br></pre></td></tr></table></figure>
<p>若需开机自启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks@foo</span><br></pre></td></tr></table></figure>
<p>提示: 可用journalctl -u shadowsocks@foo来查询日志；</p>
<h2 id="以守护进程形式运行服务端"><a href="#以守护进程形式运行服务端" class="headerlink" title="以守护进程形式运行服务端"></a>以守护进程形式运行服务端</h2><p>以上只是启动了客户端的守护进程，如果架设的是服务器，则需要：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">systemctl start shadowsocks-server@foo</span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks-server@foo</span><br></pre></td></tr></table></figure>
<p>提示: 如果使用的服务端端口号小于1024，需要修改usr/lib/systemd/system/shadowsocks-server@.service使得user=root，之后使用systemctl daemon-reload重新载入守护进程配置，即可开启监听。</p>
<h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><p>注意: 默认加密方法table速度很快，但很不安全。推荐使用aes-256-cfb或者bf-cfb，照目前的趋势，ChaCha20是占用最小速度最快的一种方式。请不要使用rc4，它不安全。</p>
<p>提示: 安装M2Crypto可略微提升加密速度，对于Python2来说，安装python2-m2crypto即可。</p>
<p>可选的加密方式：</p>
<ul>
<li><p>aes-256-cfb: 默认加密方式</p>
</li>
<li><p>aes-128-cfb</p>
</li>
<li><p>aes-192-cfb</p>
</li>
<li><p>aes-256-ofb</p>
</li>
<li><p>aes-128-ofb</p>
</li>
<li><p>aes-192-ofb</p>
</li>
<li><p>aes-128-ctr</p>
</li>
<li><p>aes-192-ctr</p>
</li>
<li><p>aes-256-ctr</p>
</li>
<li><p>aes-128-cfb8</p>
</li>
<li><p>aes-192-cfb8</p>
</li>
<li><p>aes-256-cfb8</p>
</li>
<li><p>aes-128-cfb1</p>
</li>
<li><p>aes-192-cfb1</p>
</li>
<li><p>aes-256-cfb1</p>
</li>
<li><p>bf-cfb</p>
</li>
<li><p>camellia-128-cfb</p>
</li>
<li><p>camellia-192-cfb</p>
</li>
<li><p>camellia-256-cfb</p>
</li>
<li><p>cast5-cfb</p>
</li>
<li><p>chacha20</p>
</li>
<li><p>idea-cfb</p>
</li>
<li><p>rc2-cfb</p>
</li>
<li><p>rc4-md5</p>
</li>
<li><p>salsa20</p>
</li>
<li><p>seed-cfb</p>
</li>
</ul>
<p>注意: 官方软件源的shadowsocks不支持全部加密方式，官方软件源Chacha20以及salsa20的支持可以安装libsodium（For salsa20 and chacha20 support） 。若对非主流加密方式有需求，可尝试aur中的shadowsocks-nodejsAUR[broken link: archived in aur-mirror]</p>
<h2 id="Chrome-Chromium"><a href="#Chrome-Chromium" class="headerlink" title="Chrome/Chromium"></a>Chrome/Chromium</h2><p>至此，本地监听端口127.0.0.1:1080已配置完毕。现以Chrome/Chromium为例，示范使用代理服务器的方法。</p>
<p>请安装 Proxy SwitchyOmega插件（SwitchySharp已停止开发），若商店打不开的话可以直接下载Github上面的crx文件可参考该扩展提供的图解流程。</p>
<p>直接参考 SwitchySharp+shadowsocks-nodejs Windows 下配置介绍 的第二部分”设置浏览器代理扩展“即可。或者参考我的配置@2015.02.04文件即可，支持自动通过gfwlist自动切换。</p>
<h1 id="服务器开启bbr"><a href="#服务器开启bbr" class="headerlink" title="服务器开启bbr"></a>服务器开启bbr</h1><blockquote>
<p>服务器内核版本要求 &gt;=4.9</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改系统变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.core.default_qdisc=fq"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_congestion_control=bbr"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存生效</span></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内核是否已开启BBR</span></span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看BBR是否启动</span></span><br><span class="line">lsmod | grep bbr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示以下，表示成功 （数字不一定一样）</span></span><br><span class="line"><span class="comment">#tcp_bbr                20480  14</span></span><br></pre></td></tr></table></figure>
<h1 id="服务器开启-tcp-fastopen"><a href="#服务器开启-tcp-fastopen" class="headerlink" title="服务器开启 tcp_fastopen"></a>服务器开启 tcp_fastopen</h1><blockquote>
<p>服务器内核版本要求 &gt;= 3.7.1</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"net.ipv4.tcp_fastopen=3"</span> &gt;&gt; /etc/sysctl.conf &amp;&amp; sysctl -p</span><br></pre></td></tr></table></figure>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>加一个链接，你懂的</p>
<p><a href="https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt" target="_blank" rel="noopener">https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt</a></p>
<p>2016-06-24 上面的链接貌似不能用了。加一个</p>
<p><a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt" target="_blank" rel="noopener">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a></p>
<p><a href="https://github.com/gfwlist/gfwlist" target="_blank" rel="noopener">https://github.com/gfwlist/gfwlist</a></p>
<h1 id="引用地址"><a href="#引用地址" class="headerlink" title="引用地址"></a>引用地址</h1><blockquote>
<p><a href="https://wiki.archlinux.org/index.php/Shadowsocks_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener">https://wiki.archlinux.org/index.php/Shadowsocks_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29</a><br><a href="https://www.moerats.com/archives/297/" target="_blank" rel="noopener">https://www.moerats.com/archives/297/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>shadowsocks</tag>
        <tag>fq</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 15.04 gVim安装及设置</title>
    <url>/2015/2015-2015-08-17-ubuntu-vim-gvim/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>安装gVim:</p>
<pre><code>sudo apt-get install vim-gtk
</code></pre><p>Ubuntu15.04已经提供了youcompleteme等插件，可以直接安装：</p>
<pre><code>sudo apt-get install vim-youcompleteme vim-syntastic vim-fugitive
</code></pre><p>tagbar要用到ctags:</p>
<pre><code>sudo apt-get install exuberant-ctags
</code></pre><p>CtrlSF需要先安装ag:</p>
<pre><code>sudo apt-get install silversearcher-ag
</code></pre><p>安装matchit插件：</p>
<pre><code>$ sudo apt-get install vim-addon-manager vim-scripts
$ vim-addons install matchit
</code></pre><p>通过Vundle安装其他插件</p>
<p>下载Vundle：</p>
<pre><code>mkdir ~/.vim/bundle
git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre><p>然后编辑~/.vimrc在前面添加如下内容：</p>
<p>//这里差一个图<br>image<br>//</p>
<p>然后重新启动gVim并运行：</p>
<pre><code>:PluginInstall
</code></pre><p>完成插件的最后安装</p>
<p>另外有几个插件还需要做必要的设置：</p>
<pre><code>&quot; Ctrl+n调用NERDTree
map &lt;C-n&gt; :NERDTreeToggle&lt;CR&gt;
&quot; F8调用Tagbar
nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;
&quot; AirLine
set laststatus=2
&quot; CtrlSF
nmap &lt;C-F&gt;n &lt;Plug&gt;CtrlSFCwordPath
</code></pre><p>另外还需要：</p>
<pre><code>vim-addons install youcompleteme
</code></pre><blockquote>
<p>引用地址：<a href="http://tieba.baidu.com/p/3602033040" target="_blank" rel="noopener">http://tieba.baidu.com/p/3602033040</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>vim</tag>
        <tag>gvim</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]设置 Debian/Ubuntu 不允许使用 root ssh 登陆</title>
    <url>/2015/2015-2015-09-01-debian-without-root-login/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>基本上, root 密碼是什麼我也記不起來(都是亂打的), 不過直接於 ssh 擋掉還是較安全點~(Ubuntu / Debian Linux 預設是允許 root ssh login 的)</p>
<p>設定不允許 root ssh 登入</p>
<pre><code>vim /etc/ssh/sshd_config
</code></pre><p>找到 PermitRootLogin yes</p>
<p>改成 PermitRootLogin no</p>
<pre><code>/etc/init.d/ssh restart 
</code></pre><p>即可.</p>
<p>修改 ssh Port</p>
<p>若有要改跑其它 Port, 一樣於 sshd_config 找到 Port, 將 22 改成想要的 Port number 即可.</p>
<p>限定特定帳號登入</p>
<p>若只允許某些帳號登入:</p>
<pre><code>vim /etc/pam.d/sshd

# account  required     pam_access.so
</code></pre><p>拿掉註解</p>
<pre><code>account required pam_access.so
</code></pre><p>vim /etc/security/access.conf # 照範例設定即可.</p>
<p>這是另一種方法, 此方法我沒試過(摘錄自: SSH 的一些安全小技巧):</p>
<pre><code>vi /etc/pam.d/sshd

# 加入此行
auth required pam_listfile.so item=user sense=allow file=/etc/ssh_users onerr=fail
</code></pre><p>echo user1 &gt;&gt; /etc/ssh_users # user1 就是你要允許的 user 名稱 (一個帳號一行)</p>
<p>以下为自己加上的：</p>
<p>debian 有些版本默认不让root账户登陆，比如debian 8 </p>
<pre><code>vim /etc/ssh/sshd_config
</code></pre><p>找到 PermitRootLogin xxxxx<br>debian 8 里面是 PermitRootLogin without-password<br>改成 PermitRootLogin yes<br>保存后，运行</p>
<pre><code>/etc/init.d/ssh restart
</code></pre><blockquote>
<p>引用地址：<a href="http://blog.longwin.com.tw/2008/10/security-debian-ubuntu-linux-deny-root-login-2008/" target="_blank" rel="noopener">http://blog.longwin.com.tw/2008/10/security-debian-ubuntu-linux-deny-root-login-2008/</a></p>
</blockquote>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>login</tag>
        <tag>root</tag>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>php中的json转码问题以及保存在mysql中出现的问题</title>
    <url>/2015/2015-2015-09-09-php-json-mysql/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>出现问题及解决方法</p>
<p>json_encode(‘中文’);会生成 “\u4e2d\u6587”要转回来就用json_decode(‘“\u4e2d\u6587”‘)就行了，但这不算一个问题。</p>
<p>  当你需要将你的某项数据通过json_encode()再存入数据库的话，就会出问题。数据库中显示“”u4e2du6587””，少了斜杠就转不回“中文”了。这种情况的就可以用以下方法解决</p>
<p>  a、用 addslashes()处理后再存入数据库</p>
<pre><code>$str = json_encode(&apos;中文&apos;);
$str = addslashes($str);
echo $str;
//结果为{&quot;str&quot;:&quot;\u4e2d\u6587&quot;}
</code></pre><p>  b、用 json_encode(‘中文’,JSON_UNESCAPED_UNICODE)处理的中文后，不会转为”\xxxx\xxxx”这个格式，直接转为’”中文”‘。本功能在php5.4以上才能使用</p>
<pre><code>$str = json_encode(&apos;中文&apos;,JSON_UNESCAPED_UNICODE);
//结果为&quot;中文&quot;
$str = json_encode(array(&apos;str&apos;=&gt;&apos;中文&apos;),JSON_UNESCAPED_UNICODE);
echo $str;
//结果为{&quot;str&quot;:&quot;中文&quot;}
</code></pre><p> c、对于5.4以下的版本，可以对json_encode()后的字符串用正则替换</p>
<pre><code>$str = &apos;中文&apos;;
$str = json_encode($str);
$str = preg_replace(&quot;#\\\u([0-9a-f]{4})#ie&quot;, &quot;iconv(&apos;UCS-2BE&apos;, &apos;UTF-8&apos;, pack(&apos;H4&apos;, &apos;\\1&apos;))&quot;, $name);
//结果为&quot;中文&quot;
$arr= array(&apos;str&apos;=&gt;&apos;中文&apos;);
$str = json_encode($arr);
$str = preg_replace(&quot;#\\\u([0-9a-f]{4})#ie&quot;, &quot;iconv(&apos;UCS-2BE&apos;, &apos;UTF-8&apos;, pack(&apos;H4&apos;, &apos;\\1&apos;))&quot;, $name);
echo $str;
//结果为{&quot;str&quot;:&quot;中文&quot;}
</code></pre><p>有时为了兼容性，可以将b、c方法封装成类</p>
<p>以下为封装代码</p>
<pre><code>class JSON
{
    /**
     * @brief json数据格式编码,支持中文原文转换
     * @param $param max 要编码转换的数据
     * @return String json数据格式
     */
    public static function encode($param)
    {
        if(version_compare(phpversion(),&apos;5.4.0&apos;) &gt;= 0)
        {
            return json_encode($param,JSON_UNESCAPED_UNICODE);
        }
        $result = json_encode($param);
        //对于中文的转换
        return preg_replace(&quot;#\\\u([0-9a-f]{4})#ie&quot;, &quot;iconv(&apos;UCS-2BE&apos;, &apos;UTF-8&apos;, pack(&apos;H4&apos;, &apos;\\1&apos;))&quot;, $result);
    }

    /**
     * @brief 解析json数据格式
     * @param $string String 要解析的json串
     * @return max php数据格式
     */
    public static function decode($string)
    {
        if(strpos($string,&quot;\t&quot;) !== false)
        {
            $string = str_replace(&quot;\t&quot;,&apos;&apos;,$string);
        }


        return json_decode($string,true);
    }
}

//使用方法
$arr = array(&apos;str&apos;=&gt;&apos;中文&apos;);
$str = JSON::encode($arr);
echo $str;
//结果为{&quot;str&quot;:&quot;中文&quot;}
</code></pre>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>php</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>Debian apt-get 一键安装配置搭建最新LNMP</title>
    <url>/2015/2015-2015-09-18-debian-install-lnmp/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>我的常用开发环境为debian，偶尔重装系统会重新安装php环境</p>
<a id="more"></a>
<h1 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h1><h2 id="debian7-only"><a href="#debian7-only" class="headerlink" title="debian7 only"></a>debian7 only</h2><blockquote>
<p>debian7 已经好久没有用了，印象中是不带php的，所以需要单独做以下步骤</p>
</blockquote>
<blockquote>
<p>debian7 以下没有用过，就没有相应的了</p>
</blockquote>
<p>导入dotdeb源：</p>
<p>打开 /etc/apt/sources.list,向其中添加如下四行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deb http://packages.dotdeb.org wheezy all </span><br><span class="line">deb-src http://packages.dotdeb.org wheezy all</span><br><span class="line">deb http://packages.dotdeb.org wheezy-php56 all</span><br><span class="line">deb-src http://packages.dotdeb.org wheezy-php56 all</span><br></pre></td></tr></table></figure></p>
<p>打开命令行，下载并导入GnuPG key：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.dotdeb.org/dotdeb.gpg</span><br><span class="line">cat dotdeb.gpg | apt-key add -</span><br></pre></td></tr></table></figure></p>
<h2 id="debian-8-或-9"><a href="#debian-8-或-9" class="headerlink" title="debian 8 或 9"></a>debian 8 或 9</h2><p>用默认的源或用该篇文章的源</p>
<h1 id="更新本地"><a href="#更新本地" class="headerlink" title="更新本地"></a>更新本地</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="debian7-或-8"><a href="#debian7-或-8" class="headerlink" title="debian7 或 8"></a>debian7 或 8</h2><blockquote>
<p>debian7 dotdeb的php源的版本为5.6</p>
</blockquote>
<blockquote>
<p>debian8的php源的版本为5.6</p>
</blockquote>
<p>打开命令行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php5-fpm php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-common php5-mysql php5-pspell php5-recode php5-dev php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-memcached memcached</span><br></pre></td></tr></table></figure></p>
<p>或分行式的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php5-fpm php5-curl php5-gd \ </span><br><span class="line">php5-intl php-pear php5-imagick php5-imap php5-mcrypt \</span><br><span class="line">php5-common php5-mysql php5-pspell php5-recode php5-dev \</span><br><span class="line">php5-sqlite php5-tidy php5-xmlrpc php5-xsl php5-memcached \</span><br><span class="line">memcached</span><br></pre></td></tr></table></figure></p>
<h2 id="debian9"><a href="#debian9" class="headerlink" title="debian9"></a>debian9</h2><blockquote>
<p>debian9的php源的版本为7.0</p>
</blockquote>
<p>打开命令行：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php7.0-fpm php7.0-curl php7.0-gd php7.0-intl php-pear php7.0-imagick php7.0-imap php7.0-mcrypt php7.0-common php7.0-mysql php7.0-pspell php7.0-recode php7.0-dev php7.0-sqlite php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-memcached memcached</span><br></pre></td></tr></table></figure></p>
<p>或分行式的<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php7.0-fpm php7.0-curl \</span><br><span class="line">php7.0-mbstring php7.0-intl php-pear php7.0-imagick php7.0-imap \</span><br><span class="line">php7.0-mcrypt php7.0-common php7.0-mysql php7.0-pspell \</span><br><span class="line">php7.0-recode php7.0-sqlite php7.0-dev php7.0-tidy php7.0-gd \</span><br><span class="line">php7.0-xmlrpc php7.0-xsl php7.0-memcached memcached</span><br></pre></td></tr></table></figure></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><blockquote>
<p>以下就不理更新了，年代久远</p>
</blockquote>
<p>执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/nginx/sites-available/default</span><br></pre></td></tr></table></figure>
<p>按照下面来修改：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">    <span class="comment"># # <span class="doctag">NOTE:</span> You should have "cgi.fix_pathinfo = 0;" in php.ini</span></span><br><span class="line">    <span class="comment">## # With php5-cgi alone:</span></span><br><span class="line">    <span class="comment"># fastcgi_pass 127.0.0.1:9000;</span></span><br><span class="line">    <span class="comment"># # With php5-fpm:</span></span><br><span class="line">    fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">    fastcgi_index index.php;include fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>修改保存之后重启Nginx：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service nginx restart</span><br></pre></td></tr></table></figure></p>
<p>接下来我们下载一个探针，查看php的详细信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/nginx/html/</span><br><span class="line">wget http://www.yahei.net/tz/tz.zip</span><br><span class="line">unzip tz.zip</span><br></pre></td></tr></table></figure>
<p>保存之后访问网站网址 , 如果出现雅黑探针页面，则大功告成。</p>
<h2 id="新建站点"><a href="#新建站点" class="headerlink" title="新建站点"></a>新建站点</h2><p>和一般的lnmp一键包不同，采用这个方法所安装的 LNMP 需要手动添加站点配置文件。</p>
<p>进入配置文件目录，新建一个站点配置文件，比如<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi abcd.com.conf。</span><br><span class="line"><span class="built_in">cd</span> /etc/nginx/conf.d</span><br></pre></td></tr></table></figure></p>
<p>按照下面添加配置文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    <span class="comment">#ipv6#listen [::]:80 default_server;</span></span><br><span class="line">    root /usr/share/nginx/html/abcd.com;</span><br><span class="line">    <span class="comment">#默认首页文件名</span></span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    <span class="comment">#绑定域名</span></span><br><span class="line">    server_name abcd.com;</span><br><span class="line">    <span class="comment">#伪静态规则</span></span><br><span class="line">    include wordpress.conf;</span><br><span class="line">    location \ &#123;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#定义错误页面</span></span><br><span class="line">    <span class="comment">#error_page 404 /404.html;</span></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        fastcgi_split_path_info ^(.+\.php)(/.+)$;</span><br><span class="line">        fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">        fastcgi_index index.php;</span><br><span class="line">        include fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#PHP</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>保存之后重启Nginx，添加及绑定网站即完成。</p>
<p>最后，附上WordPress的Nginx伪静态规则：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.html)&#123;</span><br><span class="line">        rewrite (.*) <span class="variable">$1</span>/index.html <span class="built_in">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (-f <span class="variable">$request_filename</span>/index.php)&#123;</span><br><span class="line">        rewrite (.*) <span class="variable">$1</span>/index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!-f <span class="variable">$request_filename</span>)&#123;</span><br><span class="line">        rewrite (.*) /index.php;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h2><p>1、步骤2的问题，以前写的，忘了什么情况了</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>debian区分版本</title>
    <url>/2015/2015-2015-09-22-debian-version-diff/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>1、输入命令</p>
<pre><code>lsb_release -a
</code></pre><p>2、输入命令</p>
<pre><code>cat /etc/issue

#6-squeeze

#7-wheezy

#8-jessie
</code></pre>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]在命令行下运行PHP脚本[带参数]的方法</title>
    <url>/2015/2015-2015-09-27-php-console-params/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>这里介绍的是在命令行执行php脚本的代码，其实主要用到的是php.exe,所以注意设置环境变量。</p>
<p>创建一个简单的文本文件，其中包含有以下PHP代码，并把它保存为hello.php： </p>
<p>复制代码代码如下:</p>
<pre><code>&lt;?php 
    echo &quot;Hello from the CLI&quot;; 
?&gt;
</code></pre><p>现在，试着在命令行提示符下运行这个程序，方法是调用CLI可执行文件并提供脚本的文件名： </p>
<pre><code>#php phphello.php 
//输出Hello from the CLI 
</code></pre><p>使用标准的输入和输出<br>你可以在自己的PHP脚本里使用这三个常量，以接受用户的输入，或者显示处理和计算的结果。要更好地理解这一点，可以看看下面的脚本（列表A）： </p>
<p>列表A </p>
<p>复制代码代码如下:</p>
<pre><code>&lt;?php 
    // ask for input 
    fwrite(STDOUT, &quot;Enter your name: &quot;); 
    // get input 
    $name = trim(fgets(STDIN)); 
    // write input back 
    fwrite(STDOUT, &quot;Hello, $name!&quot;); 
?&gt;
</code></pre><p>Look what happens when you run it: </p>
<pre><code>shell&gt; php hello.php 
Enter your name: Joe 
// Hello, Joe!
</code></pre><p>在这个脚本里，fwrite()函数首先会向标准的输出设备写一条消息，询问用户的姓名。然后它会把从标准输入设备获得的用户输入信息读 </p>
<p>取到一个PHP变量里，并它把合并成为一个字符串。然后就用fwrite()把这个字符串打印输出到标准的输出设备上。 </p>
<p>—————–使用命令行自变量 </p>
<p>在命令行里输入程序参数来更改其运行方式是很常见的做法。你也可以对CLI程序这样做。PHP CLI带有两个特殊的变量，专门用来达到这个 </p>
<p>目的：一个是$argv变量，它通过命令行把传递给PHP脚本的参数保存为单独的数组元素；另一个是$argc变量，它用来保存$argv数组里元素的 个数。 </p>
<p>用PHP脚本编写一段读取$argv并处理它所含参数的代码是很简单的。试试列表B里的示例脚本，看看它是如何工作的： </p>
<p>列表B </p>
<p>复制代码代码如下:</p>
<pre><code>&lt;?php 
    print_r($argv); 
?&gt;

Run this script by passing it some arbitrary values, and check the output: 

shell&gt; php phptest.php chocolate 276 &quot;killer tie, dude!&quot; 
Array 
( 
    [0] =&gt; test.php 
    [1] =&gt; chocolate 
    [2] =&gt; 276 
    [3] =&gt; killer tie, dude! 
)
</code></pre><p>正如你可以从输出的结果看到的，传递给test.php的值会自动地作为数组元素出现在$argv里。要注意的是，$argvis的第一个自变量总是 </p>
<p>脚本自己的名称。 </p>
<p>下面是一个更加复杂的例子（列表C）： </p>
<p>列表C </p>
<p>代码 </p>
<p>复制代码代码如下:</p>
<pre><code>&lt;?php 
    // check for all required arguments 

    // first argument is always name of script! 

    if ($argc != 4) { 

        die(&quot;Usage: book.php &lt;check-in-date&gt; &lt;num-nights&gt; &lt;room-type&gt; &quot;); 

    } 

    // remove first argument 

    array_shift($argv); 

    // get and use remaining arguments 

    $checkin = $argv[0]; 

    $nights = $argv[1]; 

    $type = $argv[2]; 

    echo &quot;You have requested a $type room for $nights nights, checking in on $checkin. Thank you for your order! &quot;; 
?&gt;
</code></pre><p>下面是其用法的示例： </p>
<pre><code>shell&gt; php phpbook.php 21/05/2005 7 single 

You have requested a single room for 7 nights, checking in on 21/05/2005. Thank you for your order!
</code></pre><p>在这里，脚本首先会检查$argc，以确保自变量的数量符合要求。它然后会从$argv里提取出每一个自变量，把它们打印输出到标准的输出</p>
<blockquote>
<p>引用地址：<a href="http://www.jb51.net/article/21879.htm" target="_blank" rel="noopener">http://www.jb51.net/article/21879.htm</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP处理JSON字符串key缺少双引号的解决方法</title>
    <url>/2015/2015-2015-09-28-php-json-key/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>这篇文章主要介绍了PHP处理JSON字符串key缺少双引号的解决方法,是非常常见的一类错误处理情况,需要的朋友可以参考下</p>
<p>本文实例讲述了PHP处理JSON字符串key缺少引号的解决方法，分享给大家供大家参考之用。具体方法如下：</p>
<p>通常来说，JSON字符串是key:value形式的字符串，正常key是由双引号括起来的。</p>
<p>例如：</p>
<pre><code>&lt;?php
$data = array(&apos;name&apos;=&gt;&apos;fdipzone&apos;);
echo json_encode($data);            // {&quot;name&quot;:&quot;fdipzone&quot;}
print_r(json_decode(json_encode($data), true)); //Array ( [name] =&gt; fdipzone )
但如果json字符串的key缺少双引括起来，则json_decode会失败。

&lt;?php
$str = &apos;{&quot;name&quot;:&quot;fdipzone&quot;}&apos;;
var_dump(json_decode($str, true)); // array(1) { [&quot;name&quot;]=&gt; string(8) &quot;fdipzone&quot; }

$str1 = &apos;{name:&quot;fdipzone&quot;}&apos;;
var_dump(json_decode($str1, true)); // NULL
?&gt;
</code></pre><p>解决方法：判断是否存在缺少双引括起来的key，如缺少则先用正则替换为”key”，再进行json_decode操作。</p>
<pre><code>&lt;?php
/** 兼容key没有双引括起来的JSON字符串解析
* @param String $str JSON字符串
* @param boolean $mod true:Array,false:Object
* @return Array/Object
*/
function ext_json_decode($str, $mode=false){
  if(preg_match(&apos;/\w:/&apos;, $str)){
    $str = preg_replace(&apos;/(\w+):/is&apos;, &apos;&quot;$1&quot;:&apos;, $str);
  }
  return json_decode($str, $mode);
}

$str = &apos;{&quot;name&quot;:&quot;fdipzone&quot;}&apos;;
var_dump(ext_json_decode($str, true)); // array(1) { [&quot;name&quot;]=&gt; string(8) &quot;fdipzone&quot; }

$str1 = &apos;{name:&quot;fdipzone&quot;}&apos;;
var_dump(ext_json_decode($str1, true)); // array(1) { [&quot;name&quot;]=&gt; string(8) &quot;fdipzone&quot; }
?&gt;
</code></pre><p>希望本文所述对大家PHP程序设计的学习有所帮助。</p>
<blockquote>
<p>引用地址：<a href="http://www.jb51.net/article/55208.htm" target="_blank" rel="noopener">http://www.jb51.net/article/55208.htm</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 安装phpredis 扩展</title>
    <url>/2015/2015-2015-10-04-debian-install-phpredis/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>1 安装redis server </p>
<pre><code>sudo apt-get install redis-server
</code></pre><p>2 没有安装phpize ，需要安装php5-dev</p>
<pre><code>sudo apt-get install php5-dev
</code></pre><p>3 安装phpredis</p>
<pre><code>https://github.com/nicolasff/phpredis
</code></pre><p>下载并解压到。我解压到/home/len/soft/nicolasff-phpredis-1d6133d/</p>
<p>cd 到该目录，依次执行</p>
<pre><code>phpize5

./configure

make

make install(没权限时加上 sudo)
</code></pre><p>4 配置php.ini</p>
<p>我安装的是apache</p>
<p>创建 /etc/php5/apache2/conf.d/redis.ini</p>
<p>添加 extension=redis.so</p>
<p>5 重启apache  sudo apache2ctl restart</p>
<p>查看phpinfo().确认是否安装成功</p>
<p>以下为自己写的</p>
<p>如果步骤1报错，可以<a href="/web/2015/10/debian-install-redis-mf">点击此方法</a>安装 redis-server</p>
<blockquote>
<p>引用地址：<a href="http://blog.csdn.net/liangpz521/article/details/7822811" target="_blank" rel="noopener">http://blog.csdn.net/liangpz521/article/details/7822811</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>php</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>[转]debian 编译安装redis</title>
    <url>/2015/2015-2015-10-04-debian-install-redis-mf/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>Debian系统自带的Redis版本为2.4，Ubuntu自带的版本为2.8，都不是最新的3.0.2版本，不得不自己手工编译。流程如下：</p>
<p>安装构建包</p>
<pre><code>sudo apt-get install build-essential
</code></pre><p>下载源码</p>
<p>到 Redis首页 下载最新版本的源码，当前版本为 3.0.2：<a href="http://download.redis.io/releases/redis-3.0.2.tar.gz" target="_blank" rel="noopener">http://download.redis.io/releases/redis-3.0.2.tar.gz</a></p>
<p>编译</p>
<p>万幸，Redis是纯C开发，也没依赖什么特殊的库，解压后直接编译即可。</p>
<pre><code>tar xvf redis-3.0.2.tar.gz
cd redis-3.0.2
make
make test
</code></pre><p>安装</p>
<p>一般Linux下的软件在编译完之后都是用make install，但通常所谓的安装只是单纯的拷贝文件到PATH目录下，并没有把redis-server注册为系统服务。还好，我们用Debian/Ubuntu就是有特权！Redis提供了一个工具，在安装完毕之后可帮忙注册系统服务。</p>
<pre><code>sudo make install
cd utils
sudo ./install_server.sh
</code></pre><p>根据提示填写默认端口、日志路径、配置文件路径等，可惜没有让我们填写系统服务的名称，默认名称为 redis_6379，我还是喜欢服务名叫 redis-server，因此需要执行如下代码：</p>
<pre><code>sudo mv /etc/init.d/redis{_6379,-server}
</code></pre><p>这样通过 sudo service redis-server restart 就能管理Redis服务器了。</p>
<p>测试</p>
<pre><code>$ redis-cli PING
PONG
</code></pre><blockquote>
<p>引用地址：<a href="http://www.w2bc.com/Article/44498" target="_blank" rel="noopener">http://www.w2bc.com/Article/44498</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 安装并启动redis</title>
    <url>/2015/2015-2015-10-04-debian-install-redis/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>安装</p>
<pre><code>$ apt-get install redis-server
</code></pre><p>最后一步启动的时候可能会出错，先不用理他，执行以下语句</p>
<pre><code>$ cp /etc/redis/redis.comf /etc/redis/redis.conf.default
</code></pre><p>启动并加载配置文件</p>
<pre><code>$ redis-server /etc/redis/redis.conf
</code></pre><p>测试</p>
<pre><code>$ redis-cli
redis&gt; set foo bar
OK
redis&gt; get foo
&quot;bar&quot;
</code></pre><p>完工</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Headers and client library minor version mismatch. Headers:50544 Library:506</title>
    <url>/2015/2015-2015-10-14-mysql-error-50544/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>mysql的一个报错</p>
<a id="more"></a>
<h1 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h1><p>Headers and client library minor version mismatch. Headers:50544 Library:506</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove php5-mysql</span><br><span class="line"></span><br><span class="line">sudo apt-get install php5-mysqlnd</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Unit php5-fpm.service is masked</title>
    <url>/2015/2015-2015-10-28-php-fpm-is-masked/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>有时安装  nginx php 等时，会遇到些问题 Unit php5-fpm.service is masked。。。</p>
<pre><code>systemctl unmask php5-fpm
</code></pre><p>其它同理</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>cli</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下安装Cygwin及包管理器apt-cyg</title>
    <url>/2015/2015-2015-11-07-windows-cygwin-apt/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>依赖</p>
<pre><code>wget tar gawk bzip2
</code></pre><p>执行</p>
<pre><code>wget http://apt-cyg.googlecode.com/svn/trunk/apt-cyg -P /bin chmod.exe +x /bin/apt-cyg
</code></pre><p>更换镜像</p>
<pre><code>apt-cyg -m http://mirrors.163.com/cygwin/
</code></pre><p>更新源</p>
<pre><code>apt-cyg update
</code></pre><p>安装</p>
<pre><code>apt-cyg install ping -u
</code></pre><p>-u表示每次不用更新源</p>
<p>如果每次安装都报错的话，参考</p>
<p><a href="http://www.07net01.com/2015/08/891311.html" target="_blank" rel="noopener">http://www.07net01.com/2015/08/891311.html</a></p>
<pre><code>-# install apt-cyg 
lynx -source rawgit.com/transcode-open/apt-cyg/master/apt-cyg &gt; apt-cyg 
-#install 
install apt-cyg /bin 
-#link source 
apt-cyg -m http://mirrors.163.com/cygwin/ 
-#update 
apt-cyg update 
-#Example use of apt-cyg: 
apt-cyg install nano
</code></pre><blockquote>
<p>引用地址：<a href="http://my.oschina.net/looly/blog/214857" target="_blank" rel="noopener">http://my.oschina.net/looly/blog/214857</a></p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>cygwin</tag>
      </tags>
  </entry>
  <entry>
    <title>debian安装Openjdk7</title>
    <url>/2015/2015-2015-11-27-debian-openjdk/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>在命令行中，键入：</p>
<pre><code>apt-get install openjdk-7-jre
</code></pre><p>需要注意的是，openjdk-7-jre包只包含Java运行时环境（Java Runtime Environment）。如果是要开发Java应用程序，则需要安装openjdk-7-jdk包。命令如下：</p>
<pre><code>apt-get install openjdk-7-jdk
</code></pre>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>openjdk</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>几款LINUX下的CHM查看器</title>
    <url>/2015/2015-2015-11-28-linux-chm-viewer/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>本文旨在介绍linux下的常见chm阅读软件及其安装，并针对一些问题给出解决方法。</p>
<h3 id="一、CHMSEE"><a href="#一、CHMSEE" class="headerlink" title="一、CHMSEE"></a>一、CHMSEE</h3><p>这个比较常见了，呵呵。</p>
<p>安装: </p>
<pre><code>sudo apt-get install chmsee
</code></pre><p>之后在应用程序附件中就可以看到了。</p>
<p>####问题1：</p>
<p>启动不了或者出现</p>
<p>chmsee: error while loading shared libraries: libxul.so: cannot open shared object file: No such file or directory</p>
<p>的错误就作如下处理：</p>
<pre><code>cd /usr/lib 
sudo ln -s xulrunner-1.9/libxul.so libxul.so 
sudo ln -s xulrunner-1.9/libxpcom.so libxpcom.so 
sudo ln -s xulrunner-1.9/libsqlite3.so libsqlite3.so 
sudo ln -s xulrunner-1.9/libmozjs.so libmozjs.so
</code></pre><p>之后可以正常打开了。</p>
<h3 id="二、Kchmiewer"><a href="#二、Kchmiewer" class="headerlink" title="二、Kchmiewer"></a>二、Kchmiewer</h3><p>这个是kde下出色一个chm阅读器，相比较于chmsee出现中文乱马的情况而言，这个可以说是完美了。<br>安装：</p>
<pre><code>sudo apt-get install kchmviewer
</code></pre><p>在ubuntu8.04下，依然在应用程序，附件中出现。</p>
<p>###三、xchm </p>
<p>安装：</p>
<pre><code>sudo apt-get install xchm
</code></pre><h3 id="四、chmview"><a href="#四、chmview" class="headerlink" title="四、chmview"></a>四、chmview</h3><p>它是个非常强大的chm阅读器。不过其原理略微有点复杂。我们知道chm实际上是被编译过的html，对了，chmview就是建立了一个简单的http服务器，借助于浏览器来阅读chm，这个就是其基本服务原理。不过有时候也会有点莫名其妙的错误。</p>
<h3 id="五、GNOCHM"><a href="#五、GNOCHM" class="headerlink" title="五、GNOCHM"></a>五、GNOCHM</h3><p>这是一个比较完美的chm阅读器了，可以说是完美支持中文的。</p>
<pre><code>sudo apt-get install gnochm
</code></pre><h3 id="六、okular"><a href="#六、okular" class="headerlink" title="六、okular"></a>六、okular</h3><pre><code>sudo apt-get install gnochm
sudo apt-get install okular-extra-backends 
</code></pre><h3 id="七、fbreader"><a href="#七、fbreader" class="headerlink" title="七、fbreader"></a>七、fbreader</h3><pre><code>sudo apt-get install fbreader
</code></pre><blockquote>
<p>引用地址：<a href="http://blog.csdn.net/aking21alinjuju/article/details/4436440" target="_blank" rel="noopener">http://blog.csdn.net/aking21alinjuju/article/details/4436440</a></p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>reader</tag>
        <tag>chm</tag>
      </tags>
  </entry>
  <entry>
    <title>收集一些cdn公共库</title>
    <url>/2016/2016-2016-03-01-collect-cdn-source/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>国内：</p>
<ul>
<li><p><a href="http://cdn.code.baidu.com/" target="_blank" rel="noopener">百度cdn</a></p>
</li>
<li><p><a href="http://www.staticfile.org/" target="_blank" rel="noopener">七牛cdn</a></p>
</li>
<li><p><a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">bootstrap中国</a></p>
</li>
<li><p><a href="http://cdnjs.net/" target="_blank" rel="noopener">cdnjs.net</a></p>
</li>
<li><p><a href="https://www.jsdelivr.com/" target="_blank" rel="noopener">jsdelivr</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>cdn</tag>
        <tag>js</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>在github等开源网站收集前端框架</title>
    <url>/2016/2016-2016-05-11-collect-github-frontend-source/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><h3 id="1-BlackrockDigital"><a href="#1-BlackrockDigital" class="headerlink" title="1. BlackrockDigital"></a>1. <a href="https://github.com/BlackrockDigital" target="_blank" rel="noopener">BlackrockDigital</a></h3><blockquote>
<p>该大神估计是个前端狂，写了很多基于bootstrap 的前端框架，包括sb-admin 等。</p>
</blockquote>
<ul>
<li><a href="https://github.com/BlackrockDigital/startbootstrap-sb-admin-2" target="_blank" rel="noopener">startbootstrap-sb-admin-2</a></li>
<li><a href="https://github.com/BlackrockDigital/startbootstrap-clean-blog" target="_blank" rel="noopener">startbootstrap-clean-blog</a></li>
</ul>
<h3 id="2-almasaeed2010"><a href="#2-almasaeed2010" class="headerlink" title="2. almasaeed2010"></a>2. <a href="https://github.com/almasaeed2010" target="_blank" rel="noopener">almasaeed2010</a></h3><ul>
<li><a href="https://github.com/almasaeed2010/AdminLTE" target="_blank" rel="noopener">AdminLte</a></li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown初步尝试</title>
    <url>/2016/2016-2016-06-18-mark-down-learn/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h2 id="1-一、-Title"><a href="#1-一、-Title" class="headerlink" title="1. 一、 Title"></a>1. 一、 Title</h2><ul>
<li>Title1<br>=</li>
</ul>
<p>通过在文字下方添加“=”表示一级标题。</p>
<pre><code>Title1
=
</code></pre><ul>
<li>Title2<br>-</li>
</ul>
<p>通过在文字下方添加“-”表示二级标题。</p>
<pre><code>Title2
-
</code></pre><ul>
<li><h3 id="Title3"><a href="#Title3" class="headerlink" title="Title3"></a>Title3</h3></li>
</ul>
<p>在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p>
<pre><code>### Title3
</code></pre><h2 id="二、-有序列表"><a href="#二、-有序列表" class="headerlink" title="二、 有序列表"></a>二、 有序列表</h2><p>使用数字后面跟上句号。（还要有空格）<br>如：以下列表</p>
<ol>
<li>小红</li>
<li>小明</li>
<li>小白</li>
<li>小逼</li>
</ol>
<p>.</p>
<pre><code>1. 小红
2. 小明
3. 小白
4. 小逼
</code></pre><h2 id="三、无序列表"><a href="#三、无序列表" class="headerlink" title="三、无序列表"></a>三、无序列表</h2><p>在文字开头添加(*, +, -)和空格实现无序列表。</p>
<ul>
<li>小红</li>
<li>小黄</li>
</ul>
<ul>
<li>小马</li>
<li>小羊</li>
</ul>
<ul>
<li>小高</li>
<li>小美</li>
</ul>
<p>.</p>
<pre><code>- 小红
- 小黄
* 小马
* 小羊
+ 小高
+ 小美
</code></pre><h2 id="四、加粗，斜体"><a href="#四、加粗，斜体" class="headerlink" title="四、加粗，斜体"></a>四、加粗，斜体</h2><p>在文字开头和结尾加上 ** </p>
<p><strong>这是加粗的文字1</strong><br><strong>这是加粗的文字2</strong></p>
<p><em>这是斜体文字1</em><br><em>这是斜体文字2</em></p>
<p>.</p>
<pre><code>**这是加粗的文字1**
__这是加粗的文字2__

*这是斜体文字1*
_这是斜体文字2_
</code></pre><h2 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h2><p><img src="http://www.iconpng.com/png/phuzion/windows.png" alt="这是一张图片"></p>
<p>.</p>
<pre><code>![这是一张图片](http://www.iconpng.com/png/phuzion/windows.png)
</code></pre><h2 id="六、文字链接"><a href="#六、文字链接" class="headerlink" title="六、文字链接"></a>六、文字链接</h2><ul>
<li>普通跳转 <a href="https://github.com/" target="_blank" rel="noopener">Github</a></li>
</ul>
<p>.</p>
<pre><code>[Github](https://github.com/)
</code></pre><ul>
<li>target=’_blank’跳转 <a href="https://github.com/" target="_blank" rel="noopener">Github target _blank</a>{:target=”_blank”}</li>
</ul>
<p>.</p>
<pre><code>[Github](https://github.com/){:target=&quot;_blank&quot;}
</code></pre><ul>
<li>邮箱链接 <a href="mailto:&#x32;&#x38;&#52;&#x31;&#x34;&#49;&#48;&#x35;&#x30;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#x32;&#x38;&#52;&#x31;&#x34;&#49;&#48;&#x35;&#x30;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#x6d;</a></li>
</ul>
<p>.</p>
<pre><code>&lt;284141050@qq.com&gt;
</code></pre><h2 id="七、引用"><a href="#七、引用" class="headerlink" title="七、引用"></a>七、引用</h2><blockquote>
<p>这是一个引用<br>这是一个引用<br>这是一个引用</p>
</blockquote>
<blockquote>
<pre><code>这是另一个引用，&gt;后面有5个空格
这是另一个引用，&gt;后面有5个空格
这是另一个引用，&gt;后面有5个空格
</code></pre></blockquote>
<p>.</p>
<pre><code>&gt; 这是一个引用
&gt; 这是一个引用
&gt; 这是一个引用

&gt;     这是另一个引用，&gt;后面有5个空格
&gt;     这是另一个引用，&gt;后面有5个空格
&gt;     这是另一个引用，&gt;后面有5个空格
</code></pre><h2 id="八、删除线"><a href="#八、删除线" class="headerlink" title="八、删除线"></a>八、删除线</h2><p><del>是不是有删除线</del></p>
<pre><code>~~是不是有删除线~~
</code></pre><h2 id="九、分割线"><a href="#九、分割线" class="headerlink" title="九、分割线"></a>九、分割线</h2><hr>
<hr>
<pre><code>***
---
</code></pre><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><p>表1</p>
<p>姓名|性别|年龄|爱好<br>小红|女|28|没有<br>小明|男|21|考试<br>Jim Green|男|25|打飞机</p>
<p>表2</p>
<p>姓名|性别|年龄|爱好<br>|—|:—:|:—|—:|<br>小红|女|28|没有<br>小明|男|21|考试<br>Jim Green|男|25|打飞机</p>
<p>表3</p>
<p>姓名|性别|年龄|爱好<br>|—    |—    |—    |—    |<br>小红|女|28|没有<br>小明|男|21|考试<br>Jim Green|男|25|打飞机</p>
<pre><code>表1

姓名|性别|年龄|爱好
小红|女|28|没有
小明|男|21|考试
Jim Green|男|25|打飞机



表2

姓名|性别|年龄|爱好
|---|:---:|:---|---:|
小红|女|28|没有
小明|男|21|考试
Jim Green|男|25|打飞机



表3

姓名|性别|年龄|爱好
|---    |---    |---    |---    |
小红|女|28|没有
小明|男|21|考试
Jim Green|男|25|打飞机
</code></pre><h2 id="sddff"><a href="#sddff" class="headerlink" title="sddff"></a>sddff</h2>]]></content>
      <categories>
        <category>lessons</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>linux (debian) 启动报错 contains a file system with errors.check forced</title>
    <url>/2016/2016-2016-06-28-linux-contains-a-file/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h3 id="今天开机，debian起动不了了。搜索了一下，应该硬盘的逻辑卷无法加载。"><a href="#今天开机，debian起动不了了。搜索了一下，应该硬盘的逻辑卷无法加载。" class="headerlink" title="今天开机，debian起动不了了。搜索了一下，应该硬盘的逻辑卷无法加载。"></a>今天开机，debian起动不了了。搜索了一下，应该硬盘的逻辑卷无法加载。</h3><h3 id="用-fsck-命令解决，特此记录"><a href="#用-fsck-命令解决，特此记录" class="headerlink" title="用 fsck 命令解决，特此记录"></a>用 fsck 命令解决，特此记录</h3><pre><code>fsck -C fd -N /dev/sda[n]     #命令中 [n] 为出错的分区，一般为 /boot 分区
</code></pre><p>结果为 [/sbinfsck.ext4 (1) – /dev/sda[n] ] ……</p>
<p>然后执行命令</p>
<pre><code>fsck.ext4 -C0 /dev/sda[n]
</code></pre><p>期间会多次地提示输入 yes/y 直接输入y 就行了。</p>
<p>完成后，会提示FILE SYSTEM WAS MODIFIED</p>
<p>不出意外，重启系统后就能成功登录了</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 新用户不能tab自动补全、退格变^H 等问题</title>
    <url>/2016/2016-2016-07-29-linux-new-user/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>去年搞了台国外的便宜的服务器，主要用于浏览长城以外的风光。服务器也一直很稳定。</p>
<p>由于硬盘空间较小，也没有准备搞其它用。最近决定在服务器上搞一些不占空间的服务，我草，每个访问一个页面，后面都带一段js代码。</p>
<p>然后试了一下，就连这最简单的 “echo ‘hello world’;” 都会带。google 了一下，没找到原因，然后就一言不合的重装了系统。。。</p>
<p>然后新建用户，切换过后发现新用户有问题。比如退格键是 ^H ，tab键不自动补全。。。</p>
<p>用命令看了一下</p>
<pre><code>cat /ect/passwd
</code></pre><p>发现root用户的shell是/bin/bash</p>
<p>普通用户的shell是/bin/sh</p>
<p>然后把该用户的 /bin/sh 改成 /bin/bash 就行了</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>phalcon 的跳转问题</title>
    <url>/2016/2016-2016-08-01-phalcon-redirect-send/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>今天又遇到那个那老问题了，phalcon 跳转（response-&gt;redirect(…)） 时，仍然会执行后续代码的问题</p>
<h2 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h2><pre><code>public function indexAction()
    {

        //判断条件
        if(true){
            $this-&gt;response-&gt;redirect(&apos;http://www.qq.com&apos;);
        }

        //new 一个 Phalcon\Logger\Adapter\File() ,
        $logger = new File($this-&gt;config-&gt;application-&gt;logsDir.&apos;debug.log&apos;);

        // log
        $logger-&gt;log(&apos;hello world &apos;);

    }
</code></pre><p>执行该脚本，结果就是跳转到 <a href="http://www.qq.com" target="_blank" rel="noopener">www.qq.com</a> ，但是 $logger 也仍然会运行，记录下 hello world。<br>这种在action  的 redirect 还比较好解决，直接在 redirect 那里 return 就可以了</p>
<p>比如</p>
<pre><code>public function indexAction()
{

    //判断条件
    if(true){
        return $this-&gt;response-&gt;redirect(&apos;http://www.qq.com&apos;);

        //或者这样

        $this-&gt;response-&gt;redirect(&apos;http://www.qq.com&apos;);
        return;
    }

    //new 一个 Phalcon\Logger\Adapter\File() ,
    $logger = new File($this-&gt;config-&gt;application-&gt;logsDir.&apos;debug.log&apos;);

    // log
    $logger-&gt;log(&apos;hello world &apos;);

}
</code></pre><p>但还有一种情况，就是比如判断用户权限时，就可会把 redirect 写在 initialize 或者 beforeExecuteRoute 等地方</p>
<pre><code>public function initialize()
{
    $this-&gt;response-&gt;redirect(&apos;http://www.baidu.com&apos;);
    return;
}


public function indexAction()
{

    $this-&gt;response-&gt;redirect(&apos;http://www.qq.com&apos;);

    //new 一个 Phalcon\Logger\Adapter\File() ,
    $logger = new File($this-&gt;config-&gt;application-&gt;logsDir.&apos;debug.log&apos;);

    // log
    $logger-&gt;log(&apos;hello world &apos;);

}
</code></pre><p>执行后，就跳转到了 qq 而不是 baidu ， logger 也正常 log 。而且 initialize 里面的加了 return 也没有效果。</p>
<p>但是，如果把 return 改成exit 的话，就直接是空页面。</p>
<p>查了一下 Response 的接口，发现里面的两个方法</p>
<pre><code>/**
 * Prints out HTTP response to the client
 *
 * @return ResponseInterface
 */
public function send();

/**
 * Sends headers to the client
 *
 * @return ResponseInterface
 */
public function sendHeaders();
</code></pre><p>觉得可能 Response 只是设置了跳转url ，而实际并没有发送header。<br>于是尝试了一下,在 redirect 方法后面加了 send() 或者 sendHeaders() 执行了一下。<br>结果还是不成功，仍然会执行后续代码。<br>再然后，加了一个exit ，就成功了。记录一下代码！！！</p>
<pre><code>public function initialize()
{
    //$this-&gt;response-&gt;redirect(&apos;http://www.baidu.com&apos;)-&gt;sendHeaders();
    $this-&gt;response-&gt;redirect(&apos;http://www.baidu.com&apos;)-&gt;send();
    exit();
}

public function indexAction()
{

    $this-&gt;response-&gt;redirect(&apos;http://www.qq.com&apos;);

    //new 一个 Phalcon\Logger\Adapter\File() ,
    $logger = new File($this-&gt;config-&gt;application-&gt;logsDir.&apos;debug.log&apos;);

    // log
    $logger-&gt;log(&apos;hello world &apos;);

}
</code></pre><p>上面的 send() 和 sendHeaders() 都可以用，关于这两个的区别，暂时没有时间研究。先记在这里吧，有时间再看！</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>phalcon</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 7 64位编译php5 的注意点</title>
    <url>/2016/2016-2016-08-17-debian-7-php-64-error/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>debian 7 64位服务器由于lib路径的特殊性，编译php的时候，会一直抱某些lib文件找不到</p>
<p>比如libjpeg，libpng，libmysql等</p>
<p>其实我们只要用php的一个编译参数就可以解决这个问题，这个参数就是 –with-libdir=</p>
<pre><code>./configure --prefix=/usr/local/php5 --with-iconv --with-zlib --enable-xml --with-gettext --with-curl --enable-force-cgi-redirect --enable-mbstring --with-mcrypt --with-gd --enable-gd-native-ttf --with-mhash --enable-sockets --with-xmlrpc --enable-zip --with-mysql --with-mysqli --with-pdo-mysql --enable-ftp --with-jpeg-dir --with-freetype-dir --with-png-dir --enable-bcmath --enable-calendar --enable-exif -with-openssl --with-bz2 --with-apxs2=/usr/local/apache2/bin/apxs --with-libdir=lib/x86_64-linux-gnu
</code></pre><p>注意 –with-libdir=lib/x86_64-linux-gnu</p>
<p>代表实际路径是 /usr/lib/x86_64-linux-gnu</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP自动捕捉页面500错误示例</title>
    <url>/2016/2016-2016-08-19-php-error-http500/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h3 id="一、解决方法"><a href="#一、解决方法" class="headerlink" title="一、解决方法"></a>一、解决方法</h3><p>　　通常程序发生致命错误的时候页面空白，想获取错误信息也不难!主要是利用两个函数：</p>
<p>1、error_get_last() 获取最后一次发生错误信息，结构如下：</p>
<pre><code>Array
(
    [type] =&gt; 8
    [message] =&gt; Undefined variable: http://www.111cn.net
    [file] =&gt; C:WWWindex.php
    [line] =&gt; 2
)
</code></pre><p>2、register_shutdown_function() 在脚本停止执行时注册一个回调函数</p>
<p>有了这两个函数就可以监控致命错误了：</p>
<pre><code>error_reporting(E_ALL); //E_ALL

function cache_shutdown_error() {

    $_error = error_get_last();

    if ($_error &amp;&amp; in_array($_error[&apos;type&apos;], array(1, 4, 16, 64, 256, 4096, E_ALL))) {

        echo &apos;&lt;font color=red&gt;你的代码出错了：&lt;/font&gt;&lt;/br&gt;&apos;;
        echo &apos;致命错误:&apos; . $_error[&apos;message&apos;] . &apos;&lt;/br&gt;&apos;;
        echo &apos;文件:&apos; . $_error[&apos;file&apos;] . &apos;&lt;/br&gt;&apos;;
        echo &apos;在第&apos; . $_error[&apos;line&apos;] . &apos;行&lt;/br&gt;&apos;;
    }
}

register_shutdown_function(&quot;cache_shutdown_error&quot;);
</code></pre><h3 id="二、附上本地服务器测试方法"><a href="#二、附上本地服务器测试方法" class="headerlink" title="二、附上本地服务器测试方法"></a>二、附上本地服务器测试方法</h3><p>　　下面来说说显示PHP错误提示消息的三个方法。</p>
<p>1、php.ini配置</p>
<p>php.ini 配置中与此相关的有两个配置变量。下面是这两个变量及其默认值</p>
<pre><code>display_errors = Off
error_reporting = E_ALL &amp; ~E_NOTICE
</code></pre><p>display_errors 变量的目的很明显 —— 它告诉PHP是否显示错误。默认值是 Off。现在我们的目的是显示错误提示，那么：</p>
<pre><code>display_errors = On
</code></pre><p>　　E_ALL，这个设置会显示从不良编码实践到无害提示到出错的所有信息。E_ALL 对于开发过程来说有点太细，因为它连变量未初始化也显示提示，而这一点正是PHP“高级”的一个特征。幸好，error_reporting的默认值是“E_ALL &amp; ~E_NOTICE”，这样就只看到错误和不良编码了，对程序无不利的提示则不会显示。
　　</p>
<p>　　修改php.ini后需要重新启动Apache，这样才可以在apache中生效，当然你如果只在命令行下测试程序，是不需要这一步的。</p>
<p>　　配置php程序中</p>
<pre><code>&lt;?php
    //禁用错误报告
    error_reporting(0);
    //报告运行时错误
    error_reporting(E_ERROR | E_WARNING | E_PARSE);
    //报告所有错误
    error_reporting(E_ALL);
?&gt;
</code></pre>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>error</tag>
      </tags>
  </entry>
  <entry>
    <title>debian realtek 无线网卡安装</title>
    <url>/2017/2017-2017-02-20-debian-realtek-driver/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br>装个网卡而已<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install firmware-realtek</span><br></pre></td></tr></table></figure>
<h1 id="命令行设置"><a href="#命令行设置" class="headerlink" title="命令行设置"></a>命令行设置</h1><h1 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo reboot</span><br></pre></td></tr></table></figure>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><blockquote>
<p><a href="https://packages.debian.org/jessie/firmware-realtek" target="_blank" rel="noopener">https://packages.debian.org/jessie/firmware-realtek</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>network</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 以root权限运行图形程序</title>
    <url>/2017/2017-2017-03-17-debian-run-graphics-program-at-root/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br><a id="more"></a></p>
<h1 id="以-root-权限登录图形界面"><a href="#以-root-权限登录图形界面" class="headerlink" title="以 root 权限登录图形界面"></a>以 root 权限登录图形界面</h1><p>百度谷哥一大堆，就不写了</p>
<p>为了安全，而且一般也用不着</p>
<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>最近遇到一个问题，运行一个图形程序，需要 root 权限。要按平常，直接 sudo 之。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xxx</span><br></pre></td></tr></table></figure>
<p>sudo这个命令，在终端运行很好用，但运行图形界面时，没有那么牛逼了</p>
<h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><p>拿<code>wireshark</code>来说，</p>
<p>先运行一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wireshark</span><br></pre></td></tr></table></figure>
<p>毫无疑问，报错了</p>
<p>不同的程序报错信息不同，但大致意思都是连不上 X。</p>
<p>比如wireshark 报错如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No protocol specified</span><br><span class="line"></span><br><span class="line">** (wireshark:20909): WARNING **: Could not open X display</span><br><span class="line">No protocol specified</span><br><span class="line">Unable to init server: 无法连接：拒绝连接</span><br><span class="line"></span><br><span class="line">(wireshark:20909): Gtk-WARNING **: cannot open display: :0</span><br></pre></td></tr></table></figure>
<p>再比如，某java 程序的报错如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No protocol specified</span><br><span class="line">Exception in thread &quot;main&quot; java.awt.AWTError: Can&apos;t connect to X11 window server using &apos;:0&apos; as the value of the DISPLAY variable.</span><br><span class="line">        at sun.awt.X11GraphicsEnvironment.initDisplay(Native Method)</span><br><span class="line">        at sun.awt.X11GraphicsEnvironment.access$200(X11GraphicsEnvironment.java:65)</span><br><span class="line">        at sun.awt.X11GraphicsEnvironment$1.run(X11GraphicsEnvironment.java:115)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at sun.awt.X11GraphicsEnvironment.&lt;clinit&gt;(X11GraphicsEnvironment.java:74)</span><br><span class="line">        at java.lang.Class.forName0(Native Method)</span><br><span class="line">        at java.lang.Class.forName(Class.java:264)</span><br><span class="line">        at java.awt.GraphicsEnvironment.createGE(GraphicsEnvironment.java:103)</span><br><span class="line">        at java.awt.GraphicsEnvironment.getLocalGraphicsEnvironment(GraphicsEnvironment.java:82)</span><br><span class="line">        at java.awt.Window.initGC(Window.java:475)</span><br><span class="line">        at java.awt.Window.init(Window.java:495)</span><br><span class="line">        at java.awt.Window.&lt;init&gt;(Window.java:537)</span><br><span class="line">        at java.awt.Frame.&lt;init&gt;(Frame.java:420)</span><br><span class="line">        at java.awt.Frame.&lt;init&gt;(Frame.java:385)</span><br><span class="line">        at javax.swing.JFrame.&lt;init&gt;(JFrame.java:189)</span><br><span class="line">        at net.fs.client.ClientUI.&lt;init&gt;(ClientUI.java:167)</span><br><span class="line">        at net.fs.client.FSClient.main(FSClient.java:26)</span><br></pre></td></tr></table></figure>
<p>查了一下，图形界面有自己的 sudo</p>
<h2 id="kde"><a href="#kde" class="headerlink" title="kde"></a>kde</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kdesudo COMMAND</span><br></pre></td></tr></table></figure>
<h2 id="gnome"><a href="#gnome" class="headerlink" title="gnome"></a>gnome</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gksu COMMAND</span><br></pre></td></tr></table></figure>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>COMMAND 里有参数时记得加上引号，将命令和参数包起来，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kdesudo <span class="string">'godie -a --bcd=efg'</span></span><br></pre></td></tr></table></figure>
<p>目前我是kde环境，试了一下，果然能用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kdesudo wireshark</span><br></pre></td></tr></table></figure>
<p>ok 收工</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>sudo</tag>
      </tags>
  </entry>
  <entry>
    <title>debian 的 iptables 的常用配置</title>
    <url>/2017/2017-2017-03-22-debian-iptables-configure/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br><a id="more"></a></p>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><blockquote>
<p><a href="http://www.cnblogs.com/kgdxpr/p/4061646.html" target="_blank" rel="noopener">http://www.cnblogs.com/kgdxpr/p/4061646.html</a></p>
</blockquote>
<h2 id="第一次配置"><a href="#第一次配置" class="headerlink" title="第一次配置"></a>第一次配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这个一定要先做，不然清空后可能会悲剧</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空默认所有规则</span></span><br><span class="line">iptables -F</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空自定义的所有规则</span></span><br><span class="line">iptables -X</span><br><span class="line"></span><br><span class="line"><span class="comment">#计数器置0</span></span><br><span class="line"> iptables -Z</span><br></pre></td></tr></table></figure>
<h2 id="配置规则"><a href="#配置规则" class="headerlink" title="配置规则"></a>配置规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#如果没有此规则，你将不能通过127.0.0.1访问本地服务，例如ping 127.0.0.1</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启ssh端口22</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启FTP端口21</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许特定ip连接25端口：</span></span><br><span class="line">iptables -I FORWARD -s 127.0.0.1 -p tcp --dport 25 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启web服务端口80</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#tomcat</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 8080 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql</span></span><br><span class="line">iptables -A INPUT -p tcp --dport xxxx -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许icmp包通过,也就是允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许所有对外请求的返回包</span></span><br><span class="line"><span class="comment">#本机对外请求相当于OUTPUT,对于返回数据包必须接收啊，这相当于INPUT了</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果要添加内网ip信任（接受其所有TCP请求）</span></span><br><span class="line">iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#每秒中最多允许5个新连接</span></span><br><span class="line">iptables -A FORWARD -p tcp --syn -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 1/s --<span class="built_in">limit</span>-burst 5 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#每秒中最多允许5个新连接</span></span><br><span class="line">iptables -A FORWARD -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 1/s -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#Ping洪水攻击</span></span><br><span class="line">iptables -A FORWARD -p icmp --icmp-type <span class="built_in">echo</span>-request -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 1/s -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#封单个IP的命令是：</span></span><br><span class="line">iptables -I INPUT -s 222.34.135.106 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#封IP段的命令是：</span></span><br><span class="line">iptables -I INPUT -s 211.1.0.0/16 -j DROP</span><br><span class="line">iptables -I INPUT -s 211.2.0.0/16 -j DROP</span><br><span class="line">iptables -I INPUT -s 211.3.0.0/16 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#封整个段的命令是：</span></span><br><span class="line">iptables -I INPUT -s 211.0.0.0/8 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#封几个段的命令是：</span></span><br><span class="line">iptables -I INPUT -s 61.37.80.0/24 -j DROP</span><br><span class="line">iptables -I INPUT -s 61.37.81.0/24 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#过滤所有非以上规则的请求</span></span><br><span class="line">iptables -P INPUT DROP</span><br></pre></td></tr></table></figure>
<h2 id="保存重启"><a href="#保存重启" class="headerlink" title="保存重启"></a>保存重启</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#rehat</span></span><br><span class="line">service iptables save</span><br><span class="line">service iptables restart</span><br><span class="line"></span><br><span class="line"><span class="comment">#debian</span></span><br><span class="line">iptables-save &gt; /path/to/rulefile</span><br></pre></td></tr></table></figure>
<h2 id="删除规则1"><a href="#删除规则1" class="headerlink" title="删除规则1"></a>删除规则1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#eg，删除之前添加的规则 (iptables -A INPUT -p tcp -m tcp --dport 8080 -j ACCEPT)</span></span><br><span class="line"></span><br><span class="line">iptables -D INPUT -p tcp -m tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure>
<h2 id="删除规则2"><a href="#删除规则2" class="headerlink" title="删除规则2"></a>删除规则2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#列出指定的链的规则的编号</span></span><br><span class="line">iptables -L INPUT --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除第一条</span></span><br><span class="line">iptables -D INPUT 1</span><br></pre></td></tr></table></figure>
<h1 id="debian的自动加载"><a href="#debian的自动加载" class="headerlink" title="debian的自动加载"></a>debian的自动加载</h1><blockquote>
<p><a href="http://blog.phiy.me/debian-iptables-persistent/" target="_blank" rel="noopener">http://blog.phiy.me/debian-iptables-persistent/</a></p>
</blockquote>
<h2 id="安装-iptables-persistent"><a href="#安装-iptables-persistent" class="headerlink" title="安装 iptables-persistent"></a>安装 iptables-persistent</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install iptables-persistent</span><br></pre></td></tr></table></figure>
<h2 id="保存至-etc-iptables-rules"><a href="#保存至-etc-iptables-rules" class="headerlink" title="保存至 /etc/iptables/rules"></a>保存至 /etc/iptables/rules</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables-save &gt; /etc/iptables/rules</span><br></pre></td></tr></table></figure>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://www.cnblogs.com/kgdxpr/p/4061646.html" target="_blank" rel="noopener">http://www.cnblogs.com/kgdxpr/p/4061646.html</a></p>
<p><a href="http://blog.phiy.me/debian-iptables-persistent/" target="_blank" rel="noopener">http://blog.phiy.me/debian-iptables-persistent/</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>iptables</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>window7 修改docker安装的machine 位置</title>
    <url>/2017/2017-2017-05-26-docker-for-win-alter-vdi-path/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br><a id="more"></a>  </p>
<p>win7下安装Docker ，默认的machine location 是在C:\users\xx.docker\machine\machines 下面，为了不占用系统盘，想修改盘符位置</p>
<p>google了一下，发现只需要设置MACHINE_STORAGE_PATH环境变量就可以，变量值为你想要设置的路径保存，重新运行docker quickstart</p>
<p>流程如下</p>
<ol>
<li><p>设置MACHINE_STORAGE_PATH环境变量</p>
</li>
<li><p>运行Docker Quickstart Termina</p>
</li>
</ol>
<p>如果想转移现有的可以试试下面的方法</p>
<ol>
<li><p>关闭停止Docker的虚拟机。</p>
</li>
<li><p>打开VirtualBox，选择“管理”菜单下的“虚拟介质管理”，</p>
</li>
<li><p>选中docker创建的“disk”，然后点击菜单中的“复制”命令，根据向导，把当前的disk复制到另一个盘上面去。</p>
</li>
<li><p>回到VirtualBox主界面，右键“default”这个虚拟机，选择“设置”命令，在弹出的窗口中选择“存储”选项。</p>
</li>
<li><p>把disk从“控制器SATA”中删除，然后重新添加我们刚才复制到另外一个磁盘上的那个文件。</p>
</li>
</ol>
<p>引用<br><a href="http://blog.csdn.net/u011248395/article/details/70994088" target="_blank" rel="noopener">http://blog.csdn.net/u011248395/article/details/70994088</a></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic hot update</title>
    <url>/2017/2017-2017-12-01-ionic-hot-update/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br><a id="more"></a>  </p>
<h2 id="ionic3-热更新学习"><a href="#ionic3-热更新学习" class="headerlink" title="ionic3 热更新学习"></a>ionic3 热更新学习</h2><h3 id="1-安装基本框架"><a href="#1-安装基本框架" class="headerlink" title="1.安装基本框架"></a>1.安装基本框架</h3><pre><code>npm install -g ionic@latest
npm install -g cordova ionic
</code></pre><h3 id="2-新建ionic项目"><a href="#2-新建ionic项目" class="headerlink" title="2.新建ionic项目"></a>2.新建ionic项目</h3><pre><code>ionic start myapp
</code></pre><h3 id="3-进入项目文件夹"><a href="#3-进入项目文件夹" class="headerlink" title="3.进入项目文件夹"></a>3.进入项目文件夹</h3><pre><code># 执行下面命令可以预览项目
cd myapp

# 正常显示后可以关掉服务Ctrl+C，此步骤只是保证ionic新建项目成功
ionic serve
</code></pre><h3 id="4-ios目前已不支持热更新，所以只对Android平台进行设置"><a href="#4-ios目前已不支持热更新，所以只对Android平台进行设置" class="headerlink" title="4.ios目前已不支持热更新，所以只对Android平台进行设置"></a>4.ios目前已不支持热更新，所以只对Android平台进行设置</h3><pre><code># 设置Android平台
ionic cordova platform add android

# 设置安卓版本需修改下面两个文件内容的target的值，默认设好了
platforms/android/project.properties 
platforms/android/CordovaLib/project.properties 

# 安装热更新插件
cordova plugin add cordova-hot-code-push-plugin
cordova plugin add cordova-hot-code-push-local-dev-addon
npm install -g cordova-hot-code-push-cli
</code></pre><h3 id="5-在config-xml配置文件中加入下面节点"><a href="#5-在config-xml配置文件中加入下面节点" class="headerlink" title="5.在config.xml配置文件中加入下面节点"></a>5.在config.xml配置文件中加入下面节点</h3><pre><code>&lt;chcp&gt;
     &lt;config-file url=&quot;http://192.168.1.203:8121/chcp.json&quot; /&gt;
     &lt;native-interface version=&quot;1&quot; /&gt;
&lt;/chcp&gt;
# 第一个子节点是需要发布在iis上的文件地址
# 第二个子节点是当前版本号
# 还有其它配置此处不再罗列
</code></pre><h3 id="6-新开一个终端执行下面命令"><a href="#6-新开一个终端执行下面命令" class="headerlink" title="6.新开一个终端执行下面命令"></a>6.新开一个终端执行下面命令</h3><pre><code>cordova-hcp server
如果能够正常输出类似
Running server
Checking:  /ionic/myapp/www/
local_url http://localhost:31284
Warning: .chcpignore does not exist.
Build 2017.10.27-10.17.48 created in ionic/myapp/www
cordova-hcp local server available at: http://localhost:31284
cordova-hcp public server available at: https://5027caf9.ngrok.com

检查/项目名称/www 路径下 有chcp.json和chcp.manifest表示热更新服务启动正常
</code></pre>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>ionic</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>vbox中debian9安装增强功能和文件共享</title>
    <url>/2018/2018-2018-05-17-debian9-install-vboxadditions/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="先安装以下"><a href="#先安装以下" class="headerlink" title="先安装以下"></a>先安装以下</h2><pre><code>apt update

apt upgrade

apt install build-essential module-assistant dkms

reboot
</code></pre><h2 id="然后安装-VBoxAdditions"><a href="#然后安装-VBoxAdditions" class="headerlink" title="然后安装 VBoxAdditions"></a>然后安装 VBoxAdditions</h2><ul>
<li><p>在vbox 进入debian系统</p>
</li>
<li><p>然后 Devices &gt; Insert Guest Additions CD image.<br><img src="/assets/images/2018-05-17/debian-9-virtualbox-guest1.png" alt="图"></p>
</li>
<li><p>然后，在系统中挂载VBoxAdditions光盘镜像</p>
</li>
</ul>
<pre><code>mount /media/cdrom 
</code></pre><ul>
<li>安装插件</li>
</ul>
<pre><code>sh /media/cdrom/VBoxLinuxAdditions.run
reboot
</code></pre><h2 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h2><ul>
<li>设置》共享文件夹》 新建</li>
<li>选择路径，</li>
<li>设置名称，比如 vbox_sharing </li>
<li>勾选 自动挂载和固定分配，点确定</li>
</ul>
<p>后面补图</p>
<h2 id="设置开机自动挂载到到指定点"><a href="#设置开机自动挂载到到指定点" class="headerlink" title="设置开机自动挂载到到指定点"></a>设置开机自动挂载到到指定点</h2><p>前面设置好共享文件夹后，系统启动时，会挂载到 /media/sf_&lt;挂载名称&gt;，如 /media/sf_vbox_sharing</p>
<p>现在，我们要设置自动挂载到指定点，就是修改 /etc/fstab </p>
<p>挂载命令的格式为，挂载之前 path 应该存在， &lt; &gt; 中间的值可变</p>
<p>&lt;sharing name&gt; &lt;path&gt; vboxsf &lt;options&gt; 0 0<br>如</p>
<pre><code>mkdir /var/vbox_sharing
vbox_sharing /var/vbox_sharing vboxsf comment=systemd.automount 0 0
</code></pre><p>然后保存，重启，不出意外就成功了</p>
<p>其中，option 中可有很多参数</p>
<p>到时给个链接，现在没时间去找</p>
<p>其中 comment=systemd.automount 参数没有，貌似就不会成功</p>
<p>还有其它的，比如指定用户组</p>
<p>gid=1000,uid=1000</p>
<p>如:</p>
<pre><code>vbox_sharing /var/vbox_sharing vboxsf gid=1000,uid=1000,comment=systemd.automount 0 0
</code></pre><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="https://www.linuxbabe.com/debian/install-virtualbox-guest-additions-debian-9-stretch" target="_blank" rel="noopener">https://www.linuxbabe.com/debian/install-virtualbox-guest-additions-debian-9-stretch</a></p>
<p><a href="https://askubuntu.com/questions/365346/virtualbox-shared-folder-mount-from-fstab-fails-works-once-bootup-is-complete" target="_blank" rel="noopener">https://askubuntu.com/questions/365346/virtualbox-shared-folder-mount-from-fstab-fails-works-once-bootup-is-complete</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>virtualbox</tag>
      </tags>
  </entry>
  <entry>
    <title>debian9 安装 lnmp</title>
    <url>/2018/2018-2018-05-17-debian9-lnmp/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h1 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h1><h2 id="debian9"><a href="#debian9" class="headerlink" title="debian9"></a>debian9</h2><p>使用默认源</p>
<h2 id="debian8及以下"><a href="#debian8及以下" class="headerlink" title="debian8及以下"></a>debian8及以下</h2><p>现在没怎么用debian8了，所以就不写了。</p>
<p>要么手工编译，要么直接 <a href="https://oneinstack.com/" target="_blank" rel="noopener">oneinstack</a></p>
<h2 id="更新本地"><a href="#更新本地" class="headerlink" title="更新本地"></a>更新本地</h2><p>apt-get update</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php7.0-fpm php7.0-curl php7.0-gd php7.0-intl php-pear php7.0-imagick php7.0-imap php7.0-mcrypt php7.0-common php7.0-mysql php7.0-pspell php7.0-recode php7.0-sqlite php7.0-dev php7.0-tidy php7.0-xmlrpc php7.0-xsl php7.0-memcached memcached</span><br></pre></td></tr></table></figure>
<p>分行命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install nginx mysql-server php7.0-fpm php7.0-curl \</span><br><span class="line">php7.0-mbstring php7.0-intl php-pear php7.0-imagick php7.0-imap \</span><br><span class="line">php7.0-mcrypt php7.0-common php7.0-mysql php7.0-pspell \</span><br><span class="line">php7.0-recode php7.0-sqlite php7.0-dev php7.0-tidy php7.0-gd \</span><br><span class="line">php7.0-xmlrpc php7.0-xsl php7.0-memcached memcached</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>winserver 2003 r2 sp2 vol 企业版</title>
    <url>/2018/2018-2018-05-30-winserver-2003-r2-sp2-vol-enterprise/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>有的时候会用winserver2003 做服务器，还是记下一个吧</p>
<a id="more"></a>
<p>Windows 2003 R2 SP2 VOL 企业版（简体中文）</p>
<h2 id="下载链接"><a href="#下载链接" class="headerlink" title="下载链接"></a>下载链接</h2><h3 id="32位版"><a href="#32位版" class="headerlink" title="32位版"></a>32位版</h3><p>CD1:<br>SHA1值:d0dd2782e9387328ebfa45d8804b6850acabf520</p>
<pre><code>ed2k://|file|cn_win_srv_2003_r2_enterprise_with_sp2_vl_cd1_X13-46432.iso|637917184|284dc0e76945125035b9208b9199e465|h=EH6ISTIVFR5627ONBBNBKELX4VYGJPAW|/
</code></pre><p>CD2:<br>SHA1值:4b364e848fcc59762dddced1493248e2896ee033</p>
<pre><code>ed2k://|file|cn_win_srv_2003_r2_enterprise_with_sp2_vl_cd2.iso|129703936|512c89a5839ffc8a3f3124acb9e9cb75|h=TJQXAYJUDXXM7E5X64KQBL56OUKTLU5E|
</code></pre><p>序列号：MDGJK-PF6YQ-PD8DJ-RFQVM-7WKWG</p>
<h3 id="64位版："><a href="#64位版：" class="headerlink" title="64位版："></a>64位版：</h3><p>CD1:<br>HASH:FDA1A0401CA610F6E3A7780D6DB004DA2F944138</p>
<pre><code>ed2k://|file|cn_win_srv_2003_r2_enterprise_x64_with_sp2_vl_cd1_X13-47314.iso|647686144|107F10D2A7FF12FFF0602FF60602BB37|/
</code></pre><p>CD2:<br>HASH:42CB2508F37B7B3331B8EB7A04D58DB508248821</p>
<pre><code>ed2k://|file|cn_win_srv_2003_r2_enterprise_x64_with_sp2_vl_cd2_X13-35321.iso|179204096|651EDB26E33E1AD0F14430245D4D44C6|/
</code></pre><h2 id="序列号"><a href="#序列号" class="headerlink" title="序列号"></a>序列号</h2><pre><code>RYCR6-T7Y6M-2TVHK-C2YW3-7TYQ8
</code></pre>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>jekyll panxw blog</title>
    <url>/2018/2018-2018-06-28-jekyll-panxw-blog/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补<br><a id="more"></a>  </p>
<p>准备把blog 改成这个 panxw 的模板，现在写一下改的过程<br><!--more--></p>
<h2 id="官方blog"><a href="#官方blog" class="headerlink" title="官方blog"></a>官方blog</h2><p><a href="https://www.panxw.com/" target="_blank" rel="noopener">https://www.panxw.com/</a></p>
<h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/panxw/panxw.github.com" target="_blank" rel="noopener">https://github.com/panxw/panxw.github.com</a></p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>参见官网</p>
<h1 id="改动"><a href="#改动" class="headerlink" title="改动"></a>改动</h1><p>下面说一下我使用中的改动</p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><h3 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 _config.yml</h3><pre><code>#permalink节点 #我的习惯年月 日就算了，毕竟一天不可能一天几篇
permalink: /:categories/:year/:month/:title

# 然后这几个 人个配置信息
github: uljjmhn520
author: &quot;lopy&quot;
email: xxxx#163.com
name: &quot;lopy&apos;s Blog&quot;
baseurl: /
url: http://blog.lopy.win
domain: blog.lopy.win

# 分类，暂时不管，以后按自己的情况修改
all_categories: [
  [&quot;android&quot;, &quot;Android开发&quot;,&quot;/android/index.html&quot;], 
  [&quot;react&quot;, &quot;React Native&quot;, &quot;/react/index.html&quot;],
  [&quot;web&quot;, &quot;Web建站&quot;,&quot;/web/index.html&quot;], 
  [&quot;linux&quot;, &quot;Linux相关&quot;,&quot;/linux/index.html&quot;],
  [&quot;git&quot;, &quot;git用法&quot;,&quot;/git/index.html&quot;],
  [&quot;program&quot;, &quot;软件开发&quot;,&quot;/program/index.html&quot;],
  [&quot;vps&quot;, &quot;VPS&quot;,&quot;/vps/index.html&quot;],
  [&quot;other&quot;, &quot;杂记&quot;,&quot;/other/index.html&quot;],
  [&quot;read&quot;, &quot;书摘&quot;,&quot;/read/index.html&quot;], 
  [&quot;about&quot;, &quot;关于&quot;,&quot;/about.html&quot;]
]

# 加入节点 friendly_links ，将友链写入配置文件
friendly_links: [
  [&quot;GitHub&quot;,&quot;https://github.com&quot;],
  [&quot;baidu&quot;,&quot;https://www.baidu.com&quot;],
]
</code></pre><h2 id="修改部分源码"><a href="#修改部分源码" class="headerlink" title="修改部分源码"></a>修改部分源码</h2><h3 id="加入-Rakefile"><a href="#加入-Rakefile" class="headerlink" title="加入 Rakefile"></a>加入 Rakefile</h3><p>这个提取自 jekyll-bootstrap 然后稍微改了几句和post 相关的，其他的没有改完。</p>
<h3 id="改-index-html"><a href="#改-index-html" class="headerlink" title="改 index.html"></a>改 index.html</h3><pre><code>&lt;span class=&quot;glyphicon glyphicon-time&quot;&gt;&lt;/span&gt;
    { { post.date | date:&quot;%F %T&quot; }}
&lt;/div&gt;
</code></pre><h3 id="改-layouts-post-html"><a href="#改-layouts-post-html" class="headerlink" title="改 _layouts/post.html"></a>改 _layouts/post.html</h3><pre><code>日期：{ { page.date | date:&quot;%F %T&quot; }}&amp;nbsp;&amp;nbsp;&amp;nbsp;
</code></pre><h3 id="修改友链页面"><a href="#修改友链页面" class="headerlink" title="修改友链页面"></a>修改友链页面</h3><pre><code>## 改成从配置文件中获取  friendlinks.html

&lt;ul class=&quot;list-unstyled&quot;&gt;
    { % for link in site.friendly_links %}
    &lt;li&gt;
        &lt;a href=&quot;{ {link[1]}}&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot;&gt;
            { {link[0]}}
        &lt;/a&gt;
    &lt;/li&gt;
    { % endfor %}
&lt;/ul&gt;
</code></pre><h3 id="新增友链按钮"><a href="#新增友链按钮" class="headerlink" title="新增友链按钮"></a>新增友链按钮</h3><pre><code>&lt;div class=&quot;linkme&quot;&gt;
    &lt;a href=&quot;http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=w7SqraWqsa6DsrLtoKyu&quot; target=&quot;_blank&quot;&gt;
        &lt;span class=&quot;linkme_span&quot;&gt;交换链接 暂不改1&lt;/span&gt;
    &lt;/a&gt;
&lt;/div&gt;
</code></pre>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>整理微软的一些下载地址</title>
    <url>/2018/2018-2018-07-02-windows7-iso-ed2k/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>整理几个win7的系统下载地址，都是vol版，方便以后安装</p>
<a id="more"></a>
<h1 id="windows7"><a href="#windows7" class="headerlink" title="windows7"></a>windows7</h1><h2 id="512企业版X86"><a href="#512企业版X86" class="headerlink" title="512企业版X86"></a>512企业版X86</h2><p><a href="ed2k://|file|cn_windows_7_enterprise_with_sp1_x86_dvd_u_677716.iso|2502856704|B3C25EA4DD88D7E54F22D3C3E78C410B|/" target="_blank" rel="noopener">cn_windows_7_enterprise_with_sp1_x86_dvd_u_677716.iso (2.33 GB)</a></p>
<h2 id="512企业版X64"><a href="#512企业版X64" class="headerlink" title="512企业版X64"></a>512企业版X64</h2><p><a href="ed2k://|file|cn_windows_7_enterprise_with_sp1_x64_dvd_u_677685.iso|3265574912|E9DB2607EA3B3540F3FE2E388F8C53C4|/" target="_blank" rel="noopener">cn_windows_7_enterprise_with_sp1_x64_dvd_u_677685.iso (3.04 GB)</a></p>
<h2 id="512专业版X86"><a href="#512专业版X86" class="headerlink" title="512专业版X86"></a>512专业版X86</h2><p><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso|2502909952|935E5B4B754527BE3C238FA6ABDD9B86|/" target="_blank" rel="noopener">cn_windows_7_professional_with_sp1_vl_build_x86_dvd_u_677939.iso (2.33 GB)</a></p>
<h2 id="512专业版X64"><a href="#512专业版X64" class="headerlink" title="512专业版X64"></a>512专业版X64</h2><p><a href="ed2k://|file|cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso|3266004992|5A52F4CCEFA71797D58389B397038B2F|/" target="_blank" rel="noopener">cn_windows_7_professional_with_sp1_vl_build_x64_dvd_u_677816.iso (3.04 GB)</a></p>
<h1 id="windows10"><a href="#windows10" class="headerlink" title="windows10"></a>windows10</h1><h2 id="专业版X64-vol"><a href="#专业版X64-vol" class="headerlink" title="专业版X64 vol"></a>专业版X64 vol</h2><p><a href="ed2k://|file|cn_windows_10_business_editions_version_1803_updated_march_2018_x64_dvd_12063730.iso|4634574848|5674B3586C866EB2F47D7736A1FDE27A|/" target="_blank" rel="noopener">cn_windows_10_business_editions_version_1803_updated_march_2018_x64_dvd_12063730</a></p>
<h1 id="office"><a href="#office" class="headerlink" title="office"></a>office</h1><p>该部分引用自：</p>
<blockquote>
<p><a href="https://blog.csdn.net/caonuoqi/article/details/51699865" target="_blank" rel="noopener">https://blog.csdn.net/caonuoqi/article/details/51699865</a></p>
</blockquote>
<h2 id="Office-2016-专业增强版32位"><a href="#Office-2016-专业增强版32位" class="headerlink" title="Office 2016 专业增强版32位"></a>Office 2016 专业增强版32位</h2><p>文件名：SW_DVD5_Office_Professional_Plus_2016_W32_ChnSimp_MLF_X20-41351.ISO</p>
<p>SHA1: 0218F50774AAB63AF7755B0986CDB9972B853E44</p>
<p><a href="ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_W32_ChnSimp_MLF_X20-41351.ISO|986441728|2DE74581C10096137481873B3AD57D43|/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="Office-2016-专业增强版64位"><a href="#Office-2016-专业增强版64位" class="headerlink" title="Office 2016 专业增强版64位"></a>Office 2016 专业增强版64位</h2><p>文件名：SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO</p>
<p>SHA1: AEB58DE1BC97685F8BC6BFB0A614A8EF6903E318</p>
<p><a href="ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO|1123452928|31087A00FF67D4F5B4CBF4AA07C3433B|/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="Office-2016-Pro-专业版32位"><a href="#Office-2016-Pro-专业版32位" class="headerlink" title="Office 2016 Pro 专业版32位"></a>Office 2016 Pro 专业版32位</h2><p>文件名：SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO</p>
<p>SHA1: 71E082174812F748AB1A70CA33E6004E1E1AACA8</p>
<p><a href="ed2k://|file|SW_DVD5_Project_Pro_2016_W32_ChnSimp_MLF_X20-41511.ISO|555210752|CA3BD5F8C7B3E263105B041DDD4104AB|/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="Office-2016-Pro-专业版64位"><a href="#Office-2016-Pro-专业版64位" class="headerlink" title="Office 2016 Pro 专业版64位"></a>Office 2016 Pro 专业版64位</h2><p>文件名：SW_DVD5_Project_Pro_2016_64Bit_ChnSimp_MLF_X20-42676.ISO</p>
<p>SHA1: 3C180FDAF91DBD0CB767BD040B42B0599FC53438</p>
<p><a href="ed2k://|file|SW_DVD5_Project_Pro_2016_64Bit_ChnSimp_MLF_X20-42676.ISO|647157760|0BBBF20CA3A5F61A819586ADCE6E4DCB|/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="Office-2016-Visio-专业版32位"><a href="#Office-2016-Visio-专业版32位" class="headerlink" title="Office 2016 Visio 专业版32位"></a>Office 2016 Visio 专业版32位</h2><p>文件名：SW_DVD5_Visio_Pro_2016_W32_ChnSimp_MLF_X20-41580.ISO</p>
<p>SHA1: 780046411EB18874AA2DA7E4A11322557EB00D92</p>
<p><a href="ed2k://|file|SW_DVD5_Visio_Pro_2016_W32_ChnSimp_MLF_X20-41580.ISO|609447936|91EB248558F236AA66D234EA03FAD9A9|/" target="_blank" rel="noopener">下载地址</a></p>
<h2 id="Office-2016-Visio-专业版64位"><a href="#Office-2016-Visio-专业版64位" class="headerlink" title="Office 2016 Visio 专业版64位"></a>Office 2016 Visio 专业版64位</h2><p>文件名：SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO</p>
<p>SHA1: 71E082174812F748AB1A70CA33E6004E1E1AACA8</p>
<p><a href="ed2k://|file|SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO|714913792|FC930AB97B366B3595FC2F28ABAC2A6F|/" target="_blank" rel="noopener">下载地址</a></p>
<h1 id="visual-studio"><a href="#visual-studio" class="headerlink" title="visual studio"></a>visual studio</h1><h2 id="language-pak"><a href="#language-pak" class="headerlink" title="language pak"></a>language pak</h2><p><a href="https://my.visualstudio.com/Downloads?q=Visual%20Studio%202013%20Language%20Pack" target="_blank" rel="noopener">Visual%20Studio%202013%20Language%20Pack</a></p>
<p><a href="http://go.microsoft.com/?linkid=9832167" target="_blank" rel="noopener">http://go.microsoft.com/?linkid=9832167</a></p>
<h1 id="激活方式"><a href="#激活方式" class="headerlink" title="激活方式"></a>激活方式</h1><p>后面补</p>
<blockquote>
<p><a href="https://hub.docker.com/r/luodaoyi/kms-server" target="_blank" rel="noopener">https://hub.docker.com/r/luodaoyi/kms-server</a></p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>develop</tag>
        <tag>microsoft</tag>
      </tags>
  </entry>
  <entry>
    <title>ionic3 gps</title>
    <url>/2018/2018-2018-08-01-ionic3-gps/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>做一个ionic3版的GPS定位，我主要是参考ionic官网的简单例子来做的，不足请指教。</p>
<a id="more"></a>
<p>1：运行命令：来安装GPS插件</p>
<pre><code>ionic cordova plugin add cordova-plugin-geolocation
npm install --save @ionic-native/geolocation
</code></pre><p>2: 晕，好久生成的，都忘了，后面补起</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ionic</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>win7 安装vagrant</title>
    <url>/2018/2018-2018-10-29-win7-install-vagrant/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>win7 安装vagrant，做为开发环境，但有时会出错。现将之记录下来。</p>
<a id="more"></a>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>回头补，主要是遇到的错误要先记下来</p>
<h1 id="已知错误"><a href="#已知错误" class="headerlink" title="已知错误"></a>已知错误</h1><h2 id="powershell-版本太低"><a href="#powershell-版本太低" class="headerlink" title="powershell 版本太低"></a>powershell 版本太低</h2><ul>
<li><p>错误信息：</p>
<blockquote>
<p>The version of powershell currently installed on this host is less than<br>  the required minimum version. Please upgrade the installed version of<br>  powershell to the minimum required version and run the command again.</p>
</blockquote>
<blockquote>
<p>Installed version: 2<br>  Minimum required version: 3</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>解决方法</p>
<blockquote>
<p>参见微软官网<br>  <a href="https://social.technet.microsoft.com/wiki/contents/articles/21016.how-to-install-windows-powershell-4-0.aspx" target="_blank" rel="noopener">https://social.technet.microsoft.com/wiki/contents/articles/21016.how-to-install-windows-powershell-4-0.aspx</a></p>
</blockquote>
<p>  但是，由于win7估计快被微软放弃了，不能装了。于是stackoverflow了一下。</p>
<p>  <a href="https://stackoverflow.com/questions/19902239/how-to-upgrade-powershell-version-from-2-0-to-3-0" target="_blank" rel="noopener">https://stackoverflow.com/questions/19902239/how-to-upgrade-powershell-version-from-2-0-to-3-0</a></p>
<ol>
<li><p>Install Chocolatey<br> <a href="https://chocolatey.org/install" target="_blank" rel="noopener">详细的请点此链接</a></p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">## 打开<span class="built_in">cmd</span>,在 <span class="built_in">cmd</span>中写入以下命令</span><br><span class="line">@"<span class="variable">%SystemRoot%</span>\System32\WindowsPowerShell\v1.<span class="number">0</span>\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "iex ((New-Object System.<span class="built_in">Net</span>.WebClient).DownloadString('https://chocolatey.org/install.ps1'))" &amp;&amp; <span class="built_in">SET</span> "<span class="built_in">PATH</span>=<span class="variable">%PATH%</span>;<span class="variable">%ALLUSERSPROFILE%</span>\chocolatey\bin"</span><br></pre></td></tr></table></figure>
</li>
<li><p>Run the following commands in CMD</p>
 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">choco install powershell</span><br><span class="line">choco upgrade powershell</span><br></pre></td></tr></table></figure>
</li>
<li><p>restart your computer</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>vagrant</tag>
      </tags>
  </entry>
  <entry>
    <title>为 hexo-next 增加搜索功能</title>
    <url>/2018/2018-2018-10-30-hexo-add-local-search/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>为 hexo - next 增加搜索功能，方便快速定位</p>
<a id="more"></a>
<h1 id="源自链接"><a href="#源自链接" class="headerlink" title="源自链接"></a>源自链接</h1><blockquote>
<p><a href="https://segmentfault.com/a/1190000010881874" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010881874</a></p>
</blockquote>
<h1 id="用自带的插件实现"><a href="#用自带的插件实现" class="headerlink" title="用自带的插件实现"></a>用自带的插件实现</h1><h2 id="安装-hexo-generator-search"><a href="#安装-hexo-generator-search" class="headerlink" title="安装 hexo-generator-search"></a>安装 hexo-generator-search</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>
<h2 id="安装-hexo-generator-searchdb"><a href="#安装-hexo-generator-searchdb" class="headerlink" title="安装 hexo-generator-searchdb"></a>安装 hexo-generator-searchdb</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<h2 id="启用搜索"><a href="#启用搜索" class="headerlink" title="启用搜索"></a>启用搜索</h2><p>修改hexo配置文件，在根目录下的_config.yml中增加如下配置：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置next中的搜索入口"><a href="#配置next中的搜索入口" class="headerlink" title="配置next中的搜索入口"></a>配置next中的搜索入口</h2><p>打开themes\next_config.yml，将local_search.enable 设为true</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="运行测试一下"><a href="#运行测试一下" class="headerlink" title="运行测试一下"></a>运行测试一下</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>learn</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>以编译hexo的方式试用travis</title>
    <url>/2018/2018-2018-11-07-travis-test-hexo/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>试用一下持续集成服务 travis。<br>travis对github的开源仓库免费，正巧想写点啥子，正好笔者才换了hexo的blog，正好hexo源码和编译后的html文件在不同的仓库（分支）。</p>
<p>既然这么多的正巧那就把使用travis的过程记录下来吧</p>
<a id="more"></a>
<h1 id="参考连接"><a href="#参考连接" class="headerlink" title="参考连接"></a>参考连接</h1><ol>
<li><a href="https://www.jianshu.com/p/5691815b81b6" target="_blank" rel="noopener">使用Travis CI持续部署Hexo博客</a></li>
</ol>
<h1 id="默认流程"><a href="#默认流程" class="headerlink" title="默认流程"></a>默认流程</h1><ol>
<li><p>使用 hexo g 命令生成静态html文件。生成的文件在 <strong>public</strong> 目录下：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后把 <strong>public</strong> 文件夹下所有文件push到github的某仓库或者本仓库的另一个分支</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> public</span><br><span class="line">git init</span><br><span class="line">git config user.name <span class="string">"xx"</span></span><br><span class="line">git config user.email <span class="string">"xx@xx.xx"</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"update posts"</span></span><br><span class="line">git push --force --quiet <span class="string">"github url"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>前面两步可以可以用一个hexo命令完成 <strong>hexo d</strong></p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p> 不过，在执行命令之前，要先配置 <strong>_config.yml</strong> 的 <strong>deploy</strong> 节点</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">github</span> <span class="string">url</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">update</span> <span class="string">post</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ol>
<li><p>每次写完blog，除了要push到源码库，还要push到gitpage所在库。当然这个写一个bash脚本解决</p>
</li>
<li><p>部署在同一个仓库的不同分支下，有时deploy会出错</p>
</li>
<li><p>对于我这种有时在windows下用vagrant开发时，push到两个仓库不太友好</p>
<ol>
<li>git的ssh-key 在windows主机下，平时推拉代码都在主机完成</li>
<li>我windows下没装node环境，也不想装。运行环境都在虚拟机里</li>
<li>也就是说主机不能运行hexo，虚拟机不能git，这tmd就尴尬了</li>
<li>其它还没想到的问题</li>
</ol>
</li>
</ol>
<h1 id="用-Travis-持续部署"><a href="#用-Travis-持续部署" class="headerlink" title="用 Travis 持续部署"></a>用 Travis 持续部署</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>将Hexo源码和发布代码放到一个仓库的不同分支，便于一一对应，也是对博客源码的备份。</p>
<ol>
<li><strong>master</strong> 分支： 用于编译后的文件，也就是用于展示的html源码</li>
<li><strong>hexo-source</strong> 分支： 存markdown源码</li>
</ol>
<p>我使用Github Pages来展示自己的博客，并指定自定义域名。</p>
<p>使用Travis的配置，当仓库push后自动部署，不用手动发布。</p>
<h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>自行百度 hexo 安装，这里不做<br></p>
<h3 id="配置github"><a href="#配置github" class="headerlink" title="配置github"></a>配置github</h3><ol>
<li>新增一个Access Token，<a href>https://github.com/settings/tokens</a><br> 如果链接变了，就去github的setting中找</li>
<li>点击 <strong>Generate new token</strong></li>
<li>Token description 描述，填自己能分辨的就行了</li>
<li>Select scopes，把repo 节点全部勾选就行了</li>
<li>点击 Generate token 即生成成功，然后记下来，等会填到 Travis中去</li>
</ol>
<h3 id="配置travis"><a href="#配置travis" class="headerlink" title="配置travis"></a>配置travis</h3><p>其实配置很简单，我们在官网使用github账号授权登录，hexo添加配置文件就可以了。</p>
<ol>
<li>登录<a href="https://www.travis-ci.org/" target="_blank" rel="noopener">官网</a>，使用github账号登录。</li>
<li>同步github的仓库</li>
<li>选中博客仓库</li>
<li><p>设置travis的各项参数</p>
<ol>
<li>General，钩选 Build pushed branches</li>
<li><p>Environment Variables，设置环境变量，该变量可以在 <strong>.travis.yml</strong> 中使用</p>
<p> 我们这里只把github的刚刚生成的token写入环境变量，这里不晓得会不会有安全问题，但是绝对不对写到 <strong>.travis.yml</strong> 里面</p>
<p> name 填 GITHUB_TOKEN<br> value 填 刚刚生成的token<br> Display value in build log 别打钩，相对安全一点</p>
</li>
</ol>
</li>
<li><p>在源码中新建一个 <strong>.travis.yml</strong> 文件</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">$&#123;GIT_CONFIG_USERNAME&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">$&#123;GIT_CONFIG_EMAIL&#125;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="string">-m</span> <span class="string">"Update docs"</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="string">--force</span> <span class="string">--quiet</span> <span class="string">"https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="string">master:master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">hexo-source</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line"><span class="comment"># 环境变量，把相应的键值改为你自己的就行了 #</span></span><br><span class="line"><span class="comment">#####################################</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"> <span class="attr">global:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">GIT_CONFIG_USERNAME:</span> <span class="string">TonyJavaZ</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">GIT_CONFIG_EMAIL:</span> <span class="string">uljjmhn520@gmail.com</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">GH_REF:</span> <span class="string">github.com/uljjmhn520/uljjmhn520.github.io.git</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="6">
<li><p>配置完成</p>
<ol>
<li><p>push 你的blog源码项目到github</p>
</li>
<li><p>去 travis 后台查看日志可以看到部署过程</p>
</li>
<li><p>部署完成后，gitpage的静态文件也同步更新了</p>
</li>
</ol>
</li>
</ol>
<h1 id="Re参考连接"><a href="#Re参考连接" class="headerlink" title="Re参考连接"></a>Re参考连接</h1><ol>
<li><a href="https://www.jianshu.com/p/5691815b81b6" target="_blank" rel="noopener">使用Travis CI持续部署Hexo博客</a></li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>travis</tag>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】Shell脚本中实现切换用户并执行命令操作</title>
    <url>/2018/2018-2018-11-08-bash-switch-user/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这篇文章主要介绍了Shell脚本中实现切换用户并执行命令操作,看了示例代码就秒懂了,原来如此简单,需要的朋友可以参考下</p>
<a id="more"></a>  
<p>今天公司同事来找到我说要在服务器上用另外一个用户执行python脚本,但设置到crontab里却老是root用户来执行,为了省事我就想了一个偷懒的办法,就是用shell脚本切换到那个用户,然后去执行那个python脚本.好了,这篇文章我只演示怎么用shell脚本切换到其他用户执行命令.</p>
<p>系统:centos 5.x</p>
<p>脚本内容:</p>
<p>cat test.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">su - <span class="built_in">test</span> &lt;&lt;EOF</span><br><span class="line"><span class="built_in">pwd</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./test.sh</span><br><span class="line">/home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>当然也可以用下面的命令来执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su - <span class="built_in">test</span> -c <span class="string">"pwd"</span></span><br><span class="line">/home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ su - <span class="built_in">test</span> -c <span class="string">"whoami"</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>ps:</p>
<p>切换用户只执行一条命令的可以用: su - oracle -c command</p>
<p>切换用户执行一个shell文件可以用:su - oracle -s /bin/bash shell.sh</p>
<p>好了,就这样吧.</p>
<blockquote>
<p>本文转自： <a href="https://www.jb51.net/article/59255.htm" target="_blank" rel="noopener">https://www.jb51.net/article/59255.htm</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>Git用法总结</title>
    <url>/2018/2018-2018-11-12-git-usage-summary/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>毫无疑问，Git是当下最流行、最好用的版本控制系统<br><a id="more"></a>  </p>
<h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><h2 id="先放一个链接"><a href="#先放一个链接" class="headerlink" title="先放一个链接"></a>先放一个链接</h2><p><a href="https://blog.csdn.net/h247263402/article/details/74849182" target="_blank" rel="noopener">https://blog.csdn.net/h247263402/article/details/74849182</a></p>
<h2 id="Commitizen"><a href="#Commitizen" class="headerlink" title="Commitizen"></a>Commitizen</h2><p><a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html</a></p>
<h1 id="非常用功能"><a href="#非常用功能" class="headerlink" title="非常用功能"></a>非常用功能</h1><h2 id="导出diff-的文件"><a href="#导出diff-的文件" class="headerlink" title="导出diff 的文件"></a>导出diff 的文件</h2><h3 id="哪些使用场景"><a href="#哪些使用场景" class="headerlink" title="哪些使用场景"></a>哪些使用场景</h3><ul>
<li>用php做了一个局域网的项目</li>
<li>没有外网，更新还要用u盘</li>
<li>需求在不断的改，改完就去跑去现场更新代码</li>
<li>开始是把整个项目拷下来，用rsync同步代码</li>
<li>直到一次不小心把config文件覆盖了<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3></li>
</ul>
<p>git的导出diff的文件</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/4541300/export-only-modified-and-added-files-with-folder-structure-in-git" target="_blank" rel="noopener">https://stackoverflow.com/questions/4541300/export-only-modified-and-added-files-with-folder-structure-in-git</a></p>
</blockquote>
<p>以下:</p>
<p>Below commands worked for me.</p>
<p>If you want difference of the files changed by the last commit:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive -o /path/to/file.zip HEAD $(git diff --name-only HEAD^)</span><br><span class="line"></span><br><span class="line"><span class="comment"># or use --diff-filter=ACMR to filter deleted files</span></span><br><span class="line"></span><br><span class="line">git archive -o /path/to/file.zip HEAD $(git diff --name-only --diff-filter=ACMR  HEAD^)</span><br></pre></td></tr></table></figure>
<p>or if you want difference between two specific commits:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git archive -o update.zip 4d50f1ee78bf3ab4dd8e66a1e230a64b62c49d42 $(git diff --name-only 07a698fa9e5af8d730a8c33e5b5e8eada5e0f400)</span><br></pre></td></tr></table></figure>
<p>or if you have uncommitted files, remember git way is to commit everything, branches are cheap:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git stash</span><br><span class="line">git checkout -b feature/new-feature</span><br><span class="line">git stash apply</span><br><span class="line">git add --all</span><br><span class="line">git commit -m <span class="string">'commit message here'</span></span><br><span class="line">git archive -o update.zip HEAD $(git diff --name-only HEAD^)</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>目前没有</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>jetbrains toolbox的安装</title>
    <url>/2018/2018-2018-11-12-jetbrains-toolbox-install/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>使用jetbrains的ide多年了，已经习惯了他家的操作习惯。日常使用包括phpstorm、datagrip、intellij idea。jetbrains toolbox的安装是很简单的，只是有时会出一些没见过的错，现把这些记录下来。<br><a id="more"></a>  </p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>去官网看看就行，本文略过。。。。。。</p>
<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="Qt-WebEngine报错"><a href="#Qt-WebEngine报错" class="headerlink" title="Qt WebEngine报错"></a>Qt WebEngine报错</h2><ul>
<li>系统<br>才安装好的 debain stretch，纯净无污染</li>
<li>出现原因<br>原因未明，用debian8的时候从来没有出现过，现在换了debian9，就出了这个错</li>
<li><p>报错信息（debain系统）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">WARNING:resource_bundle_qt.cpp(114)] locale_file_path.empty() <span class="keyword">for</span> locale</span><br><span class="line">Qt WebEngine ICU data not found at /home/hadege/dm/dm-Fotowelt/resources_qt/resources. Trying parent directory...</span><br><span class="line">Installed Qt WebEngine locales directory not found at location /home/hadege/dm/dm-Fotowelt/translations/qtwebengine_locales. Trying application directory...</span><br><span class="line">Qt WebEngine locales directory not found at location /home/hadege/dm/dm-Fotowelt/qtwebengine_locales. Trying fallback directory... Translations MAY NOT not be correct.</span><br><span class="line">Qt WebEngine resources not found at /home/hadege/dm/dm-Fotowelt/resources_qt/resources. Trying parent directory...</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install libqt5webenginecore5</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启计算机</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
      </tags>
  </entry>
  <entry>
    <title>debian9安装xmind8</title>
    <url>/2018/2018-2018-11-14-debian9-install-xmind/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>安装xmind<br><a id="more"></a>  </p>
<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://www.xmind.net/" target="_blank" rel="noopener">进入官网</a>下载<a href="http://dl2.xmind.cn/xmind-8-update8-linux.zip" target="_blank" rel="noopener">linux版</a></p>
<h1 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h1><p>进入自己的喜欢的文件夹 <strong>/path/to</strong>，然后解压<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip xmind-8-update8-linux.zip -d xmind8</span><br></pre></td></tr></table></figure></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/xmind8</span><br><span class="line"></span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure>
<h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入二进制文件目录</span></span><br><span class="line"><span class="built_in">cd</span> XMind_amd64/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">./XMind</span><br></pre></td></tr></table></figure>
<blockquote>
<p>后面还附了一个启动脚本</p>
</blockquote>
<h1 id="艰辛的运行过程"><a href="#艰辛的运行过程" class="headerlink" title="艰辛的运行过程"></a>艰辛的运行过程</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="无法在模块路径中找到主题引擎adwaita"><a href="#无法在模块路径中找到主题引擎adwaita" class="headerlink" title="无法在模块路径中找到主题引擎adwaita"></a>无法在模块路径中找到主题引擎adwaita</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install gnome-themes-standard</span><br></pre></td></tr></table></figure>
<h3 id="不能运行，直接报错"><a href="#不能运行，直接报错" class="headerlink" title="不能运行，直接报错"></a>不能运行，直接报错</h3><p>按一般情况下，运行一个软件无论你当前在哪里都无所谓</p>
<p>当前我在软件的根目录 <strong>/path/to/xmind8</strong> 于是我就在当前文件夹直接执行了以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">XMind_amd64/XMind</span><br></pre></td></tr></table></figure>
<p>于是报错了，查看日志 <strong>configuration</strong> 文件夹中的日志有以下报错信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!SESSION 2018-11-14 19:46:02.233 -----------------------------------------------</span><br><span class="line">eclipse.buildId=R3.7.8.201807240049</span><br><span class="line">java.version=1.8.0_181</span><br><span class="line">java.vendor=Oracle Corporation</span><br><span class="line">BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=zh_CN</span><br><span class="line">Framework arguments:  -eclipse.keyring @user.home/.xmind/secure_storage_linux</span><br><span class="line">Command-line arguments:  -os linux -ws gtk -arch x86_64 -data ../workspace -eclipse.keyring @user.home/.xmind/secure_storage_linux</span><br><span class="line"></span><br><span class="line">!ENTRY org.eclipse.osgi 4 0 2018-11-14 19:46:02.553</span><br><span class="line">!MESSAGE Application error</span><br><span class="line">!STACK 1</span><br><span class="line">java.lang.IllegalStateException: Unable to acquire application service. Ensure that the org.eclipse.core.runtime bundle is resolved and started (see config.ini).</span><br><span class="line">	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:78)</span><br><span class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:388)</span><br><span class="line">	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:243)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:673)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:610)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.run(Main.java:1519)</span><br><span class="line">	at org.eclipse.equinox.launcher.Main.main(Main.java:1492)</span><br></pre></td></tr></table></figure>
<h3 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h3><p>于是又google了半天没找到答案</p>
<p>然后一个不小心，点进了 <strong>XMind_amd64</strong> 文件夹</p>
<p>然后，wqnmlgb的。。。。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/xmind8/XMind_amd64</span><br><span class="line">./XMind</span><br></pre></td></tr></table></figure>
<h1 id="写个运行脚本"><a href="#写个运行脚本" class="headerlink" title="写个运行脚本"></a>写个运行脚本</h1><p>进入二进制文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /path/to/xmind8/XMind_amd64</span><br></pre></td></tr></table></figure>
<p>建一个脚本，命名为 <strong>run.sh</strong> ，脚本内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取脚本所在目录</span></span><br><span class="line">SHELL_FOLDER=$(dirname $(readlink -f <span class="string">"<span class="variable">$0</span>"</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$SHELL_FOLDER</span></span><br><span class="line">./XMind</span><br></pre></td></tr></table></figure>
<p>直接复制下列命令在命令行中键入即可，当然也可以自建一个文件夹然后修改里面的内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt; run.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 获取脚本所在目录</span></span><br><span class="line">SHELL_FOLDER=\$(dirname \$(readlink -f <span class="string">"\$0"</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> \<span class="variable">$SHELL_FOLDER</span></span><br><span class="line">./XMind</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>别忘了给执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod +x run.sh</span><br></pre></td></tr></table></figure>
<p>然后就可以在任何地方执行 <strong>run.sh</strong> 了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/path/to/run.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"></span><br><span class="line">sh /path/to/run.sh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>debian8升级到debian9后不能启动桌面</title>
    <url>/2018/2018-2018-11-14-debian9-xwindow-not-boot/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>一个不小心把debian8升级到了debian9，然后悲剧就开始了</p>
<a id="more"></a>  
<h1 id="瞎扯"><a href="#瞎扯" class="headerlink" title="瞎扯"></a>瞎扯</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>本来只是想安装一个软件，貌似是xmind。然后因为依赖的 opensdk 不能更新。查了一下，发觉可能是因为国内某源的原因，于是换国外的源。</p>
<h2 id="悲剧开始"><a href="#悲剧开始" class="headerlink" title="悲剧开始"></a>悲剧开始</h2><p>源的网址是从家里的debian9 拷过来了</p>
<p>拷的时候，忘了把 stretch 改成 jessie</p>
<p>然后怎个系统一起更新了</p>
<h1 id="出现问题"><a href="#出现问题" class="headerlink" title="出现问题"></a>出现问题</h1><h2 id="开机不自动进入桌面"><a href="#开机不自动进入桌面" class="headerlink" title="开机不自动进入桌面"></a>开机不自动进入桌面</h2><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><h2 id="进入桌面"><a href="#进入桌面" class="headerlink" title="进入桌面"></a>进入桌面</h2><h3 id="方案一，启用显示管理器"><a href="#方案一，启用显示管理器" class="headerlink" title="方案一，启用显示管理器"></a>方案一，启用显示管理器</h3><p>在下用的是 sddm，其它的还有kdm等，本文以sddm为例 </p>
<p>用 <strong>root</strong> 登录后输入以下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果命令行运行正确，则会进入登录界面</span></span><br><span class="line">systemctl start sddm</span><br></pre></td></tr></table></figure></p>
<h3 id="方案二，用普通用户登录"><a href="#方案二，用普通用户登录" class="headerlink" title="方案二，用普通用户登录"></a>方案二，用普通用户登录</h3><p>用普通用户登录后输入以下：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 如果命令行运行正确，则会进入登录界面</span></span><br><span class="line">startx</span><br></pre></td></tr></table></figure></p>
<h2 id="配置自启动"><a href="#配置自启动" class="headerlink" title="配置自启动"></a>配置自启动</h2><h3 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h3><p>虽然本次进入了桌面，但重启后还是不会自动启动</p>
<p>于是换照常理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> sddm</span><br></pre></td></tr></table></figure>
<p>结果，报错了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Synchronizing state of sddm.service with SysV service script with /lib/systemd/systemd-sysv-install.</span><br><span class="line">Executing: /lib/systemd/systemd-sysv-install enable sddm</span><br><span class="line">The unit files have no installation config (WantedBy, RequiredBy, Also, Alias</span><br><span class="line">settings in the [Install] section, and DefaultInstance for template units).</span><br><span class="line">This means they are not meant to be enabled using systemctl.</span><br><span class="line">Possible reasons for having this kind of units are:</span><br><span class="line">1) A unit may be statically enabled by being symlinked from another unit&apos;s</span><br><span class="line">   .wants/ or .requires/ directory.</span><br><span class="line">2) A unit&apos;s purpose may be to act as a helper for some other unit which has</span><br><span class="line">   a requirement dependency on it.</span><br><span class="line">3) A unit may be started when needed via activation (socket, path, timer,</span><br><span class="line">   D-Bus, udev, scripted systemctl call, ...).</span><br><span class="line">4) In case of template units, the unit is meant to be enabled with some</span><br><span class="line">   instance name specified.</span><br></pre></td></tr></table></figure>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>其实不知道最后怎么解决的，我记得输过以下命令</p>
<ol>
<li><p>test1</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">disable</span> sddm</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> sddm</span><br></pre></td></tr></table></figure>
</li>
<li><p>test2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo dpkg-reconfigure sddm</span><br></pre></td></tr></table></figure>
</li>
<li><p>test3</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> sddm -f</span><br></pre></td></tr></table></figure>
</li>
<li><p>test4</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-mark hold sddm</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>以上操作在以下链接中找到的</p>
<p><a href="https://forums.netrunner.com/showthread.php?tid=23477&amp;page=6" target="_blank" rel="noopener">https://forums.netrunner.com/showthread.php?tid=23477&amp;page=6</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓抓包webview</title>
    <url>/2018/2018-2018-11-23-android-webview-capture-package/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>要写一个某app的助手app，但没有接口，抓包看看是怎么运营的。但由于android6.0以的安全机制，导致<br>在运行webview的https流量抓不到，于是写一篇留做纪念<br><a id="more"></a>  </p>
<h1 id="先记下来"><a href="#先记下来" class="headerlink" title="先记下来"></a>先记下来</h1><p><a href="https://75team.com/post/webview-debug.html" target="_blank" rel="noopener">https://75team.com/post/webview-debug.html</a></p>
<p>事实证明，这不是我要找的。如果我没记错，他这是自己的app，而我要的抓别人app的包</p>
<p>未完待续</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>csharp软件打印和预览</title>
    <url>/2018/2018-2018-11-27-csharp-print-and-view/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>c#写个打印功能，最烦写前端了<br><a id="more"></a>  </p>
<h1 id="面向百度编程"><a href="#面向百度编程" class="headerlink" title="面向百度编程"></a>面向百度编程</h1><p>找到的</p>
<p><a href="https://blog.csdn.net/a497785609/article/details/71190960#" target="_blank" rel="noopener">https://blog.csdn.net/a497785609/article/details/71190960#</a></p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="先搞预览"><a href="#先搞预览" class="headerlink" title="先搞预览"></a>先搞预览</h2><blockquote>
<p>因为纸要钱</p>
</blockquote>
<h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><p>未完待续</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>ssh隧道</title>
    <url>/2018/2018-2018-11-29-ssh-channel/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>孤陋寡闻了，经常会用到的ssh。SSH是一种安全的传输协议，用在连接服务器上比较多。<br>平时，还会用到他的隧道转发功能，类似代理。<br>现在猛然发下，居然还能用于内网穿透，于是乎记录一下</p>
<a id="more"></a>  
<h1 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh user@host [-p xxx]</span><br></pre></td></tr></table></figure>
<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p><strong>ssh -C -f -N -g -R listen_port:DST_Host:DST_port user@Tunnel_Host</strong> </p>
<h1 id="隧道转发"><a href="#隧道转发" class="headerlink" title="隧道转发"></a>隧道转发</h1><p><strong>ssh -C -f -N -g -L listen_port:DST_Host:DST_port user@Tunnel_Host</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比如我常用的转发mysql。我一般不用参数f，比较方便，不用的时候ctrl+c 就关了</span></span><br><span class="line">autossh -N -o <span class="string">"ServerAliveInterval=60"</span> -o <span class="string">"PubkeyAuthentication=yes"</span> -o <span class="string">"ServerAliveCountMax 3"</span> -o <span class="string">"PasswordAuthentication=no"</span> -L 0.0.0.0:3306:127.0.0.1:3306 server_user@server_host -p server_port</span><br></pre></td></tr></table></figure>
<h1 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h1><blockquote>
<p>参见man. </p>
</blockquote>
<ul>
<li><p>-f<br>  要求 ssh 在执行命令前退至后台. 它用于当 ssh 准备询问口令或密语, 但是用户希望它在后台进行. 该选项隐含了 -n 选项. 在远端机器上启动 X11 程序的推荐手法就是类似于 ssh -f host xterm 的命令.</p>
</li>
<li><p>-C<br>  要求进行数据压缩 (包括 stdin, stdout, stderr 以及转发 X11 和 TCP/IP 连接 的数据).<br>  压缩算法和 gzip(1) 的一样, 协议第一版中, 压缩级别 “level” 用 CompressionLevel 选项控制.<br>  压缩技术在 modem 线路或其他慢速连接上很有用, 但是在高速网络上反而 可能降低速度.<br>  可以在配置文件中对每个主机单独设定这个参数. 另见 Compression 选项.</p>
</li>
<li><p>-g<br>  允许远端主机连接本地转发的端口. 注：这个参数我在实践中似乎始终不起作用。</p>
</li>
</ul>
<p>-o option<br>    可以在这里给出某些选项, 格式和配置文件中的格式一样.  它用来设置那些没有命令行开关的选项.</p>
<ul>
<li><p>-N<br>  不执行远程命令. 用于转发端口. (仅限协议第二版)</p>
</li>
<li><p>-L<br>  port:host:hostport 将本地机(客户机)的某个端口转发到远端指定机器的指定端口.<br>  工作原理是这样的, 本地机器上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接,<br>  该连接就经过安全通道转发出去, 同时远程主机和 host 的 hostport 端口建立连接.<br>  可以在配置文件中指定端口的转发. 只有 root 才能转发特权端口.  IPv6 地址用另一种格式说明: port/host/hostport</p>
</li>
</ul>
<ul>
<li>-R<br>  port:host:hostport 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口.<br>  工作原理是这样的, 远程主机上分配了一个 socket 侦听 port 端口, 一旦这个端口上有了连接,<br>  该连接就经过安全通道转向出去, 同时本地主机和 host 的hostport 端口建立连接.<br>  可以在配置文件中指定端口的转发. 只有用 root 登录远程主机 才能转发特权端口.<br>  IPv6 地址用另一种格式说明: port/host/hostport</li>
</ul>
<h1 id="autossh"><a href="#autossh" class="headerlink" title="autossh"></a>autossh</h1><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><blockquote>
<p><a href="https://blog.csdn.net/zhaoyangkl2000/article/details/77961356" target="_blank" rel="noopener">https://blog.csdn.net/zhaoyangkl2000/article/details/77961356</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/zhaoyangkl2000/article/details/77961356" target="_blank" rel="noopener">https://blog.csdn.net/zhaoyangkl2000/article/details/77961356</a></p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>php-cli模式下使用apcu的问题</title>
    <url>/2018/2018-2018-12-11-php-cli-apc/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>平时都是web模式下使用apc,最近在cli模式（swoole）下使用apcu的时候出现了问题。比如：设置了ttl，但不过期</p>
<a id="more"></a>  
<h1 id="apc和apcu"><a href="#apc和apcu" class="headerlink" title="apc和apcu"></a>apc和apcu</h1><h2 id="apc"><a href="#apc" class="headerlink" title="apc"></a>apc</h2><blockquote>
<p>The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code.</p>
</blockquote>
<p>apc的功能分为两部分</p>
<ol>
<li>opcode缓存。貌似在php5.5之后，apc的某版本有内存问题，就被官方废弃了 </li>
<li>数据缓存，可以存储k/v对，类似memcache</li>
</ol>
<h2 id="apcu"><a href="#apcu" class="headerlink" title="apcu"></a>apcu</h2><p>可以认为是apc去掉opcode的阉割版，仅保留了数据缓存功能。php api接口完全和apc相同</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>不多说了，网上一大堆。</p>
<p>在debian 下,一句代码的事情</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install php5-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.0-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.1-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.2-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.3-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.4-apcu</span><br><span class="line"></span><br><span class="line">apt-get install php7.7-apcu</span><br></pre></td></tr></table></figure>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apc.enabled= on</span><br><span class="line">apc.shm_size= 64M</span><br><span class="line">apc.enable_cli = on</span><br><span class="line">apc.use_request_time = 0</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h1 id="坑在哪儿"><a href="#坑在哪儿" class="headerlink" title="坑在哪儿"></a>坑在哪儿</h1><h2 id="cli下不过期的问题"><a href="#cli下不过期的问题" class="headerlink" title="cli下不过期的问题"></a>cli下不过期的问题</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">apcu_add(<span class="string">'foo'</span>,<span class="string">'bar'</span>,<span class="number">5</span>);</span><br><span class="line">sleep(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">echo</span> apcu_fetch(<span class="string">'foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment"># the result is bar</span></span><br></pre></td></tr></table></figure>
<p>查了一下，是 <strong>use_request_time</strong> 的问题</p>
<blockquote>
<p><a href="http://php.net/manual/zh/apcu.configuration.php#ini.apcu.use-request-time" target="_blank" rel="noopener">http://php.net/manual/zh/apcu.configuration.php#ini.apcu.use-request-time</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在配置文件中改为0就行了</span></span><br><span class="line">apc.use_request_time = 0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>在flutter里踩过的坑</title>
    <url>/2019/2019-05-15-the-pit-with-flutter/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>电脑没电了，先写个摘要<br><a id="more"></a></p>
<h1 id="flutter"><a href="#flutter" class="headerlink" title="flutter"></a>flutter</h1><p>好用</p>
<p>但没怎么用</p>
<p>好坑</p>
<h1 id="坑s"><a href="#坑s" class="headerlink" title="坑s"></a>坑s</h1><p>先记一下有哪些坑</p>
<h2 id="开发模式下和发布模式下，获取宽度的时机不一样"><a href="#开发模式下和发布模式下，获取宽度的时机不一样" class="headerlink" title="开发模式下和发布模式下，获取宽度的时机不一样"></a>开发模式下和发布模式下，获取宽度的时机不一样</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter run</span><br><span class="line"></span><br><span class="line">flutter run --profile</span><br><span class="line"></span><br><span class="line">flutter run --release</span><br></pre></td></tr></table></figure>
<h2 id="在有provide-builder-的情况，有时会重新build"><a href="#在有provide-builder-的情况，有时会重新build" class="headerlink" title="在有provide builder 的情况，有时会重新build"></a>在有provide builder 的情况，有时会重新build</h2><h2 id="int和double"><a href="#int和double" class="headerlink" title="int和double"></a>int和double</h2><p><code>Unhandled Exception: type &#39;int&#39; is not a subtype of type &#39;double&#39;</code></p>
<p>不会自动转换，要注意一下。后面看看有没有好的解决方案</p>
<p>再写。。。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>flutter</tag>
        <tag>language</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx的一些配置整理一下</title>
    <url>/2019/2019-05-23-nginx-option/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>nginx的一些配置整理一下<br><a id="more"></a>  </p>
<h1 id="有些啥呢"><a href="#有些啥呢" class="headerlink" title="有些啥呢"></a>有些啥呢</h1><p>不知道 </p>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><p>给几个实例</p>
<h2 id="进程数及绑定cpu核心"><a href="#进程数及绑定cpu核心" class="headerlink" title="进程数及绑定cpu核心"></a>进程数及绑定cpu核心</h2><p>worker_processes： 工作进程数量，一般设为cpu核心的倍数<br>worker_cpu_affinity： （进程cpu核心亲和力。。。）进程与cpu核心绑定</p>
<h3 id="进程数"><a href="#进程数" class="headerlink" title="进程数"></a>进程数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes：4</span><br></pre></td></tr></table></figure>
<h3 id="亲和力的值说明worker-cpu-affinity："><a href="#亲和力的值说明worker-cpu-affinity：" class="headerlink" title="亲和力的值说明worker_cpu_affinity："></a>亲和力的值说明worker_cpu_affinity：</h3><p>说白了，就是 进程与cpu核心多对多</p>
<p>cpu核心用二进制字符串表示</p>
<p>cpu核数用字符串的长度表示，如4核：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0001</span><br><span class="line">0101</span><br><span class="line">1100</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p>
<p>字符串中，1表示开启，0表示关闭<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开启第一个核</span><br><span class="line">0001</span><br><span class="line"></span><br><span class="line"># 开启第一个和第三个核</span><br><span class="line">0101</span><br><span class="line"></span><br><span class="line"># 开启第三个和第四个核</span><br><span class="line">1100</span><br></pre></td></tr></table></figure></p>
<p>worker_cpu_affinity进程数，用多个cpu核心表示<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0001 0010 0100 1000</span><br></pre></td></tr></table></figure></p>
<h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><h4 id="双核2进程"><a href="#双核2进程" class="headerlink" title="双核2进程"></a>双核2进程</h4><p>每个核绑一个进程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 01 10;</span><br></pre></td></tr></table></figure></p>
<p>2个进程都绑在第一个核心上，一般不推荐吧，这种后面就不举例了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 01 01;</span><br></pre></td></tr></table></figure></p>
<h4 id="双核4进程"><a href="#双核4进程" class="headerlink" title="双核4进程"></a>双核4进程</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  4;</span><br><span class="line">worker_cpu_affinity 01 10 01 10;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  4;</span><br><span class="line">worker_cpu_affinity 10 01 01 10;</span><br></pre></td></tr></table></figure>
<h4 id="四核2进程"><a href="#四核2进程" class="headerlink" title="四核2进程"></a>四核2进程</h4><p>第一个进程绑第一核，第二个进程 绑第四核<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 0001 1000;</span><br></pre></td></tr></table></figure></p>
<p>第一个进程绑第一三核，第二个进程绑第二四核<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">worker_processes  2;</span><br><span class="line">worker_cpu_affinity 0101 1010;</span><br></pre></td></tr></table></figure></p>
<h2 id="去除版本号"><a href="#去除版本号" class="headerlink" title="去除版本号"></a>去除版本号</h2><h1 id="certbot"><a href="#certbot" class="headerlink" title="certbot"></a>certbot</h1><p>获取let’s encrypt 证书的工具，官方推荐 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a></p>
<blockquote>
<p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a></p>
</blockquote>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>以debian9 nginx为例</p>
<blockquote>
<p><a href="https://certbot.eff.org/lets-encrypt/debianstretch-nginx" target="_blank" rel="noopener">https://certbot.eff.org/lets-encrypt/debianstretch-nginx</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">sudo apt-get install certbot python-certbot-nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成装配置证书（需要公网ip，并且nginx已配置好了80端口）</span></span><br><span class="line">sudo certbot --nginx</span><br></pre></td></tr></table></figure>
<h2 id="更新email"><a href="#更新email" class="headerlink" title="更新email"></a>更新email</h2><p>如果需要更新certbot 配置下的email，则调入以下命令（貌似有邮件提醒功能）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">certbot register --update-registration --e</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>ffmpeg使用</title>
    <url>/2019/2019-07-05-use-ffmpeg/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>ffmpeg是一个非常强大的视频处理程序，以后还会用得更多，现在开始记录<br><a id="more"></a>  </p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://wiki.debian.org/ffmpeg#Installation" target="_blank" rel="noopener">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt-get install libav-tools </span><br><span class="line"></span><br><span class="line">apt-get install ffmpeg</span><br></pre></td></tr></table></figure>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="下载m3u8"><a href="#下载m3u8" class="headerlink" title="下载m3u8"></a>下载m3u8</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i <span class="string">"http://host/folder/file.m3u8"</span> -bsf:a aac_adtstoasc -vcodec copy -c copy -crf 50 file.mp4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次npm的发布</title>
    <url>/2019/2019-07-20-log-a-publish-in-npm/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>开发这么多年了，重来没有发布过一款npm的包，今天试了一下</p>
<a id="more"></a>  
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="假如已有一个要发布的包，并在项目的根文件夹里"><a href="#假如已有一个要发布的包，并在项目的根文件夹里" class="headerlink" title="假如已有一个要发布的包，并在项目的根文件夹里"></a>假如已有一个要发布的包，并在项目的根文件夹里</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line"><span class="comment"># 然后填入相关的信息</span></span><br></pre></td></tr></table></figure>
<h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure>
<p>如果该电脑上面没有 npm login 过则要先 adduser，貌似是这样</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm adduser</span><br></pre></td></tr></table></figure>
<h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure>
<h1 id="上travis自动发布"><a href="#上travis自动发布" class="headerlink" title="上travis自动发布"></a>上travis自动发布</h1><p>先转一个，后面稳定了，就上travis</p>
<blockquote>
<p><a href="https://blog.csdn.net/lym152898/article/details/81868524" target="_blank" rel="noopener">https://blog.csdn.net/lym152898/article/details/81868524</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs源码加密或混淆</title>
    <url>/2019/2019-09-26-node-source-code-compile/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>nodejs怎么保护源码呢，不知道目前的方法貌似只有用c++写扩展靠谱点，不过简单的混淆一下也不是不行</p>
<a id="more"></a>  
<p>暂时没有用，先记录一下</p>
<blockquote>
<p><a href="https://www.cnblogs.com/flyhigh1860/p/3820820.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">https://www.cnblogs.com/flyhigh1860/p/3820820.html?utm_source=tuicool&amp;utm_medium=referral</a></p>
</blockquote>
<blockquote>
<p><a href="https://cnodejs.org/topic/55728eb0c4e7fbea6e9a2f08" target="_blank" rel="noopener">https://cnodejs.org/topic/55728eb0c4e7fbea6e9a2f08</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>【转】pm2 设置自动启动服务（Windows系统）</title>
    <url>/2019/2019-09-26-pm2-auto-boot-in-windows/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>abstract of this post<br><a id="more"></a><br>content of this post</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/01558ce6fd82" target="_blank" rel="noopener">https://www.jianshu.com/p/01558ce6fd82</a></p>
</blockquote>
<p>回头再写</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>删除桌面右键菜单“使用Visual Studio打开”</title>
    <url>/2021/2019-10-12-vs-desktop-menu/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>visual studio 会在桌面生成一个菜单“使用Visual Studio打开”，有时一个不小心就是点到了。而且没啥用……帮删之<br><a id="more"></a>  </p>
<h1 id="用注册表删"><a href="#用注册表删" class="headerlink" title="用注册表删"></a>用注册表删</h1><p>本文以<code>vs2019</code> 亲测，其它版本请自行测试</p>
<h1 id="用注册表删-1"><a href="#用注册表删-1" class="headerlink" title="用注册表删"></a>用注册表删</h1><p>桌面新建文本文件，编辑之，并拷入以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[-HKEY_CLASSES_ROOT\Directory\Background\shell\AnyCode]</span><br><span class="line"></span><br><span class="line">[-HKEY_CLASSES_ROOT\Directory\shell\AnyCode]</span><br></pre></td></tr></table></figure>
<p>关闭、保存。</p>
<p>修改文件名扩展名，<code>txt</code>改为<code>reg</code></p>
<p>双击，会提示一长串权限文字，点确定</p>
<p>done!!!!</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>other</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>学习一下kaniko</title>
    <url>/2019/2019-11-09-kaniko-learn/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>学习一下kaniko</p>
<a id="more"></a>  
<h1 id="kaniko是什么"><a href="#kaniko是什么" class="headerlink" title="kaniko是什么"></a>kaniko是什么</h1><p>首先，他是一个docker镜像，源代码在 <a href="https://github.com/GoogleContainerTools/kaniko" target="_blank" rel="noopener">github</a></p>
<p>镜像地址在这里</p>
<blockquote>
<p>gcr.io/kaniko-project/executor</p>
</blockquote>
<p>与通常的docker镜像比，他主要用于打包和推送docker镜像。。。。。。 什么意思呢，大概就是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker build xxxxxx</span><br><span class="line"></span><br><span class="line">docker push xxxxxx</span><br></pre></td></tr></table></figure>
<p>当然，与传统的bash命令的用法还是有一些不一样的</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>好吧，我还基本不怎么会，只会抄了官方的例子</p>
<blockquote>
<p>以下，抄自gitlab</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"&#123;\"auths\":&#123;\"<span class="variable">$CI_REGISTRY</span>\":&#123;\"username\":\"<span class="variable">$CI_REGISTRY_USER</span>\",\"password\":\"<span class="variable">$CI_REGISTRY_PASSWORD</span>\"&#125;&#125;&#125;"</span> &gt; /kaniko/.docker/config.json</span><br><span class="line"></span><br><span class="line">/kaniko/executor --context <span class="variable">$CI_PROJECT_DIR</span> --dockerfile <span class="variable">$CI_PROJECT_DIR</span>/Dockerfile --destination <span class="variable">$CI_REGISTRY_IMAGE</span>:<span class="variable">$CI_COMMIT_TAG</span></span><br></pre></td></tr></table></figure>
<p>意思也很简单：</p>
<p>第一句将gitlab的镜像仓库授权文件写入指定位置 <code>/kaniko/.docker/config.json</code></p>
<p>第二句，执行。。。</p>
<p>几个参数也很熟悉</p>
<p>context 上下文，一般就是项目根目录，所以docker-compose.yml中，一般写 <code>.</code></p>
<p>dockerfile 这个就不说了</p>
<p>destination 仓库地址</p>
<p>连就来就是，build Dockerfile 并 push 到 指定地址</p>
<h1 id="问题来了"><a href="#问题来了" class="headerlink" title="问题来了"></a>问题来了</h1><h2 id="destination能不能多个地址"><a href="#destination能不能多个地址" class="headerlink" title="destination能不能多个地址"></a>destination能不能多个地址</h2><p>查了一下资料，貌似不可以</p>
<h2 id="能不能将已有的远程仓库pull下来，然后push-到另一个仓库达到同步的效果"><a href="#能不能将已有的远程仓库pull下来，然后push-到另一个仓库达到同步的效果" class="headerlink" title="能不能将已有的远程仓库pull下来，然后push 到另一个仓库达到同步的效果"></a>能不能将已有的远程仓库pull下来，然后push 到另一个仓库达到同步的效果</h2><p>这个问题还没有查</p>
<h1 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h1><p>目前，只是会最简单的用用，还有很多地方需要学习</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>gitlab-ci</tag>
      </tags>
  </entry>
  <entry>
    <title>nodejs从用es6/7/8写项目到发布</title>
    <url>/2019/2019-11-29-node-babel-es6-7-8/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>本来用传统js写得好好的，然后几个月前开始用ES6陆陆续续写了几个小的东西，其实写的时候也还挺顺的。开发时运行起也是好好的，然后准备发布了。。。</p>
<a id="more"></a>  
<h1 id="哈哈"><a href="#哈哈" class="headerlink" title="哈哈"></a>哈哈</h1><p>晚了，还要带娃，先写个大概，后面来补</p>
<h1 id="要写的东西先整理一下"><a href="#要写的东西先整理一下" class="headerlink" title="要写的东西先整理一下"></a>要写的东西先整理一下</h1><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>babel-* 那一堆东西</p>
<p>然后 babel-那一堆现在不维护了，要改成 @babel/xxx</p>
<h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>转代码，es6 转 es5，开发的时候，用babel-node 运行，生产环境，应该先转代码为ES5。<br>官方说法</p>
<blockquote>
<p>Not meant for production use<br>You should not be using babel-node in production. It is unnecessarily heavy, with high memory usage due to the cache being stored in memory. You will also always experience a startup performance penalty as the entire app needs to be compiled on the fly.</p>
</blockquote>
<blockquote>
<p>Check out the example Node.js server with Babel for an idea of how to use Babel in a production deployment.</p>
</blockquote>
<blockquote>
<p>ES6-style module-loading may not function as expected<br>Due to technical limitations ES6-style module-loading is not fully supported in a babel-node REPL.</p>
</blockquote>
<h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>转代码貌似只转 <code>.js</code> 文件，其它文件要手动copy ? 有没有相关参数</p>
<h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>踩坑的后续，后面直接上es8/9了，es7就跳过了</p>
<h2 id="5"><a href="#5" class="headerlink" title="5"></a>5</h2><p>本来 node 里写es5语法，就能直接支持 async/await 的，用es6后，反而不行了，报错<br><code>regeneratorRuntime is not defined</code> ，用 npm install regenerator 貌似能解决<br>依赖  <code>babel-runtime</code> 貌似也包含了相关的库</p>
<p>相关的链接 </p>
<blockquote>
<p><a href="https://babeljs.io/docs/en/6.26.3/babel-plugin-transform-runtime" target="_blank" rel="noopener">https://babeljs.io/docs/en/6.26.3/babel-plugin-transform-runtime</a></p>
</blockquote>
<blockquote>
<p><a href="https://babeljs.io/docs/en/babel-node#not-meant-for-production-use" target="_blank" rel="noopener">https://babeljs.io/docs/en/babel-node#not-meant-for-production-use</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试一下code-server</title>
    <url>/2019/12-20-p-vscode-code-server-test/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>以前一直在想，要是能在专门弄一台服务器用来编程就爽了。<br>找了很久，一般就vim加各种插件或者用同步的方式使远程和本地代码一样。<br>如今vscode有几个解决方案了，决定尝试一波code-server。</p>
<a id="more"></a>  
<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><p>一般人应该都认识了吧，就不多说了</p>
<h1 id="目前vscode的远程解决方案"><a href="#目前vscode的远程解决方案" class="headerlink" title="目前vscode的远程解决方案"></a>目前vscode的远程解决方案</h1><h2 id="vscode-remote"><a href="#vscode-remote" class="headerlink" title="vscode remote"></a>vscode remote</h2><p>了解一下，后面补</p>
<h2 id="visual-studio-online"><a href="#visual-studio-online" class="headerlink" title="visual studio online"></a>visual studio online</h2><p>了解一下，后面补</p>
<p>主要是由azure提供云服务，要钱，还有点贵。</p>
<blockquote>
<p><a href="https://azure.microsoft.com/zh-cn/pricing/details/visual-studio-online/" target="_blank" rel="noopener">https://azure.microsoft.com/zh-cn/pricing/details/visual-studio-online/</a></p>
</blockquote>
<p>也可以自托管</p>
<blockquote>
<p><a href="https://docs.microsoft.com/en-us/visualstudio/online/how-to/vscode#self-hosted" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/visualstudio/online/how-to/vscode#self-hosted</a></p>
</blockquote>
<h2 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h2><blockquote>
<p>本文章就是第一次使用code-server写的</p>
</blockquote>
<p>非vscode官方出品的一款远程ide。</p>
<p><a href="https://github.com/cdr/code-server" target="_blank" rel="noopener">gayhub</a></p>
<p>需要自己用服务器搭建</p>
<p>搭建完成后，就可以在任意有网络的地方用浏览器敲代码了（不知有没有限制浏览器）</p>
<h1 id="code-server使用"><a href="#code-server使用" class="headerlink" title="code-server使用"></a>code-server使用</h1><h2 id="安装及启动"><a href="#安装及启动" class="headerlink" title="安装及启动"></a>安装及启动</h2><p>参见 <a href="https://github.com/cdr/code-server" target="_blank" rel="noopener">gayhub</a></p>
<p>本屌选择的二进制安装</p>
<ol start="0">
<li>简单，一句代码就启动</li>
<li>本屌有洁癖，自从使用docker以来，开发环境都转移到一个个容器中去了</li>
<li><p>本屌喜欢用命令行终端</p>
<p> 像git这类，以及运行代码等都是直接使用命令行</p>
<p> 综合1和2，方便在vscode的终端中直接进入宿主而非容器中</p>
<p> 如果用容器安装，打开终端时就直接进入容器了</p>
</li>
<li><p>这样的话，要考虑安全性</p>
<ul>
<li>运行code-server的用户权限不能高</li>
<li>禁止该用户<code>su root</code>，能敲代码能运行就行了</li>
<li>项目只涉及到数据库的用户信息，也不应该有高权限，就给一般的crud。千万别暴露生产环境的敏感信息</li>
</ul>
</li>
</ol>
<p>综上就以下几句命令就装好了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line"><span class="comment"># wget xxx( 在这里找 [releases](https://github.com/cdr/code-server/releases) )</span></span><br><span class="line">wget https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -zxvf xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># cd</span></span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行(免密))</span></span><br><span class="line"><span class="comment"># --auth none 是不用登录的意思，我目前装把code-server 装在本地，所以这么搞。放线上肯定要登录的</span></span><br><span class="line">./code-server --auth none</span><br></pre></td></tr></table></figure>
<p>看看有哪些指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./code-server --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<img src="/2019/12-20-p-vscode-code-server-test/help.png">
<p>常用的：<br>–auth<br>–port<br>–host<br>–cert<br>–cert-key</p>
<p>所以，正常情况下，放在远程服务器上的命令为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PASSWORD=xxxxxx</span><br><span class="line">./code-server --auth password [--port xxx --cert xxx --cert-key xxx]</span><br></pre></td></tr></table></figure>
<h2 id="codiing"><a href="#codiing" class="headerlink" title="codiing"></a>codiing</h2><ol start="0">
<li><p>连上code-server</p>
<p> 打开chrome，localhost:8080，就看到了我们熟悉的画面</p>
</li>
<li><p>装扩展</p>
<p> 我这边默认情况下，连不上marketplace，科学上一下网就行了</p>
<p> 我装了个 jetbrains ide keymap</p>
</li>
<li><p>打开项目目录</p>
<p> 点explorer里的open filder，然后找到项目目录就行了</p>
</li>
<li><p>愉快的coding</p>
<p> 默认自动保存的修改的代码</p>
</li>
</ol>
<h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><p>我习惯了docker运行，一般的项目下都带了个docker-compose.yml</p>
<p>然后，宿主机肯定是装了docker和docker-compose的</p>
<p>所以，在浏览器的vscode上打开终端，然后 <code>docker-compose up</code> 就运行起来了</p>
<h2 id="作为服务启动"><a href="#作为服务启动" class="headerlink" title="作为服务启动"></a>作为服务启动</h2><blockquote>
<p>一般用systemd管理服务，本屌一般用debian</p>
</blockquote>
<p>在 /etc/systemd/system/ 目录新增一个service文件，比如名为（code-server.service），录入以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=code-server</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作目录，也就是code-server的目录，可以不要。如果不要，则ExecStrt中的code-server就要写完全路径</span></span><br><span class="line">WorkingDirectory=/path/to</span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量，将PASSWORD= 后面改为自己的</span></span><br><span class="line">Environment=<span class="string">"PASSWORD=thisispassword"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 装/path/to 改为你的code-server的完整路径，后面的参数根据自己的需要添加</span></span><br><span class="line"><span class="comment"># ExecStart=./code-server --auth password [--port xxx --cert xxx --cert-key xxx [other args]]</span></span><br><span class="line"><span class="comment"># 这一句与注释中那一句的区别就是，多作了一步加载用户的环境变量，（这里不要选.bashrc，了解了一下，.bashrc一般管交互）</span></span><br><span class="line">ExecStart=/bin/bash --login -c <span class="string">'source ~/.bash_profile &amp;&amp; ./code-server --auth password [--port xxx --cert xxx --cert-key xxx [other args]]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户，由谁运行，不加这行会以root运行，很危险的</span></span><br><span class="line">User=debian</span><br><span class="line">Type=simple</span><br><span class="line">LimitNOFILE=65535</span><br><span class="line">Restart=always</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target graphical.target</span><br></pre></td></tr></table></figure>
<p>修改好了 <code>code-server.service</code> 文件以后，执行以下命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动code-server</span></span><br><span class="line">systemctl start code-server.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭code-server</span></span><br><span class="line">systemctl stop code-server.service</span><br><span class="line"></span><br><span class="line"><span class="comment"># 随系统启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> code-server.service</span><br></pre></td></tr></table></figure>
<p>ok，完工</p>
<h2 id="与平常的不同"><a href="#与平常的不同" class="headerlink" title="与平常的不同"></a>与平常的不同</h2><ol start="0">
<li><p>一份代码多处运行？？？</p>
<p> no，以前就是到处写代码到处运行，每次换电脑就要装一次ide。<br> 在没用dokcer之前，还要装一次运行环境</p>
<p> 即使有了dokcer，也要把docker安装上，国内这速度。。。</p>
<p> 现在，只要装个chrome，理论上就可以敲代码了和运行程序了</p>
<p> 不管人在哪里，代码都在同一个地方，运行环境也只在同一个地方</p>
</li>
<li><p>数据库的同步问题也解决了</p>
<p> 因为公司穷，没有公网的开发用的数据库，数据库都在自己的电脑上。<br> 然后数据改了后，就要到处同步结构</p>
<p> 现在，这个问题就不用考虑了，爽</p>
</li>
<li><p>习惯在linux上开发和运行程序的问题</p>
<p> 因为大多时候，我们开发的程序都是在linux上运行，几年来，已经习惯了在linux上做开发</p>
<p> 有时，会有winform做客户端的需求，这时切换到win上面去，真是完全适应不了了后端的开发</p>
<ol start="0">
<li><p>拿php有些功能不能在win上面跑</p>
</li>
<li><p>win下的docker超难用</p>
</li>
<li><p>powershell 和 shell 差得也不是一点半点</p>
<p>现在解决了开发和运行问题后，那么切到win上面去做其它的，应该也会变得简单</p>
</li>
</ol>
</li>
</ol>
<ol start="3">
<li><p>网络延迟问题目前还没测</p>
<p> 因为目前，code-server也架设在本地，不知放在公司时，延迟大不大。这个后面再说</p>
</li>
</ol>
<ol start="4">
<li><p>浏览器快捷键问题</p>
<p> 除了已发现的<code>ctrl+ v</code>的问题，可能还有其它的快捷键和浏览器冲突。</p>
<p> 只是目前没有深度使用，还没有发现</p>
<p> 据说可以通过打包成<code>chrome app</code>来解决，这个后面再尝试一下</p>
</li>
</ol>
<h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><ul>
<li><p>最大的坑，<code>ctrl+v</code> 不能用</p>
<p>  这就很尴尬了，没这个组合键，还怎么敏捷开发呢。得找一下原因，不知是否某扩展所致</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">command &apos;editor.action.clipboardPasteAction&apos; not found</span><br></pre></td></tr></table></figure>
<blockquote>
<p>刚刚做了测试，把jetbrains ide keymap (0.1.8) 插件禁用了后，就能正常使用了。</p>
</blockquote>
<blockquote>
<p>应该是浏览器上editor.action.clipboardPasteAction不支持</p>
</blockquote>
<p>  解决办法：</p>
<p>  ctrl + shift + p</p>
<p>  搜 “keyboard shortcuts”</p>
  <img src="/2019/12-20-p-vscode-code-server-test/keyboard.png">
<p>  点 open key boart shortcuts</p>
<p>  在 keyboard shortcuts 里再搜 “ctrl + v”</p>
<p>  找到 command里为 “editor.action.clipboardPasteAction”</p>
<p>  点击右键，remove keybinding</p>
<p>  解决666</p>
</li>
<li><p>安装扩展要科学上网</p>
<p>  反正我没科学上网的时候，半天加载不出来扩展列表</p>
</li>
<li><p>单个实例不能多用户使用</p>
<p>  目前，单个实例只能一个用户使用</p>
<p>  如果团队使用的话，可以考虑由不同用户运行多个实例，监听不同端口</p>
<p>  不过一个实例几百m，很吃内存，希望能解决这个问题吧</p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>ide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>第n次尝试vscode</title>
    <url>/2019/2019-12-24-vscode-test-n/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>前面多次尝试这两年很火的vscode，不过都以失败告终，毕竟jetbrains旗下的ide太好用了。<br>好用归好用，但是正版的费用确实有点太那个啥了，有免费的正版用难道不香吗！</p>
<a id="more"></a>  
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ol>
<li><p>今天，2019-12-24，大范围使用jetbrains旗下ide的，版本号2019+，用非正常手段注册的都被提示盗版而不能使用了</p>
</li>
<li><p>vscode有code-server等远程解决方案，如我前面写的 <a href="/2019/12-20-p-vscode-code-server-test/" title="尝试一下code-server">尝试一下code-server</a></p>
</li>
<li><p>希望这次能成功的转过去</p>
</li>
</ol>
<h1 id="开始踩坑吧"><a href="#开始踩坑吧" class="headerlink" title="开始踩坑吧"></a>开始踩坑吧</h1><p>踩坑ing</p>
<h2 id="jb的ctrl-shift-enter在vscode用什么替代"><a href="#jb的ctrl-shift-enter在vscode用什么替代" class="headerlink" title="jb的ctrl+shift+enter在vscode用什么替代"></a>jb的ctrl+shift+enter在vscode用什么替代</h2><p>googling ing ing</p>
<h2 id="vscode的工作区问题workspace"><a href="#vscode的工作区问题workspace" class="headerlink" title="vscode的工作区问题workspace"></a>vscode的工作区问题workspace</h2><h3 id="该怎么配置"><a href="#该怎么配置" class="headerlink" title="该怎么配置"></a>该怎么配置</h3><ol>
<li><p>一个工作区配多个项目</p>
<p> 显然是不科学的</p>
<p> 不过记得Eclipse和netbeans好像就是这样的，同时打开多个项目，不知道是否是健忘了。但现在习惯了只开一个项目，还怕不小心改了其它项目</p>
</li>
<li><p>每个项目配一个工作区</p>
<p> 然后不用的插件呢，手动禁用？这很麻烦，每一个新项目都要禁用一次不用的插件</p>
<p> 毕竟我们公司每天要新建150个项目</p>
</li>
<li><p>有人说插件是惰性加载的</p>
<p> 那么按意思是说不会因为不用的插件浪费内存</p>
<p> 这，我感觉不是这样的，因为，内存由几百m到现在已经上g了，反正是越来越大了</p>
</li>
<li><p>还有其它方式没</p>
<p> 不知道 666</p>
</li>
</ol>
<h1 id="最后说点啥"><a href="#最后说点啥" class="headerlink" title="最后说点啥"></a>最后说点啥</h1><p>vscode太tm烦了</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>ide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>一个完整的远程开发环境</title>
    <url>/2020/2020-01-15-full-remote-develop/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>酝酿了好久，终于也算是用上了（踩坑中）。要离开jetbrains，确实需要极大的勇气，不过也算开始了。<br>目前先把markdown先搬过来，后续再慢慢的把js、html、php、dart、py等等全搞过来</p>
<a id="more"></a>  
<h1 id="远程开发需求"><a href="#远程开发需求" class="headerlink" title="远程开发需求"></a>远程开发需求</h1><p>不同的人有不同需求，就本人来说，太需要了</p>
<p>然后，原因我记得前面已经说了</p>
<h1 id="需要些什么软件"><a href="#需要些什么软件" class="headerlink" title="需要些什么软件"></a>需要些什么软件</h1><h2 id="ide"><a href="#ide" class="headerlink" title="ide"></a>ide</h2><ol>
<li><p>为了在随时随地可以敲代码，先考虑了code-server，毕竟只要一个浏览器就可以了，大屏手机（夸张了，试了，至少也得平板吧）都可以在地铁上干。。。</p>
</li>
<li><p>code-server还是有一些坑的，除了它还可以考虑常用的本地ide，如jetbrains全家桶，不过这就得装桌面加上一个远程软件</p>
</li>
</ol>
<h2 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h2><p>我的环境装在家里，好在有公网ip，端口要通过路由器转发</p>
<p>项目呢，有很多，对应的端口也很多，不想设一一对应，so用vpn走内网</p>
<p>如果是云服务器，就没有必要了，不过单纯的给通信加个密也还是极好的</p>
<h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>如果有外网，则不需要这点</p>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>用docker做开发环境，真是不错，顺便把测试环境也一并解决了</p>
<h2 id="其它工具"><a href="#其它工具" class="headerlink" title="其它工具"></a>其它工具</h2><p>其它相关的工具</p>
<h1 id="然后"><a href="#然后" class="headerlink" title="然后"></a>然后</h1><p>细节后期来补吧</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>js</tag>
        <tag>develop</tag>
        <tag>other</tag>
        <tag>ide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>从源码编译vscode，用于web端vscode</title>
    <url>/2020/2020-03-07-compile-vscode-for-web/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>code-server目前来说还有些坑，试试vscode呢，不晓得坑多不多。总之多折腾嘛<br><a id="more"></a>  </p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面尝试了code-server，总体来说，还是不错的，当然也有一些小坑</p>
<p>后来呢，visual studio online 又来了，可tm的捆绑azure就有点坑了</p>
<p>本来呢，本着尝试一下的心情，测试了号。。。</p>
<p>然后价格感人啊</p>
<p>再者，网速还慢</p>
<p>算了，试试web版的vscode吧</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>目前来说，vscode的web版远没有code-server好用，哈哈哈哈</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><blockquote>
<p>在下用的debian9，kde桌面，其它的系统可能会有一些小的区别</p>
</blockquote>
<p>先上个 <a href="https://github.com/microsoft/vscode/wiki/How-to-Contribute" target="_blank" rel="noopener">官方教程</a></p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>就三句代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/microsoft/vscode</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> vscode</span><br><span class="line"></span><br><span class="line">yarn</span><br></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/code.sh</span><br></pre></td></tr></table></figure>
<h2 id="运行web版"><a href="#运行web版" class="headerlink" title="运行web版"></a>运行web版</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn build</span><br></pre></td></tr></table></figure>
<h2 id="过程中遇到的问题"><a href="#过程中遇到的问题" class="headerlink" title="过程中遇到的问题"></a>过程中遇到的问题</h2><ol>
<li><p>差依赖</p>
<p> 我只遇到过，差<code>libsecret-1</code></p>
<blockquote>
<p>Package libsecret-1 was not found in the pkg-config search path.</p>
</blockquote>
<p> 解决方法：</p>
<blockquote>
<p><a href="https://github.com/atom/node-keytar#on-linux" target="_blank" rel="noopener">https://github.com/atom/node-keytar#on-linux</a><br> Debian/Ubuntu: <code>sudo apt-get install libsecret-1-dev</code><br> Red Hat-based: <code>sudo yum install libsecret-devel</code><br> Arch Linux: <code>sudo pacman -S libsecret</code></p>
</blockquote>
</li>
<li><p>编译完成后运行没有扩展</p>
<p> 没有扩展的vscode，就是一个高级的记事本，哈哈</p>
<blockquote>
<p><a href="https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source" target="_blank" rel="noopener">https://stackoverflow.com/questions/37143536/no-extensions-found-when-running-visual-studio-code-from-source</a></p>
</blockquote>
<p> 在源码的根目录下，有一个 <code>product.json</code>，增加配置项<code>extensionsGallery</code>，然后重新运行就行了</p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  "extensionsGallery": &#123;</span><br><span class="line">    "serviceUrl": "https://marketplace.visualstudio.com/_apis/public/gallery",</span><br><span class="line">    "cacheUrl": "https://vscode.blob.core.windows.net/gallery/index",</span><br><span class="line">    "itemUrl": "https://marketplace.visualstudio.com/items"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译后启动不了</p>
<p> 这个原因肯定就多了</p>
<p> 在第一次执行<code>./script/code.sh</code>时，我因为网络问题，在中间某个环节按了<code>ctrl+c</code>，中断了编译的执行，然后重新执行<code>./script/code.sh</code>，死活运行不了</p>
<p> 解决方法：<br> 执行了一个脚本，当然，这是猜的，不知道怎么解决</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./scripts/npm.sh</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>sudo的时候用alias</title>
    <url>/2020/2020-03-30-use-alias-on-sudo/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>有时会在sudo的时候用上别名，那么有些什么坑呢，感谢站长指导</p>
<a id="more"></a>  
<h1 id="先说解决方法"><a href="#先说解决方法" class="headerlink" title="先说解决方法"></a>先说解决方法</h1><p>一句命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ <span class="built_in">alias</span> sudo=<span class="string">'sudo '</span></span><br></pre></td></tr></table></figure>
<p>或者加到 <code>~/.bashrc</code> 等地方</p>
<h1 id="再说过程"><a href="#再说过程" class="headerlink" title="再说过程"></a>再说过程</h1><p>比如，我目前是普通用户 <code>debian</code>，然后我定义了一个别名 <code>me</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ <span class="built_in">alias</span> me=<span class="string">'whoami'</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ me</span><br><span class="line">debian</span><br></pre></td></tr></table></figure>
<p>这时，我们在终端输 <code>sudo me</code>，肯定是不行的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ sudo me</span><br><span class="line">sudo: me: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>
<p>在站长的帮助下，输入以下命令，就解决了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ <span class="built_in">alias</span> sudo=<span class="string">'sudo '</span></span><br></pre></td></tr></table></figure>
<p>然后我们试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian@debian:~$ me</span><br><span class="line">debian</span><br><span class="line">debian@debian:~$ sudo me</span><br><span class="line">root</span><br></pre></td></tr></table></figure>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>先看下文档</p>
<blockquote><p>先看下文档 </p>
<footer><strong>Free Software Foundation, Inc.</strong><cite><a href="http://www.linuxcommand.org/lc3_man_pages/aliash.html" target="_blank" rel="noopener">alias</a></cite></footer></blockquote>
<p>或者直接在终端敲<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">    alias - Define or display aliases.</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    alias [-p] [name[=value] ... ]</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    Define or display aliases.</span><br><span class="line">    </span><br><span class="line">    Without arguments, `alias&apos; prints the list of aliases in the reusable</span><br><span class="line">    form `alias NAME=VALUE&apos; on standard output.</span><br><span class="line">    </span><br><span class="line">    Otherwise, an alias is defined for each NAME whose VALUE is given.</span><br><span class="line">    A trailing space in VALUE causes the next word to be checked for</span><br><span class="line">    alias substitution when the alias is expanded.</span><br><span class="line">    </span><br><span class="line">    Options:</span><br><span class="line">      -p	Print all defined aliases in a reusable format</span><br><span class="line">    </span><br><span class="line">    Exit Status:</span><br><span class="line">    alias returns true unless a NAME is supplied for which no alias has been</span><br><span class="line">    defined.</span><br><span class="line"></span><br><span class="line">SEE ALSO</span><br><span class="line">    bash(1)</span><br><span class="line"></span><br><span class="line">IMPLEMENTATION</span><br><span class="line">    GNU bash, version 4.1.5(1)-release (i486-pc-linux-gnu)</span><br><span class="line">    Copyright (C) 2009 Free Software Foundation, Inc.</span><br><span class="line">    License GPLv3+: GNU GPL version 3 or later</span><br></pre></td></tr></table></figure>
<p>其中有一句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A trailing space in VALUE causes the next word to be checked for alias substitution when the alias is expanded.</span><br></pre></td></tr></table></figure>
<p>大致意思是，如果右边的<code>VALUE</code>以空格结尾，则会检查空格后的那个单词是否定义别名</p>
<p>那么还是以上面的 <code>sudo me</code> 为例</p>
<p>也就是说在不设设置 <code>alias=&#39;sudo &#39;</code>的时候，bash只会检查第一个单词<code>sudo</code>是否定义别名，后面<code>me</code>的不会作为别名去检查</p>
<p>加了后当然就正确了</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx全局变量</title>
    <url>/2020/2020-04-12-nginx-global-variable/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>常用nginx全局变量mark~，转自国内某奶子大神<br><a id="more"></a>  </p>
<blockquote>
<p>原文链接<br><a href="http://blog.wingflare.com/2019/10/oq8v1063rp6l4y57.html" target="_blank" rel="noopener">http://blog.wingflare.com/2019/10/oq8v1063rp6l4y57.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$args</span>          请求中的参数，如www.123.com/1.php?a=1&amp;b=2的<span class="variable">$args</span>就是a=1&amp;b=2</span><br><span class="line"><span class="variable">$content_length</span>  HTTP请求信息里的”Content-Length”</span><br><span class="line"><span class="variable">$conten_type</span>  HTTP请求信息里的”Content-Type”</span><br><span class="line"><span class="variable">$document_root</span>  nginx虚拟主机配置文件中的root参数对应的值</span><br><span class="line"><span class="variable">$document_uri</span>  当前请求中不包含指令的URI，如www.123.com/1.php?a=1&amp;b=2的<span class="variable">$document_uri</span>就是1.php,不包含后面的参数</span><br><span class="line"><span class="variable">$host</span>          主机头，也就是域名</span><br><span class="line"><span class="variable">$http_user_agent</span>  客户端的详细信息，也就是浏览器的标识，用curl -A可以指定</span><br><span class="line"><span class="variable">$http_cookie</span>  客户端的cookie信息</span><br><span class="line"><span class="variable">$limit_rate</span>          如果nginx服务器使用limit_rate配置了显示网络速率，则会显示，如果没有设置， 则显示0</span><br><span class="line"><span class="variable">$remote_addr</span>  客户端的公网ip</span><br><span class="line"><span class="variable">$remote_port</span>  客户端的port</span><br><span class="line"><span class="variable">$remote_user</span>  如果nginx有配置认证，该变量代表客户端认证的用户名</span><br><span class="line"><span class="variable">$request_body_file</span>  做反向代理时发给后端服务器的本地资源的名称</span><br><span class="line"><span class="variable">$request_method</span>  请求资源的方式，GET/PUT/DELETE等</span><br><span class="line"><span class="variable">$request_filename</span>  当前请求的资源文件的路径名称，相当于是<span class="variable">$document_root</span>/<span class="variable">$document_uri</span>的组合</span><br><span class="line"><span class="variable">$request_uri</span>  请求的链接，包括<span class="variable">$document_uri</span>和<span class="variable">$args</span></span><br><span class="line"><span class="variable">$scheme</span>          请求的协议，如ftp,http,https</span><br><span class="line"><span class="variable">$server_protocol</span>  客户端请求资源使用的协议的版本，如HTTP/1.0，HTTP/1.1，HTTP/2.0等</span><br><span class="line"><span class="variable">$server_addr</span>  服务器IP地址</span><br><span class="line"><span class="variable">$server_name</span>  服务器的主机名</span><br><span class="line"><span class="variable">$server_port</span>  服务器的端口号</span><br><span class="line"><span class="variable">$uri</span>          和<span class="variable">$document_uri</span>相同</span><br><span class="line"><span class="variable">$http_referer</span>  客户端请求时的referer，通俗讲就是该请求是通过哪个链接跳过来的，用curl -e可以指定</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>以海康威视摄像头sdk来试用一下go的sycall</title>
    <url>/2020/2020-04-20-syscall-in-go-use-hk-api/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>现需要用go写一个运行在win上的常驻服务的客户端，现准备用go来试一下。该客户端会集成多个商家的动态库，故试一下syscall<br><a id="more"></a>  </p>
<h1 id="最新进度"><a href="#最新进度" class="headerlink" title="最新进度"></a>最新进度</h1><p>我尼玛，被虐哭了</p>
<h1 id="哈哈哈哈"><a href="#哈哈哈哈" class="headerlink" title="哈哈哈哈"></a>哈哈哈哈</h1><p>慢慢补吧</p>
<p>我尼玛，被</p>
<h1 id="有哪些坑"><a href="#有哪些坑" class="headerlink" title="有哪些坑"></a>有哪些坑</h1><h2 id="返回string的问题"><a href="#返回string的问题" class="headerlink" title="返回string的问题"></a>返回string的问题</h2><p>海康头文件原型<br><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据错误号返回错误信息</span></span><br><span class="line"><span class="function">NET_DVR_API <span class="keyword">char</span>* __stdcall <span class="title">NET_DVR_GetErrorMsg</span><span class="params">(LONG *pErrorNo = <span class="literal">NULL</span>)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>直接说返回值，看到char*，第一反应就是指针；看到char第一反应就是byte</p>
<p>于是:</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 大概是这个样子</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NET_DVR_GetErrorMsg</span><span class="params">(errNo *<span class="keyword">uint</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	h := syscall.NewLazyDLL(DllPath)</span><br><span class="line">	proc := h.NewProc(<span class="string">"NET_DVR_GetErrorMsg"</span>)</span><br><span class="line">	n, _, _ := proc.Call(</span><br><span class="line">		<span class="keyword">uintptr</span>(unsafe.Pointer(errNo)))</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里用slice会报错，所以要用array，须指定长度</span></span><br><span class="line">	msg := *(*[<span class="number">100</span>]<span class="keyword">byte</span>)(unsafe.Pointer(n))</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">string</span>(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做，也能得到字符串。但是，由于不知道长度，就会把多的字符串赋值进去</p>
<p>后来知道了cgo，上面有一些和c类型的对应，所以试了一下，完美解决</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NET_DVR_GetErrorMsg</span><span class="params">(errNo *<span class="keyword">uint</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	h := syscall.NewLazyDLL(DllPath)</span><br><span class="line">	proc := h.NewProc(<span class="string">"NET_DVR_GetErrorMsg"</span>)</span><br><span class="line">	n, _, _ := proc.Call(</span><br><span class="line">		<span class="keyword">uintptr</span>(unsafe.Pointer(errNo)))</span><br><span class="line"></span><br><span class="line">	msg := (*C.char)(unsafe.Pointer(n))</span><br><span class="line">	<span class="keyword">return</span> C.GoString(msg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看吧，就最后两句不一样</p>
<h2 id="exit-3221225477"><a href="#exit-3221225477" class="headerlink" title="exit 3221225477"></a>exit 3221225477</h2><p>也就是<code>0xc0000005</code>问题</p>
<p>这是个什么问题？不知道</p>
<p>为什么会有这个问题？不知道</p>
<p>怎么解决这个问题？不知道</p>
<p>我只在设置回调时遇到过这个问题，如果您遇到了，可以对号入座</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 来自头文件 HCNetSDK.h </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">BOOL</span> <span class="params">(CALLBACK *MSGCallBack_V31)</span><span class="params">(LONG lCommand, NET_DVR_ALARMER *pAlarmer, <span class="keyword">char</span> *pAlarmInfo, DWORD dwBufLen, <span class="keyword">void</span>* pUser)</span></span>;</span><br><span class="line"><span class="function">NET_DVR_API BOOL __stdcall <span class="title">NET_DVR_SetDVRMessageCallBack_V31</span><span class="params">(MSGCallBack_V31 fMessageCallBack, <span class="keyword">void</span>* pUser)</span></span>;</span><br></pre></td></tr></table></figure>
<p>在go中这么搞</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NET_DVR_SetDVRMessageCallBack_V31</span><span class="params">(msgCallback callback.MSGCallBack_V31,pUser unsafe.Pointer)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	h := syscall.NewLazyDLL(DllPath)</span><br><span class="line">	proc := h.NewProc(<span class="string">"NET_DVR_SetDVRMessageCallBack_V31"</span>)</span><br><span class="line"></span><br><span class="line">	n, _, _ := proc.Call(</span><br><span class="line">    <span class="comment">// syscall.NewCallbackCDecl(msgCallback),</span></span><br><span class="line">    syscall.NewCallback(msgCallback),</span><br><span class="line">		<span class="keyword">uintptr</span>(pUser),</span><br><span class="line">	)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> boolRes(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到上面代码里面我注释了一句，<code>syscall.NewCallbackCDecl</code>。</p>
<p>对，就是这一句错了，原因就是两个方法对c函数的约定不同</p>
<p><code>syscall.NewCallback</code> 调的c函数要符合<code>__stdcall</code>调用约定</p>
<p><code>syscall.NewCallbackCDecl</code> 调的c函数要符合<code>__cdecl</code>调用约定</p>
<p>在海康的头文件里就能看到貌似所有的函数都是<code>__stdcall</code>的，以头文件中<code>NET_DVR_SetDVRMessageCallBack_V31</code>为例</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置回调，来自头文件 HCNetSDK.h </span></span><br><span class="line"><span class="function">NET_DVR_API BOOL __stdcall <span class="title">NET_DVR_SetDVRMessageCallBack_V31</span><span class="params">(MSGCallBack_V31 fMessageCallBack, <span class="keyword">void</span>* pUser)</span></span>;</span><br></pre></td></tr></table></figure>
<p>总之，如果遇到这个问题，可以考虑一下这个解决方法</p>
<h2 id="一个习惯性问题的坑"><a href="#一个习惯性问题的坑" class="headerlink" title="一个习惯性问题的坑"></a>一个习惯性问题的坑</h2><p>我接触的几种语言，默认情况下对象都是用指针传递的，这已经变成习惯了</p>
<p>然后，go的struct也是当成class用的</p>
<p>所以一般的struct变量都会赋一个指针，也不会想太多</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> DemoModel <span class="keyword">struct</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demoModel *DemoModel</span><br></pre></td></tr></table></figure>
<p>然后，海康的某些struct里的属性为另一个struct，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测结果，来自头文件 HCNetSDK.h </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagNET_ITS_PLATE_RESULT</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    NET_DVR_PLATE_INFO  struPlateInfo;     <span class="comment">//车牌信息结构</span></span><br><span class="line">    NET_DVR_VEHICLE_INFO struVehicleInfo;    <span class="comment">//车辆信息</span></span><br><span class="line">    ...</span><br><span class="line">&#125;NET_ITS_PLATE_RESULT, *LPNET_ITS_PLATE_RESULT;</span><br></pre></td></tr></table></figure>
<p>头文件中，属性为值而非指针，然而我下意识的，写上 <code>*</code></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> NET_ITS_PLATE_RESULT <span class="keyword">struct</span> &#123;</span><br><span class="line">	struPlateInfo *NET_DVR_PLATE_INFO</span><br><span class="line">	struVehicleInfo *NET_DVR_VEHICLE_INFO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用的时候，这些struct字段的值就为<code>nil</code></p>
<p>这破问题花了我好多时间，真是找不到原因</p>
<p>自己写c++代码来测试（因为我C++代码加了*）都是正常</p>
<p>百度谷歌查了好久，也没找到原因</p>
<p>最后，不知道在排查哪个问题的时候，又看了下头文件，然后说了句<code>卧槽</code>，终于结束了这次debug</p>
<h2 id="再来个问题"><a href="#再来个问题" class="headerlink" title="再来个问题"></a>再来个问题</h2><p>struct 里面的 byte[] 指针问题</p>
<p>后面写，现在远程写的，网不好</p>
<h2 id="调私库的问题"><a href="#调私库的问题" class="headerlink" title="调私库的问题"></a>调私库的问题</h2><p>这个与syscall 无关，但既然遇到了，就先记在这里</p>
<p>要做以下事</p>
<ol>
<li>声明私库的网站<br>比如这样<br><code>go env -w GOPRIVATE=gitlab.com</code></li>
<li>一般情况，我pc有私库的密钥，用ssh格式的话，不用输密码，则可以转一下格式<br>比如这样<br><code>git config --global url.git@gitlab.com:.insteadOf https://gitlab.com/</code></li>
</ol>
<p>细节后面补</p>
<h2 id="搜到的问题"><a href="#搜到的问题" class="headerlink" title="搜到的问题"></a>搜到的问题</h2><p>关于syscall.callback的个数限制问题</p>
<p>貌似为2000</p>
<p>这里其实我不知道是什么意思</p>
<p>遇到再说</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>虽然还没写完，但可以先把总结写了</p>
<ol>
<li>调用动态库时，有条件就多看看头文件<br>理论上说，正确性： 头文件 &gt; 文档 &gt; 其它语言写的demo</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>golang</tag>
        <tag>dll</tag>
      </tags>
  </entry>
  <entry>
    <title>teamviewer、anydesk等连接没有插显示器的debian系统时会卡顿的问题</title>
    <url>/2020/2020-04-27-remote-desktop-without-display/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>用teamviewer或anydesk连接远程debian机器时，即使在局网内也会卡成屎。原因未明，哈哈哈哈<br><a id="more"></a>  </p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>据说是xwindow没有启动，但没有启动为何又能连得上，只是很卡。算了，不懂也不深究，只说解决方法</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><blockquote>
<p><a href="https://askubuntu.com/questions/453109/add-fake-display-when-no-monitor-is-plugged-in" target="_blank" rel="noopener">https://askubuntu.com/questions/453109/add-fake-display-when-no-monitor-is-plugged-in</a></p>
<p>Found a way to do it without requiring a dummy plug: Ubuntu Headless VNC VESA 800x600 Resolution Fix ~ Andy Hawkins @ June 12, 2011</p>
<p>Basically install a dummy driver:</p>
<p>sudo apt-get install xserver-xorg-video-dummy<br>Then write it in the /usr/share/X11/xorg.conf.d/xorg.conf (or possibly /etc/X11/xorg.conf) file (create one, if it does not exist):</p>
<p>Section “Device”<br>    Identifier  “Configured Video Device”<br>    Driver      “dummy”<br>EndSection</p>
<p>Section “Monitor”<br>    Identifier  “Configured Monitor”<br>    HorizSync 31.5-48.5<br>    VertRefresh 50-70<br>EndSection</p>
<p>Section “Screen”<br>    Identifier  “Default Screen”<br>    Monitor     “Configured Monitor”<br>    Device      “Configured Video Device”<br>    DefaultDepth 24<br>    SubSection “Display”<br>    Depth 24<br>    Modes “1024x800”<br>    EndSubSection<br>EndSection</p>
</blockquote>
<p>还是翻译成中文吧，就是：</p>
<p>装一个虚拟显示器燕驱动</p>
<ol>
<li><p>apt安装驱动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install xserver-xorg-video-dummy</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置虚拟显示器<br> 将以下配置写入配置文件，<code>/usr/share/X11/xorg.conf.d/xorg.conf</code> 或 <code>/etc/X11/xorg.conf</code></p>
<p> 在下试的<code>/etc/X11/xorg.conf</code>，可以正常使用</p>
<p> 配置文件如下：</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">    Identifier  <span class="string">"Configured Video Device"</span></span><br><span class="line">    Driver      <span class="string">"dummy"</span></span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Monitor"</span></span><br><span class="line">    Identifier  <span class="string">"Configured Monitor"</span></span><br><span class="line">    HorizSync 31.5-48.5</span><br><span class="line">    VertRefresh 50-70</span><br><span class="line">EndSection</span><br><span class="line"></span><br><span class="line">Section <span class="string">"Screen"</span></span><br><span class="line">    Identifier  <span class="string">"Default Screen"</span></span><br><span class="line">    Monitor     <span class="string">"Configured Monitor"</span></span><br><span class="line">    Device      <span class="string">"Configured Video Device"</span></span><br><span class="line">    DefaultDepth 24</span><br><span class="line">    SubSection <span class="string">"Display"</span></span><br><span class="line">    Depth 24</span><br><span class="line">    Modes <span class="string">"1024x800"</span></span><br><span class="line">    EndSubSection</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure>
<p> 是啥子意思呢，看不懂。。。哈哈哈哈</p>
</li>
<li><p>重启系统<br>如果正常，那么再次用teamviewer连接，就不会卡了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
        <tag>develop</tag>
        <tag>teamviewer</tag>
        <tag>anydesk</tag>
      </tags>
  </entry>
  <entry>
    <title>试一下zap</title>
    <url>/2020/2020-05-20-zap-test/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>尝试一下zap<br><a id="more"></a>  </p>
<h1 id="先上链接吧后面再补"><a href="#先上链接吧后面再补" class="headerlink" title="先上链接吧后面再补"></a>先上链接吧后面再补</h1><blockquote>
<p><a href="https://blog.yguilai.com/post/L_yuiYNgS/" target="_blank" rel="noopener">https://blog.yguilai.com/post/L_yuiYNgS/</a></p>
</blockquote>
<blockquote>
<p><a href="http://vearne.cc/archives/658?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">http://vearne.cc/archives/658?tdsourcetag=s_pctim_aiomsg</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>golang</tag>
        <tag>logging</tag>
      </tags>
  </entry>
  <entry>
    <title>玩一下pve虚拟机呢</title>
    <url>/2020/2020-11-09-pve01/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>将家里有闲置的电脑利用起来搞虚拟机<br><a id="more"></a>  </p>
<h1 id="写点啥呢"><a href="#写点啥呢" class="headerlink" title="写点啥呢"></a>写点啥呢</h1><p>大概要写安装、常用配置、创建、直通硬盘、直通PCI(显卡网卡)、导出</p>
<p>再加一个搞openwrt的吧</p>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>先上几个链接吧，再补全</p>
<blockquote>
<p><a href="https://foxi.buduanwang.vip/yj/561.html/" target="_blank" rel="noopener">https://foxi.buduanwang.vip/yj/561.html/</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.10bests.com/install-openwrt-lede-on-pve/" target="_blank" rel="noopener">https://www.10bests.com/install-openwrt-lede-on-pve/</a></p>
</blockquote>
<blockquote>
<p><a href="https://fcying.com/proxmox-ve-setting-14728/" target="_blank" rel="noopener">https://fcying.com/proxmox-ve-setting-14728/</a></p>
</blockquote>
<h1 id="另"><a href="#另" class="headerlink" title="另"></a>另</h1><p>突然发现还有好多没有补。。。。。</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>virtual</tag>
        <tag>pve</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtualbox的网卡类型</title>
    <url>/2020/2020-11-12-virtualbox-network/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>记录一下virtualbox的网卡类型<br><a id="more"></a>  </p>
<h1 id="六种网络类型"><a href="#六种网络类型" class="headerlink" title="六种网络类型"></a>六种网络类型</h1><p><a href="https://www.virtualbox.org/manual/ch06.html" target="_blank" rel="noopener">官网文档 https://www.virtualbox.org/manual/ch06.html</a></p>
<p>virtualbox可选的网络模式有七种，分别是 Not attached、Network Address Translation (NAT)、NAT Network、Bridged networking、Internal networking、Host-only networking、Generic networking。</p>
<h2 id="Not-attached-（未指定）"><a href="#Not-attached-（未指定）" class="headerlink" title="Not attached （未指定）"></a>Not attached （未指定）</h2><p>类似于有网卡但没插网线，可以设ip地址。</p>
<h2 id="Network-Address-Translation-NAT-（网络地址转换）"><a href="#Network-Address-Translation-NAT-（网络地址转换）" class="headerlink" title="Network Address Translation (NAT) （网络地址转换）"></a>Network Address Translation (NAT) （网络地址转换）</h2><p>该模式为默认的网络模式</p>
<p>相当于主机的某个网卡（能在配置中指定）的子网卡，子网卡互相独立，与外部的请求都通过主机转发</p>
<p>所以，</p>
<p>虚拟机能访问到主机，也能访问到该网卡能访问的任何网络，比如该网卡所在的局域网/互联网</p>
<p>但是</p>
<p>主机不能直接访问虚拟机，可以通过端口转发来访问指定端口</p>
<p>虚拟机之间也不能互相访问</p>
<h2 id="NAT-Network"><a href="#NAT-Network" class="headerlink" title="NAT Network"></a>NAT Network</h2><p>貌似和 NAT 差不多，但虚拟机之间能互相访问</p>
<h2 id="Bridged-networking-（桥接）"><a href="#Bridged-networking-（桥接）" class="headerlink" title="Bridged networking （桥接）"></a>Bridged networking （桥接）</h2><p>虚拟出一个功能较全的网卡并且与主机网卡连接在一起组成的一个网络</p>
<p>可把虚拟机和主机理解为多个独立的电脑连在同一台交换机上</p>
<p>所以，在使用中虚拟机与主机网卡同级</p>
<p>故，任意虚拟机之间以及和主机之间都能互相访问</p>
<h2 id="Internal-networking-内部网络"><a href="#Internal-networking-内部网络" class="headerlink" title="Internal networking (内部网络)"></a>Internal networking (内部网络)</h2><p>顾名思义，只有虚拟机之间可以相互访问。与主机之间不能通信</p>
<h2 id="Host-only-networking"><a href="#Host-only-networking" class="headerlink" title="Host-only networking"></a>Host-only networking</h2><p>相当于，</p>
<p>主机虚拟出一个与实体网卡独立的虚拟网卡（在系统的可以看到 控制面板\网络和 Internet\网络连接），如图</p>
<img src="/2020/2020-11-12-virtualbox-network/interface_list.png">
<p>然后，给每个虚拟也分配一个同等功能的虚拟网卡，再将这些虚拟网卡连接到一个网络</p>
<p>故，</p>
<p>虚拟机之间以及和主机之间能互相通信</p>
<p>但是不能访问外部网络，比如主机所在的其它局域网和互联</p>
<blockquote>
<p>要正常通信，记得设置ip到同一网段下。还要注意主机的设备名和用于<code>host-only</code>的虚拟机网上的设备名</p>
</blockquote>
<h2 id="Generic-networking"><a href="#Generic-networking" class="headerlink" title="Generic networking"></a>Generic networking</h2><p>这个没用过，也看不懂说的啥。。。</p>
<blockquote>
<p>Rarely used modes which share the same generic network interface, by allowing the user to select a driver which can be included with Oracle VM VirtualBox or be distributed in an extension pack.</p>
</blockquote>
<h1 id="不同网络类型的通信能力"><a href="#不同网络类型的通信能力" class="headerlink" title="不同网络类型的通信能力"></a>不同网络类型的通信能力</h1><p>前面基本也说了，截一张官网文档的图总结一下</p>
<img src="/2020/2020-11-12-virtualbox-network/table_6_1.png">
<p>VM: 虚拟机</p>
<p>HOST: 主机</p>
<p>NET: 互联网</p>
<p>LAN: 局域网</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>一般情况下，用默认的<code>NAT</code>就够用的。能正常上网，不与其它机器交互</p>
<p>有机器之间交互的，最简单的情况就是选<code>桥接</code>，能满足几乎所有场景。不过有个缺点就是设备太多的话，会占用ip。</p>
<p>还有一种较简单的就是，由于virtualbox可以同时设置4个网卡，那么可以使用<code>NAT</code>加上<code>HOST ONLY</code>组合，来达到内外兼修的效果。我平时用这种比较多</p>
]]></content>
      <categories>
        <category>虚拟机</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
        <tag>develop</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>windows下把exe以服务方式运行</title>
    <url>/2020/2020-11-29-exe-to-service/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>以xp为例，搞定windows下把普通exe程序以服务方式运行，一般指服务类的无ui程序</p>
<a id="more"></a>  
<h1 id="最近遇到个事。。。。。。"><a href="#最近遇到个事。。。。。。" class="headerlink" title="最近遇到个事。。。。。。"></a>最近遇到个事。。。。。。</h1><p>2020年年末了，接到个需求，将某个xp程序弄成后台运行。平时用pm2习惯了，发现node早就不支持xp了。珍爱生命，远离xp。。。</p>
<p>百度谷歌了解了一下其它方法，发现用<code>instsrv</code>和<code>srvany</code>结合的方法比较符合口味</p>
<p>先放上下载链接（来源于互联网，安全性未知，目前使用中没发现报毒）</p>
<a href="/2020/2020-11-29-exe-to-service/exe_to_service.zip" title="点击下载instsrv和srvany">点击下载instsrv和srvany</a>
<p>那么开始吧。。。</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p>下面开始说一下步骤</p>
<p>也可以点击简洁步骤，跳过那些不必要的操作</p>
<p><a href="#step1">简洁步骤-下一步</a></p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a><span id="step1">下载安装</span></h2><a href="/2020/2020-11-29-exe-to-service/exe_to_service.zip" title="点击下载instsrv和srvany">点击下载instsrv和srvany</a>
<p>下载后，将包内两个个程序解压到<code>X:\windows\system32</code>目录，<code>X</code>代表系统盘，一般为C盘，恰好我搞的这台电脑系统盘就不是C盘。。。</p>
<p>也可用环境变量表，本部分可跳过后文 <a href="#step2">简洁步骤-下一步</a></p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># <span class="built_in">cmd</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%windir%</span>\system32</span><br></pre></td></tr></table></figure>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># powershell</span></span><br><span class="line">(<span class="string">"&#123;0&#125;&#123;1&#125;"</span> <span class="operator">-f</span> <span class="variable">$env:windir</span>,<span class="string">"\system32"</span>)</span><br></pre></td></tr></table></figure>
<p>然后可以测试一下，在cmd里输入<code>instsrv</code>，正常情况下会输出以下，表示下载安装成功</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">Documents</span> <span class="title">and</span> <span class="title">Settings</span>\<span class="title">zy</span>&gt;<span class="title">instsrv</span></span></span><br><span class="line"><span class="function"><span class="title">Installs</span> <span class="title">and</span> <span class="title">removes</span> <span class="title">system</span> <span class="title">services</span> <span class="title">from</span> <span class="title">NT</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">INSTSRV</span> &lt;<span class="title">service</span> <span class="title">name</span>&gt; (&lt;<span class="title">exe</span> <span class="title">location</span>&gt; | <span class="title">REMOVE</span>)</span></span><br><span class="line"><span class="function">  [-<span class="title">a</span> &lt;<span class="title">Account</span> <span class="title">Name</span>&gt;] [-<span class="title">p</span> &lt;<span class="title">Account</span> <span class="title">Password</span>&gt;]</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">Install</span> <span class="title">service</span> <span class="title">example</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">INSTSRV</span> <span class="title">MyService</span> <span class="title">C</span>:\<span class="title">MyDir</span>\<span class="title">DiskService.Exe</span></span></span><br><span class="line"><span class="function">    -<span class="title">OR</span>-</span></span><br><span class="line"><span class="function">    <span class="title">INSTSRV</span> <span class="title">MyService</span> <span class="title">C</span>:\<span class="title">mailsrv</span>\<span class="title">mailsrv.exe</span> -<span class="title">a</span> <span class="title">MYDOMAIN</span>\<span class="title">joebob</span> -<span class="title">p</span> <span class="title">foo</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">Remove</span> <span class="title">service</span> <span class="title">example</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">INSTSRV</span> <span class="title">MyService</span> <span class="title">REMOVE</span></span></span><br></pre></td></tr></table></figure>
<h2 id="注册服务"><a href="#注册服务" class="headerlink" title="注册服务"></a>注册服务</h2><p>从上面cmd的输入来看，注册服务的基本语法为 <code>INSTSRV MyService C:\MyDir\DiskService.Exe</code></p>
<p>其中我们下载的文件中，<code>srvany.exe</code>就可充当<code>C:\MyDir\DiskService.Exe</code></p>
<p>由于我们放在系统文件夹<code>system32</code>中，那么cmd中可以这么表示<code>%windir%\system32\srvany.exe</code></p>
<p>所以完整命令为：（<code>ServiceName</code> 是你要注册的服务名称，<code>ServiceName</code>后面还要用到）</p>
<h3 id="完整命令"><a href="#完整命令" class="headerlink" title="完整命令"></a><span id="step2">完整命令</span></h3><p>在cmd中输入</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">instsrv ServiceName <span class="variable">%windir%</span>\system32\srvany.exe</span><br></pre></td></tr></table></figure>
<p>正常的输出</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">The service was successfuly added!</span><br><span class="line"></span><br><span class="line">Make sure that you go into the Control Panel and use</span><br><span class="line">the Services applet to change the Account Name and</span><br><span class="line">Password that this newly installed service will use</span><br><span class="line"><span class="keyword">for</span> its Security Context.</span><br></pre></td></tr></table></figure>
<p><a href="#step3">简洁步骤-下一步</a></p>
<p>例如：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">instsrv my_nginx <span class="variable">%windir%</span>\system32\srvany.exe</span><br></pre></td></tr></table></figure>
<h2 id="改注册表"><a href="#改注册表" class="headerlink" title="改注册表"></a>改注册表</h2><p>注册表在该路径：</p>
<p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\[ServiceName]</code></p>
<p><code>ServiceName</code>就是前面提到的服务名称</p>
<p>该路径下的 <code>Parameters</code>项则为服务的运行参数，默认情况下是没有该项的，可以自行创建</p>
<p><code>Parameters</code>目前本人已知有以下几个键值对</p>
<ul>
<li>Application<br>程序路径，即要运行哪个程序</li>
<li>AppParameters（可选）<br>程序参数</li>
<li>AppDirectory（可选）<br>程序工作目录，即程序在哪个目录运行</li>
<li>Description（可选）<br>服务描述</li>
</ul>
<h3 id="用reg文件注册"><a href="#用reg文件注册" class="headerlink" title="用reg文件注册"></a><span id="step3">用reg文件注册</span></h3><p>将以下内容拷入文本文件，修改里面的中文提示内容为自己服务程序的实际内容，保存并将文件后缀改为<code>.reg</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\修改这里为你的服务名\Parameters]</span><br><span class="line">&quot;Application&quot;=&quot;程序执行命令&quot;</span><br><span class="line">&quot;AppParameters&quot;=&quot;程序执行参数（可选）&quot;</span><br><span class="line">&quot;AppDirectory&quot;=&quot;程序工作目录（可选）&quot;</span><br><span class="line">&quot;Description&quot;=&quot;描述（可选）&quot;</span><br></pre></td></tr></table></figure></p>
<p>例如：</p>
<p><code>my_nginx.reg</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\my_nginx\Parameters]</span><br><span class="line">&quot;Application&quot;=&quot;nginx.exe&quot;</span><br><span class="line">&quot;AppParameters&quot;=&quot;-c nginx.conf&quot;</span><br><span class="line">&quot;AppDirectory&quot;=&quot;x:\xxx\&quot;</span><br><span class="line">&quot;Description&quot;=&quot;nginx&quot;</span><br></pre></td></tr></table></figure>
<p>至此，服务配置完成</p>
<h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>启动、停止、设置自启：</p>
<p>这几步可直接在windows自带的服务程序中使用</p>
<p>按下 <code>win + R</code> 打开的运行中或在cmd中输入<code>services.msc</code></p>
<p>在名称中找到你的服务名称<code>ServiceName</code>，点击相应按钮即可</p>
<p>删除服务：</p>
<p>可用<code>INSTSRV</code>命令解决，从前面的命令输出可见基本语法</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">INSTSRV MyService REMOVE</span><br></pre></td></tr></table></figure>
<h2 id="对于有界面的程序"><a href="#对于有界面的程序" class="headerlink" title="对于有界面的程序"></a>对于有界面的程序</h2><p>如果程序需要界面，则可在服务属性中打开 <code>允许服务与桌面交互</code></p>
<p>按下 <code>win + R</code> 打开的运行中或在cmd中输入<code>services.msc</code></p>
<p>在名称中找到你的服务名称<code>ServiceName</code>，右键》属性》登录》钩选<code>允许服务与桌面交互</code>》确定</p>
<p>该部分本人没有测试过</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://docs.appdynamics.com/display/PRO39/Install+the+Standalone+Machine+Agent+as+a+Windows+Service" target="_blank" rel="noopener">https://docs.appdynamics.com/display/PRO39/Install+the+Standalone+Machine+Agent+as+a+Windows+Service</a></p>
</blockquote>
<blockquote>
<p><a href="https://blog.csdn.net/lys1220/java/article/details/90052262" target="_blank" rel="noopener">https://blog.csdn.net/lys1220/java/article/details/90052262</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>pve安装软件路由lede</title>
    <url>/2021/2021-06-16-pve-install-lede/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>把软件路由安在pve上，谁用谁知道<br><a id="more"></a>  </p>
<p>待续</p>
<p>。。。</p>
<p>这几天写</p>
]]></content>
      <categories>
        <category>dev</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>pve</tag>
        <tag>虚拟机</tag>
        <tag>dev</tag>
        <tag>kvm</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>pve从入门到放弃</title>
    <url>/2021/2021-06-16-pve-intro/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>用了好久的pve了，用了就回不去了</p>
<a id="more"></a>  
<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>全称 <code>Proxmox VE</code></p>
<blockquote>
<p>本文pve 版本为 <code>6.4</code></p>
</blockquote>
<p>不是啥新鲜玩意儿，好多玩鸡大佬都知道。</p>
<p>简单说就是，服务器上的虚拟机。</p>
<p><a href="https://www.proxmox.com/" target="_blank" rel="noopener">官网</a></p>
<p><a href="https://pve.proxmox.com/wiki/Main_Page" target="_blank" rel="noopener">wiki</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>现在没有截图，先写个大纲</p>
<h2 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h2><p>这里有几种方式，</p>
<ol>
<li><p>用u盘装</p>
<blockquote>
<p><a href="https://pve.proxmox.com/wiki/Prepare_Installation_Media#_prepare_a_usb_flash_drive_as_installation_medium" target="_blank" rel="noopener">https://pve.proxmox.com/wiki/Prepare_Installation_Media#_prepare_a_usb_flash_drive_as_installation_medium</a></p>
</blockquote>
</li>
<li><p>从已有的<code>Debian Linux</code>装</p>
<blockquote>
<p><a href="https://pve.proxmox.com/wiki/Installation" target="_blank" rel="noopener">https://pve.proxmox.com/wiki/Installation</a></p>
</blockquote>
<blockquote>
<p><a href="https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Buster" target="_blank" rel="noopener">https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Buster</a></p>
</blockquote>
</li>
</ol>
<p>大概参照官网装就行了，一般还是建议用u盘装一个全新的（已有的系统，鬼知道里面有什么见不得人的东西）</p>
<p>这里就只讲windows下制作启动U盘安装</p>
<p>官网推荐 <code>Rufus</code> 和 <code>Etcher</code>。但我，是用 win32diskimager 制作的，<a href="https://sourceforge.net/projects/win32diskimager/" target="_blank" rel="noopener">下载地址</a></p>
<p>补图</p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>然后，和平时安装软件那样，next …</p>
<p>到选硬盘时，可以指定硬盘，指定硬盘格式</p>
<p>其中 zfs 可以组<code>软raid</code>，有这方面需求的，可以考虑</p>
<p>然后就搞定了</p>
<p>待续 。。。。。。</p>
<h2 id="一些基本的配置"><a href="#一些基本的配置" class="headerlink" title="一些基本的配置"></a>一些基本的配置</h2><h3 id="安装自己熟悉的软件"><a href="#安装自己熟悉的软件" class="headerlink" title="安装自己熟悉的软件"></a>安装自己熟悉的软件</h3><p>pve 基于debian，用apt管理软件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt install -y vim</span><br></pre></td></tr></table></figure>
<h3 id="短按电源键不关机（防误触）"><a href="#短按电源键不关机（防误触）" class="headerlink" title="短按电源键不关机（防误触）"></a>短按电源键不关机（防误触）</h3><p>修改 <code>/etc/systemd/logind.conf</code> 的 <code>HandlePowerKey</code>的值为ignore</p>
<p>用一句shell命令就可以替换掉</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sed -E <span class="string">'s/.*HandlePowerKey.*/HandlePowerKey=ignore/'</span> /etc/systemd/logind.conf -i</span><br></pre></td></tr></table></figure>
<p>也可以直接用熟悉的文本编辑器修改，比如<code>vim</code></p>
<h3 id="改端口"><a href="#改端口" class="headerlink" title="改端口"></a>改端口</h3><p>查了资料，貌似是被写死的，目前比较简单的办法就是用<code>iptables</code>重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8006</span><br></pre></td></tr></table></figure>
<p>开机自动执行上面命令</p>
<p>方法很多，我筛选一下</p>
<ol>
<li>方法1<br> 用 iptables-save 保存当前iptables,再用ifup启动命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">iptables-save &gt; /etc/iptables.up.rules</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">'#!/bin/sh\n/sbin/iptables-restore &lt; /etc/iptables.up.rules'</span> &gt; /etc/network/<span class="keyword">if</span>-pre-up.d/iptables</span><br><span class="line">chmod +x /etc/network/<span class="keyword">if</span>-pre-up.d/iptables</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="关闭订阅提醒"><a href="#关闭订阅提醒" class="headerlink" title="关闭订阅提醒"></a>关闭订阅提醒</h3><p>这一步，我目前没有去找，以后再说。不重要</p>
<h3 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h3><p>解决<code>apt update</code>失败</p>
<blockquote>
<p><a href="https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Buster" target="_blank" rel="noopener">https://pve.proxmox.com/wiki/Install_Proxmox_VE_on_Debian_Buster</a></p>
</blockquote>
<p>原因是，默认安装的是企业版，是要收费的</p>
<p>而我们用的是免费版，so… </p>
<p>先删除企业源文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -f /etc/apt/sources.list.d/pve-enterprise.list</span><br></pre></td></tr></table></figure>
<p>添加源</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"deb http://download.proxmox.com/debian/pve buster pve-no-subscription"</span> &gt; /etc/apt/sources.list.d/pve-install-repo.list</span><br></pre></td></tr></table></figure>
<p>添加软件仓库的key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://download.proxmox.com/debian/proxmox-ve-release-6.x.gpg -O /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg</span><br><span class="line">chmod +r /etc/apt/trusted.gpg.d/proxmox-ve-release-6.x.gpg</span><br></pre></td></tr></table></figure>
<p>更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">apt update &amp;&amp; apt full-upgrade</span><br></pre></td></tr></table></figure>
<h3 id="开户硬件直通（pcie这类）"><a href="#开户硬件直通（pcie这类）" class="headerlink" title="开户硬件直通（pcie这类）"></a>开户硬件直通（pcie这类）</h3><p>诸如显卡，网卡这些。。。这里可以单独列个话题</p>
<h3 id="硬盘直通"><a href="#硬盘直通" class="headerlink" title="硬盘直通"></a>硬盘直通</h3><p>先查看机器上有哪些硬盘，查看他们的id</p>
<p>补图</p>
<p>命令为<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qm <span class="built_in">set</span> &lt;vm id&gt; &lt;硬盘总线/设备&gt; &lt;硬盘位置&gt;</span><br></pre></td></tr></table></figure></p>
<p>vm id：就是虚拟机的编号，即，要给哪个虚拟机加直通硬盘</p>
<p>硬盘总线/设备: 协议加编号，对应web界面加硬盘时的图，比如 -sata0、-scsi1</p>
<p>硬盘位置：linux下，硬盘的位置在 /dev/disk 目录下，建议用 by-id 或by-uuid</p>
<p>那么，举例：</p>
<ol>
<li><p>先列出所有硬盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls -l /dev/disk/by-id</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到你要的硬盘设备id(不是分区id，是设备id。即，名字后面不带有 -partx 的)</p>
</li>
<li><p>输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># </span></span><br><span class="line">qm <span class="built_in">set</span> 101 -scsi3 /dev/disk/by-id/xxxxxxxx</span><br></pre></td></tr></table></figure>
<p>即，给101号虚拟机，直通硬盘，到 scsi3</p>
</li>
</ol>
<h3 id="使用已有磁盘"><a href="#使用已有磁盘" class="headerlink" title="使用已有磁盘"></a>使用已有磁盘</h3><p>没试过</p>
<p>mv vm-100-disk-1.qcow2 /mnt/data/images/100<br>qm rescan</p>
<h3 id="现有磁盘扩容"><a href="#现有磁盘扩容" class="headerlink" title="现有磁盘扩容"></a>现有磁盘扩容</h3><p>没试过</p>
<p>qemu-img resize –preallocation=falloc ./vm-101-disk-1.qcow2 +50g</p>
]]></content>
      <categories>
        <category>dev</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>pve</tag>
        <tag>虚拟机</tag>
        <tag>dev</tag>
        <tag>kvm</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>pve-zfs更换硬盘</title>
    <url>/2021/2021-06-16-pve-zfs-replace-disk/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>组了个raid，更换硬盘<br><a id="more"></a>  </p>
<p>几年过后，硬盘应该换代了。不光是旧换新的问题，而且硬盘大小都可能不一样了。数据也会越来越多</p>
]]></content>
      <categories>
        <category>dev</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>pve</tag>
        <tag>虚拟机</tag>
        <tag>dev</tag>
        <tag>kvm</tag>
        <tag>vm</tag>
      </tags>
  </entry>
  <entry>
    <title>go-time-parse-error</title>
    <url>/2021/2021-07-02-go-time-parse-error/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h1 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h1><p>go time.Parse 有坑<br><a id="more"></a>  </p>
<p>比如这种不带时区的时间 <code>2021-07-02 12:13:14</code></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">	<span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	t, _ := time.Parse(<span class="string">"2006-01-02 15:04:05"</span>, <span class="string">"2021-07-02 12:13:14"</span>)</span><br><span class="line">	fmt.Println(t)</span><br><span class="line">	<span class="comment">// 2021-07-02 12:13:14 +0000 UTC</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回的是utc时间</p>
<p>可以根据自己程序中的时区，使用 <code>time.ParseInLocation</code> 来解决</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">	&quot;fmt&quot;</span><br><span class="line">	&quot;time&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">	t, _ := time.ParseInLocation(&quot;2006-01-02 15:04:05&quot;, &quot;2021-07-02 12:13:14&quot;, time.Local)</span><br><span class="line">	fmt.Println(t)</span><br><span class="line">	// 2021-07-02 12:13:14 +0800 CST</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>开始尝试使用docker-swarm之第一篇-hello world</title>
    <url>/2021/2021-11-12-try-using-docker-swarm-helloworld/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>尝试一下docker-swarm之hello world<br><a id="more"></a>  </p>
<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm/</a></p>
</blockquote>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># response following</span></span><br><span class="line">Error response from daemon: could not choose an IP address to advertise since this system has multiple addresses on different interfaces (10.0.2.15 on enp0s3 and 192.0.0.30 on enp0s8) - specify one with --advertise-addr</span><br></pre></td></tr></table></figure>
<p>由于有两个ip，那么，需要加上<code>--advertise-addr</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">docker swarm init --advertise-addr 192.0.0.30</span><br><span class="line"></span><br><span class="line"><span class="comment"># response following</span></span><br><span class="line"></span><br><span class="line">此设备的hostname为swarmmanger</span><br><span class="line"></span><br><span class="line">Swarm initialized: current node (xgjnkzvysal5fv7ugm1t5d7zr) is now a manager.</span><br><span class="line"></span><br><span class="line">To add a worker to this swarm, run the following <span class="built_in">command</span>:</span><br><span class="line"></span><br><span class="line">    docker swarm join --token SWMTKN-1-0mzmp1o6vufmqmpo8rvyrg2kzvlakj94gweg6drqunzhmvvmxr-6i80acmunj32z9xqw1jbbmeln 192.0.0.30:2377</span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run <span class="string">'docker swarm join-token manager'</span> and follow the instructions.</span><br></pre></td></tr></table></figure>
<p>此时，初始化节点成功。</p>
<p>根据提示，当前为manager节点，如果后续要加一个work节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-0mzmp1o6vufmqmpo8rvyrg2kzvlakj94gweg6drqunzhmvvmxr-6i80acmunj32z9xqw1jbbmeln 192.0.0.30:2377</span><br></pre></td></tr></table></figure>
<p>如要添加一个管理员，需执行<code>docker swarm join-token manager</code>打印出相关信息，再打印出的信息加入</p>
<h1 id="hello-world-1"><a href="#hello-world-1" class="headerlink" title="hello world"></a>hello world</h1><p>按基本法，运行一个<code>hello world</code>就叫学会了</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/swarm/swarm-tutorial/deploy-service/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/swarm-tutorial/deploy-service/</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># response following</span></span><br><span class="line">guwguxcvb3pnagtmy645xwd42</span><br><span class="line">overall progress: 1 out of 1 tasks</span><br><span class="line">1/1: running   [==================================================&gt;]</span><br><span class="line">verify: Service converged</span><br></pre></td></tr></table></figure>
<p>查看当前服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line"></span><br><span class="line"><span class="comment">#response following</span></span><br><span class="line">ID             NAME          MODE         REPLICAS   IMAGE           PORTS</span><br><span class="line">v7dfc1ktvm4o   helloworld    replicated   1/1        alpine:latest</span><br><span class="line">guwguxcvb3pn   helloworld1   replicated   1/1        alpine:latest</span><br></pre></td></tr></table></figure>
<p>直接用docker ps 也可以看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"><span class="comment">#response following</span></span><br><span class="line">CONTAINER ID   IMAGE           COMMAND             CREATED         STATUS         PORTS     NAMES</span><br><span class="line">ac9bfeb74374   alpine:latest   <span class="string">"ping docker.com"</span>   3 minutes ago   Up 3 minutes             helloworld.1.27sb11llxgtesl88dxc4gqu72</span><br><span class="line">ff50e95a964d   alpine:latest   <span class="string">"ping baidu.com"</span>    3 minutes ago   Up 3 minutes             helloworld1.1.wgphxyqcc8xrrdv2zco8fc1lt</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>swarm</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>mobaxtrem在ssh连上服务器后输命令卡顿的问题</title>
    <url>/2021/2021-11-13-mobaxtrem-gets-stuck/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>突然发现mobaxterm在敲命令行时卡顿<br><a id="more"></a>  </p>
<h1 id="mobaxterm在敲命令行时卡顿"><a href="#mobaxterm在敲命令行时卡顿" class="headerlink" title="mobaxterm在敲命令行时卡顿"></a>mobaxterm在敲命令行时卡顿</h1><blockquote>
<p><a href="https://blog.csdn.net/qq_16583855/article/details/124868362" target="_blank" rel="noopener">https://blog.csdn.net/qq_16583855/article/details/124868362</a></p>
</blockquote>
<p>用mobaxterm连着ssh，在敲命令行时，突然卡住，什么也做不了。要过很久才能继续敲下一个命令</p>
<p>开始以为网络问题，于是直接用powershell试，发现没有问题</p>
<p>发现是x server功能问题</p>
<p>右上角有个 <code>x-server</code>的按钮，此时为激活状态。单击它一下，变为非激活状态就再试一下就不卡了</p>
<p>另外，默认情况下，是开启此软件时，会自动打开该功能，可以配置一下关闭此功能</p>
<p>在顶部菜单》Settings》Configuration》X11里，把<br><code>Automatically start X server at MobaXterm start up</code><br>前的钩去掉即可</p>
<p>引用自</p>
<blockquote>
<p><a href="https://blog.csdn.net/qq_16583855/article/details/124868362" target="_blank" rel="noopener">https://blog.csdn.net/qq_16583855/article/details/124868362</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>ssh</tag>
        <tag>develop</tag>
        <tag>mobaxtrem</tag>
        <tag>tools</tag>
        <tag>issue</tag>
      </tags>
  </entry>
  <entry>
    <title>开始尝试使用swarm之第二篇-节点类型</title>
    <url>/2021/2021-11-13-try-using-docker-swarm-node/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>尝试一下docker-swarm之节点类型的特点区分<br><a id="more"></a>  </p>
<h1 id="再加两个个虚拟机vm以准备"><a href="#再加两个个虚拟机vm以准备" class="headerlink" title="再加两个个虚拟机vm以准备"></a>再加两个个虚拟机vm以准备</h1><p>接上文，原本有一个管理节点。现新增两个vm，分别加入原管理节点。一共三个node</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>将vm的hostname设为 <code>swarmworker1</code>和<code>swarmworker2</code>，hostname 很重要，以后会用</p>
<p>直接作为worker加入前面建立的节点，输入前面初始化节点时出现的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-0mzmp1o6vufmqmpo8rvyrg2kzvlakj94gweg6drqunzhmvvmxr-6i80acmunj32z9xqw1jbbmeln 192.0.0.30:2377</span><br><span class="line"><span class="comment"># This node joined a swarm as a worker.</span></span><br><span class="line"></span><br><span class="line">docker node  ls</span><br><span class="line"><span class="comment"># ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span></span><br><span class="line"><span class="comment"># xgjnkzvysal5fv7ugm1t5d7zr *   swarmmanger    Ready     Active         Leader           20.10.21</span></span><br><span class="line"><span class="comment"># e3ye8fep0dr3xkxrzdxz8wzjw     swarmworker1   Ready     Active                          20.10.21</span></span><br><span class="line"><span class="comment"># i5vz5saiixnx82j9hpy4d5wmc     swarmworker2   Ready     Active                          20.10.21</span></span><br></pre></td></tr></table></figure>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><p>什么是task</p>
<p>大意就是服务的执行者，一个服务通过多个task来执行服务</p>
<p>swarm的task之于service相当于：</p>
<p>面向对像的object之于class；</p>
<p>docker的container之于images；</p>
<p>一个服务可有多个task，并且通过内部算法，部署在一个或多个node上</p>
<p>处理各类任务的，也是这些task</p>
<p>设置task个数的参数为<code>replicas</code>，即复制品或副本…</p>
<p>那么我们来试一下</p>
<h1 id="管理节点与工作节点的职能"><a href="#管理节点与工作节点的职能" class="headerlink" title="管理节点与工作节点的职能"></a>管理节点与工作节点的职能</h1><p>现在，作为工作节点，我们来测试一下能不能管理创建服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 1 --name hello_world_in_worker1 alpine ping docker.com</span><br><span class="line"><span class="comment"># response</span></span><br><span class="line"><span class="comment">#Error response from daemon: This node is not a swarm manager. Worker nodes can't be used to view or modify cluster state. Please run this command on a manager node or promote the current node to a manager.</span></span><br></pre></td></tr></table></figure>
<p>非管理节点不能干这些事，想要操作</p>
<p>要么在管理节点运行此命令</p>
<p>要么在管理节点升级此工作节点为管理节点</p>
<h2 id="尝试升级，在当前的管理节点运行"><a href="#尝试升级，在当前的管理节点运行" class="headerlink" title="尝试升级，在当前的管理节点运行"></a>尝试升级，在当前的管理节点运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node promote  swarmworker1</span><br><span class="line"><span class="comment"># Node swarmworker1 promoted to a manager in the swarm.</span></span><br><span class="line"></span><br><span class="line">docker node promote  swarmworker2</span><br><span class="line"><span class="comment"># Node swarmworker2 promoted to a manager in the swarm.</span></span><br></pre></td></tr></table></figure>
<p>再去 swarmworker1查看节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node  ls</span><br><span class="line"><span class="comment"># ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span></span><br><span class="line"><span class="comment"># xgjnkzvysal5fv7ugm1t5d7zr *   swarmmanger    Ready     Active         Leader           20.10.21</span></span><br><span class="line"><span class="comment"># e3ye8fep0dr3xkxrzdxz8wzjw     swarmworker1   Ready     Active         Reachable        20.10.21</span></span><br><span class="line"><span class="comment"># i5vz5saiixnx82j9hpy4d5wmc     swarmworker2   Ready     Active         Reachable        20.10.21</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看当前节点的服务的task</span></span><br><span class="line">docker node ps</span><br><span class="line"><span class="comment">#ID        NAME      IMAGE     NODE      DESIRED STATE   CURRENT STATE   ERROR     PORTS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看swarmmanger节点的服务的task</span></span><br><span class="line">docker node ps swarmmanger</span><br><span class="line"><span class="comment"># ID             NAME                IMAGE           NODE          DESIRED STATE   CURRENT STATE            ERROR                              PORTS</span></span><br><span class="line"><span class="comment"># mrf42qoc5b7j   helloworld1.1       alpine:latest   swarmmanger   Running         Running 42 minutes ago</span></span><br><span class="line"><span class="comment"># wgphxyqcc8xr    \_ helloworld1.1   alpine:latest   swarmmanger   Shutdown        Failed 42 minutes ago    "No such container: helloworld…"</span></span><br><span class="line"><span class="comment"># tt34jmkj65l6    \_ helloworld1.1   alpine:latest   swarmmanger   Shutdown        Failed 2 hours ago       "No such container: helloworld…"</span></span><br><span class="line"><span class="comment"># lqp1x83vycb6   helloworld.1        alpine:latest   swarmmanger   Running         Running 42 minutes ago</span></span><br><span class="line"><span class="comment"># 27sb11llxgte    \_ helloworld.1    alpine:latest   swarmmanger   Shutdown        Failed 42 minutes ago    "No such container: helloworld…"</span></span><br><span class="line"><span class="comment"># y441dw76u89o    \_ helloworld.1    alpine:latest   swarmmanger   Shutdown        Failed 2 hours ago       "No such container: helloworld…"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 直接查看指定服务的task</span></span><br><span class="line">docker service ps helloworld</span><br><span class="line"><span class="comment"># ID             NAME               IMAGE           NODE          DESIRED STATE   CURRENT STATE            ERROR                              PORTS</span></span><br><span class="line"><span class="comment"># lqp1x83vycb6   helloworld.1       alpine:latest   swarmmanger   Running         Running 44 minutes ago</span></span><br><span class="line"><span class="comment"># 27sb11llxgte    \_ helloworld.1   alpine:latest   swarmmanger   Shutdown        Failed 44 minutes ago    "No such container: helloworld…"</span></span><br><span class="line"><span class="comment"># y441dw76u89o    \_ helloworld.1   alpine:latest   swarmmanger   Shutdown        Failed 2 hours ago       "No such container: helloworld…"</span></span><br></pre></td></tr></table></figure>
<p>另外，这个task貌似不能直接删。可以用update命令来限制单个服务的历史task的个数。超了应该会删</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm update --task-history-limit 5</span><br></pre></td></tr></table></figure>
<p>至此，本节点已升级成管理节点，试一下能不能创建服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 在本节点（swarmworker1）运行以下命令</span></span><br><span class="line">docker service create --replicas 1 --name helloworld alpine ping docker.com</span><br><span class="line"><span class="comment"># 56n5w9g6r6lu7xr8irzi93i9x</span></span><br><span class="line"><span class="comment"># overall progress: 1 out of 1 tasks</span></span><br><span class="line"><span class="comment"># 1/1: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## ps 一下，发现创建成功，但是却运行在swarmmanger节点上</span></span><br><span class="line">docker service ps helloworld</span><br><span class="line"><span class="comment"># ID             NAME           IMAGE           NODE          DESIRED STATE   CURRENT STATE            ERROR     PORTS</span></span><br><span class="line"><span class="comment"># t31vj9qeausx   helloworld.1   alpine:latest   swarmmanger   Running         Running 18 seconds ago</span></span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>管理节点和工作节点都能运行task</p>
<p>工作节点不能操作，甚至不能查，只能用<code>docker ps</code>等这种本地命令来查看容器的运行情况</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>swarm</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>try-using-docker-swarm-secrets</title>
    <url>/2021/2021-11-13-try-using-docker-swarm-secrets/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>尝试一下docker-swarm之secrets<br><a id="more"></a>  </p>
<h1 id="很重要的功能，但使用起来很简单"><a href="#很重要的功能，但使用起来很简单" class="headerlink" title="很重要的功能，但使用起来很简单"></a>很重要的功能，但使用起来很简单</h1><blockquote>
<p><a href="https://docs.docker.com/engine/swarm/secrets/" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/secrets/</a></p>
</blockquote>
<h1 id="new"><a href="#new" class="headerlink" title="new"></a>new</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"root"</span> | docker secret create mysql57_root_password -</span><br><span class="line"><span class="comment"># daeeef4cskv7wxqq76reh4qmt</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker secret ls</span><br><span class="line"><span class="comment"># ID                          NAME                    DRIVER    CREATED         UPDATED</span></span><br><span class="line"><span class="comment"># daeeef4cskv7wxqq76reh4qmt   mysql57_root_password             4 seconds ago   4 seconds ago</span></span><br><span class="line"><span class="comment"># root@swarmworker1:~# docker service rm hello_without_constraint</span></span><br><span class="line"><span class="comment"># hello_without_constraint</span></span><br></pre></td></tr></table></figure>
<h1 id="新建一个带secret的service"><a href="#新建一个带secret的service" class="headerlink" title="新建一个带secret的service"></a>新建一个带secret的service</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 2 --secret mysql57_root_password --name hello_with_secret alpine ping docker.com</span><br></pre></td></tr></table></figure>
<p>直接通过条件打印出<code>mysql57_root_password</code><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">exec</span> `docker ps --filter name=hello_with_secret -q` cat /run/secrets/mysql57_root_password</span><br><span class="line"><span class="comment"># root</span></span><br></pre></td></tr></table></figure></p>
<h1 id="新建一个带secret的service并且改变secret容器中的文件位置"><a href="#新建一个带secret的service并且改变secret容器中的文件位置" class="headerlink" title="新建一个带secret的service并且改变secret容器中的文件位置"></a>新建一个带secret的service并且改变secret容器中的文件位置</h1><p>把<code>--secret</code>写成这种格式 <code>source=mysql57_root_password,target=root_password</code></p>
<p>source 和 target 很好理解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 2 --secret <span class="built_in">source</span>=mysql57_root_password,target=root_password --name hello_with_secret2 alpine ping docker.com</span><br><span class="line"><span class="comment"># nod77d45cldct59wf20kvkmlc</span></span><br><span class="line"><span class="comment"># overall progress: 2 out of 2 tasks</span></span><br><span class="line"><span class="comment"># 1/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># 2/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br><span class="line"></span><br><span class="line">docker container <span class="built_in">exec</span> `docker ps --filter name=hello_with_secret2 -q` cat /run/secrets/root_password</span><br><span class="line"><span class="comment"># root</span></span><br></pre></td></tr></table></figure>
<h1 id="尝试删除secret"><a href="#尝试删除secret" class="headerlink" title="尝试删除secret"></a>尝试删除secret</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker secret rm mysql57_root_password</span><br><span class="line"><span class="comment"># Error response from daemon: rpc error: code = InvalidArgument desc = secret 'mysql57_root_password' is in use by the following service: hello_with_secret</span></span><br></pre></td></tr></table></figure>
<p>由于有容器在使用，所以删除失败。那么，我们可以先让容器不再使用该secret</p>
<p>update 命令，后面再说，可以更改一个service的几乎所有属性。</p>
<p>这里用update命令来删除该service对密钥 mysql57_root_password 的使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service update --secret-rm mysql57_root_password hello_with_secret</span><br><span class="line"><span class="comment"># hello_with_secret</span></span><br><span class="line"><span class="comment"># overall progress: 2 out of 2 tasks</span></span><br><span class="line"><span class="comment"># 1/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># 2/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 此时再运行一次查看secret</span></span><br><span class="line">docker container <span class="built_in">exec</span> `docker ps --filter name=hello_with_secret -q` cat /run/secrets/mysql57_root_password</span><br><span class="line"><span class="comment"># cat: can't open '/run/secrets/mysql57_root_password': No such file or directory</span></span><br></pre></td></tr></table></figure>
<p>此时即可以删除secset了mysql57_root_password</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker secret rm mysql57_root_password</span><br><span class="line"><span class="comment"># mysql57_root_password</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 同时再ls一下，没了</span></span><br><span class="line">docker secret ls</span><br><span class="line"><span class="comment"># ID        NAME      DRIVER    CREATED   UPDATED</span></span><br></pre></td></tr></table></figure>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>就是当一个稍微私密一点的env用</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>swarm</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>use-loon</title>
    <url>/2022/2022-02-18-use-loon/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>暂无</p>
<a id="more"></a>  
<p>content of this post</p>
<a href="/2022/2022-02-18-use-loon/openai.plugin" title="OpenAi Plugin">OpenAi Plugin</a>
<a href="/2022/2022-02-18-use-loon/openai_rule.list" title="OpenAi Rule">OpenAi Rule</a>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>debian disable restart on ctrl alt del</title>
    <url>/2022/2022-06-16-debian-disable-restart-on-ctrl-alt-del/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>debian默认情况下，在登录界面按下ctrl + alt + del 会重启，为防止误操作，在生产环境要把它禁止掉<br><a id="more"></a>  </p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>三句命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i 's/^.*CtrlAltDelBurstAction=.*$/CtrlAltDelBurstAction=none/g' /etc/systemd/system.conf</span><br><span class="line"></span><br><span class="line">sudo systemctl mask ctrl-alt-del.target</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h1 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h1><h2 id="之前的情况"><a href="#之前的情况" class="headerlink" title="之前的情况"></a>之前的情况</h2><p>遇到问题就去搜</p>
<p>搜出的结果大概是以一个空的ctrl-alt-del.target (/etc/systemd/system/ctrl-alt-del.target) 覆盖掉原有的ctrl-alt-del.target (/usr/lib/systemd/system/ctrl-alt-del.target)</p>
<p>操作也很简单，两句命令就搞定了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo systemctl mask ctrl-alt-del.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">输出 Created symlink /etc/systemd/system/ctrl-alt-del.target → /dev/null.</span></span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<p>事实上，我之前也是这么做的，当然也能解决问题</p>
<p>直到有一天，有个人一直连续按了 ctrl+alt+del n下</p>
<p>系统大致输出了以下内容后，重启了…</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">acpi - message at shutdown: watchdog did not stop</span><br></pre></td></tr></table></figure>
<p>我试了一下，应该是按8下就会出现上述问题</p>
<h2 id="新的情况"><a href="#新的情况" class="headerlink" title="新的情况"></a>新的情况</h2><p>然后，又找到了另一个解决方法</p>
<p>将 <code>/etc/systemd/system.conf</code> 里的</p>
<p><code>CtrlAltDelBurstAction</code>项的值改成 <code>none</code></p>
<blockquote>
<p><a href="https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/2021-03-04/finding/V-230531" target="_blank" rel="noopener">https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/2021-03-04/finding/V-230531</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo sed -i 's/^.*CtrlAltDelBurstAction=.*$/CtrlAltDelBurstAction=none/g' /etc/systemd/system.conf</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>用choco来管理一些常见的软件</title>
    <url>/2022/2022-11-10-use-choco/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>用choco来管理windows的一些软件，方便整理或写到一个脚本里。偶尔重装一次，也方便迅速搭好自己熟悉的环境<br><a id="more"></a>  </p>
<h1 id="choco介绍"><a href="#choco介绍" class="headerlink" title="choco介绍"></a>choco介绍</h1><p>官网</p>
<blockquote>
<p><a href="https://chocolatey.org/" target="_blank" rel="noopener">https://chocolatey.org/</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>理论上只用官网提供的一句命令就搞定，参见官网</p>
<blockquote>
<p><a href="https://chocolatey.org/install" target="_blank" rel="noopener">https://chocolatey.org/install</a></p>
</blockquote>
<p>但是一般情况要做一些配置</p>
<h2 id="常用的安装"><a href="#常用的安装" class="headerlink" title="常用的安装"></a>常用的安装</h2><p>此为我本人常用的方式</p>
<h3 id="0-以管理员打开powershell"><a href="#0-以管理员打开powershell" class="headerlink" title="0. 以管理员打开powershell"></a>0. 以管理员打开powershell</h3><p>这个应该不用多说吧</p>
<h3 id="1-修改系统默认的安装路径"><a href="#1-修改系统默认的安装路径" class="headerlink" title="1. 修改系统默认的安装路径"></a>1. 修改系统默认的安装路径</h3><p>比如我要默认存放到<code>D</code>盘的 <code>Program Files</code> 下</p>
<p>在<code>powershell</code>里运行<code>regedit</code>打开<code>注册表编辑器</code></p>
<p>修改 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion</code> 下的<code>ProgramFilesDir</code>和<code>ProgramFilesDir (x86)</code>的值</p>
<p><code>ProgramFilesDir</code>的值改为：<code>D:\Program Files</code></p>
<p><code>ProgramFilesDir (x86)</code>的值改为：<code>D:\Program Files (x86)</code></p>
<p>改完后关闭<code>注册表编辑器</code></p>
<h3 id="2-以命令行安装choco"><a href="#2-以命令行安装choco" class="headerlink" title="2. 以命令行安装choco"></a>2. 以命令行安装choco</h3><p>在<code>powershell</code>中依次输入命令。</p>
<p>首字符为 # 的不输入……</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 根据自身情况改变安装路径，可跳过</span></span><br><span class="line"><span class="variable">$env:ChocolateyInstall</span>=<span class="string">"d:\choco_application"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 根据自身网络情况设置http代理，这步好像没啥用，目前不设也可以访问速度也不慢，可跳过</span></span><br><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">"http://localhost:8118"</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">"http://localhost:8118"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装，此行命令出自官方。https://chocolatey.org/install</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="operator">-bor</span> <span class="number">3072</span>; iex ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://community.chocolatey.org/install.ps1'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 正常情况，已经安装好。可试一下，输入choco，显示版本号则表示正常</span></span><br><span class="line">choco</span><br><span class="line"><span class="comment"># Chocolatey v1.2.0</span></span><br><span class="line"><span class="comment"># Please run 'choco -?' or 'choco &lt;command&gt; -?' for help menu.</span></span><br></pre></td></tr></table></figure>
<p>到此，choco 就安装完成了，后面不用看了，啰嗦。。。。。。</p>
<p>可以愉快的install各种软件了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install <span class="literal">-y</span> virtualbox</span><br></pre></td></tr></table></figure>
<h2 id="找安装包"><a href="#找安装包" class="headerlink" title="找安装包"></a>找安装包</h2><p>可以去官方仓库</p>
<blockquote>
<p><a href="https://community.chocolatey.org/packages" target="_blank" rel="noopener">https://community.chocolatey.org/packages</a></p>
</blockquote>
<p>或者在命令行</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco find virtualbox</span><br></pre></td></tr></table></figure>
<h2 id="常用的环境变量"><a href="#常用的环境变量" class="headerlink" title="常用的环境变量"></a>常用的环境变量</h2><p>可以在系统的高级设置里面设置，也可以用命令行<code>powershell</code>设置</p>
<h3 id="ChocolateyInstall"><a href="#ChocolateyInstall" class="headerlink" title="ChocolateyInstall"></a>ChocolateyInstall</h3><p>要安装的位置，包括choco本身和choco安装的软件</p>
<p>默认为  <code>c:\tools</code></p>
<p>如设成  <code>D:\ChocoApp</code></p>
<h3 id="http-proxy-和-https-proxy"><a href="#http-proxy-和-https-proxy" class="headerlink" title="http_proxy 和 https_proxy"></a>http_proxy 和 https_proxy</h3><p>http代理，你懂的</p>
<h2 id="安装包安装位置修改"><a href="#安装包安装位置修改" class="headerlink" title="安装包安装位置修改"></a>安装包安装位置修改</h2><p>除了choco的安装位置外，choco还有可能安装的是软件的安装包，choco安装完成后，还要再解包</p>
<p>这里有点绕，就是绿色软件和安装包的问题。</p>
<p>即修改windows的默认安装位置</p>
<p>默认位置为</p>
<p>C:\Program Files</p>
<p>C:\Program Files (x86)</p>
<p><code>ChocolateyInstall</code>相当于管的是绿色软件的目录，而本栏是改安装包的的安装目录</p>
<p>现在开始修改：</p>
<p>比如我要默认存放到<code>E</code>盘，打开注册表，把 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion</code> 下的：</p>
<p><code>ProgramFilesDir</code>的值改为：E:\Program Files</p>
<p><code>ProgramFilesDir (x86)</code>的值改为：E:\Program Files (x86)</p>
<p>另外，还有一种方法修改</p>
<p><a href="https://docs.chocolatey.org/en-us/getting-started#overriding-default-install-directory-or-other-advanced-install-concepts" target="_blank" rel="noopener">参见官网说明</a></p>
<h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>理论上只用官网提供的一句命令就搞定</p>
<blockquote>
<p><a href="https://chocolatey.org/install" target="_blank" rel="noopener">https://chocolatey.org/install</a></p>
</blockquote>
<p>但是我们一般要先改安装路径，或者使用代理，所以先设环境变量</p>
<p>步骤如下</p>
<p>以<code>管理员</code>打开<code>powershell</code></p>
<p>依次输入以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 根据自身情况改变安装路径，可跳过</span></span><br><span class="line"><span class="variable">$env:ChocolateyInstall</span>=<span class="string">"d:\choco_application"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 根据自身网络情况设置代理，可路过</span></span><br><span class="line"><span class="variable">$env:http_proxy</span>=<span class="string">"http://localhost:8118"</span></span><br><span class="line"><span class="variable">$env:https_proxy</span>=<span class="string">"http://localhost:8118"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 安装，此行命令出自官方。https://chocolatey.org/install</span></span><br><span class="line"><span class="built_in">Set-ExecutionPolicy</span> Bypass <span class="literal">-Scope</span> <span class="keyword">Process</span> <span class="literal">-Force</span>; [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol = [<span class="type">System.Net.ServicePointManager</span>]::SecurityProtocol <span class="operator">-bor</span> <span class="number">3072</span>; iex ((<span class="built_in">New-Object</span> System.Net.WebClient).DownloadString(<span class="string">'https://community.chocolatey.org/install.ps1'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 正常情况，已经安装好。可试一下，输入choco，显示版本号则表示正常</span></span><br><span class="line"></span><br><span class="line">choco</span><br><span class="line"><span class="comment"># Chocolatey v1.2.0</span></span><br><span class="line"><span class="comment"># Please run 'choco -?' or 'choco &lt;command&gt; -?' for help menu.</span></span><br></pre></td></tr></table></figure>
<h1 id="安装app列表"><a href="#安装app列表" class="headerlink" title="安装app列表"></a>安装app列表</h1><blockquote>
<p>ps, 以下的app，可以一次性写完，比如 choco install -y docker-cli everything ….</p>
</blockquote>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">choco install <span class="literal">-y</span> <span class="literal">-y</span> anydesk</span><br><span class="line">choco install <span class="literal">-y</span> virtualbox</span><br><span class="line">choco install <span class="literal">-y</span> docker<span class="literal">-cli</span></span><br><span class="line">choco install <span class="literal">-y</span> openvpn<span class="literal">-connect</span></span><br><span class="line">choco install <span class="literal">-y</span> everything</span><br><span class="line">choco install <span class="literal">-y</span> vscode</span><br><span class="line">choco install <span class="literal">-y</span> redis<span class="literal">-desktop</span><span class="literal">-manager</span></span><br><span class="line">choco install <span class="literal">-y</span> win<span class="literal">-rdm</span></span><br><span class="line">choco install <span class="literal">-y</span> emeditor</span><br><span class="line">choco install <span class="literal">-y</span> spotify</span><br><span class="line">choco install <span class="literal">-y</span> meld</span><br><span class="line">choco install <span class="literal">-y</span> postman</span><br><span class="line">choco install <span class="literal">-y</span> git</span><br><span class="line">choco install <span class="literal">-y</span> virt<span class="literal">-viewer</span></span><br><span class="line">choco install <span class="literal">-y</span> potplayer</span><br><span class="line">choco install <span class="literal">-y</span> <span class="number">7</span>zip</span><br><span class="line">choco install <span class="literal">-y</span> cpu<span class="literal">-z</span></span><br><span class="line">choco install <span class="literal">-y</span> adb</span><br><span class="line">choco install <span class="literal">-y</span> coretemp</span><br><span class="line">choco install <span class="literal">-y</span> dismplusplus</span><br><span class="line">choco install <span class="literal">-y</span> mobaxterm</span><br><span class="line">choco install <span class="literal">-y</span> vcredist2015</span><br><span class="line">choco install <span class="literal">-y</span> vcredistxxxx</span><br><span class="line">choco install <span class="literal">-y</span> mobaxterm <span class="literal">-ia</span> <span class="string">"'/D=D:\SomeDirectory\somebody\npp'"</span></span><br><span class="line">choco install <span class="literal">-y</span> mobaxterm <span class="literal">-ia</span> <span class="string">"'/D=D:\Program Files (x86)\Mobatek\MobaXterm'"</span></span><br><span class="line">choco install <span class="literal">-y</span> rdm</span><br><span class="line">choco install <span class="literal">-y</span> imageglass</span><br><span class="line">choco install <span class="literal">-y</span> rclone</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>dev</tag>
        <tag>choco</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 lstc 上不能通过smb连omv的问题</title>
    <url>/2022/2022-11-21-smb-on-win10-lstc/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>解决win10 lstc上不能用smb(omv)的问题，如果其它情况的smb客户端不能连服务器的，可以参考<br><a id="more"></a>  </p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>总之就是连不上，没注意看报错信息和日志</p>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>我大致改了两个地方</p>
<h2 id="启用smb"><a href="#启用smb" class="headerlink" title="启用smb"></a>启用smb</h2><p>我开始想到可能是没打开这个功能</p>
<p>打开资源管理器（或任意一个文件夹，或我的电脑），在地址栏输入 <code>控制面板\程序\程序和功能</code></p>
<p>点击左侧<code>启用或关闭windows功能</code></p>
<p>找到 <code>smb</code>开头的选项，钩选</p>
<p>单这一步完成后，会重启，并且没用。哈哈哈哈</p>
<h2 id="改注册表"><a href="#改注册表" class="headerlink" title="改注册表"></a>改注册表</h2><p>参考：</p>
<blockquote>
<p><a href="https://forum.openmediavault.org/index.php?thread/45178-windows-10-ltsc-and-omv/" target="_blank" rel="noopener">https://forum.openmediavault.org/index.php?thread/45178-windows-10-ltsc-and-omv/</a></p>
</blockquote>
<ol>
<li><p>打开注册表编辑器</p>
<p> 可以在开始菜单中输入 <code>regedit</code></p>
<p> 可以按 win+r运行 <code>regedit</code></p>
<p> 可以在powershell中输入 <code>regedit</code></p>
</li>
<li><p>定位到 <code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\LanmanWorkstation\Parameters</code></p>
<p> 把这一段复制下来</p>
<p> 在注册表编辑器的顶部地址栏粘贴</p>
</li>
<li><p>修改右侧<code>AllowInsecureGuestAuth</code>的值为1</p>
<p> 如果右侧没有，可以新建一个</p>
<p> 类型为 Dword 32位</p>
<p> 双击，然后将值改为<code>1</code></p>
</li>
<li><p>应该就正常了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>question</category>
      </categories>
      <tags>
        <tag>omv</tag>
        <tag>smb</tag>
        <tag>win10 lstc</tag>
      </tags>
  </entry>
  <entry>
    <title>使用apt-offline来更新系统</title>
    <url>/2022/2022-12-22-use-apt-offline/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>对于有些不能上网的机器来说，要安装apt仓库的软件又多了个选择。apt-offline<br><a id="more"></a>  </p>
<p>准备写，不慌</p>
<p>准备写，不慌</p>
<p>准备写，不慌</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
        <tag>develop</tag>
        <tag>apt</tag>
      </tags>
  </entry>
  <entry>
    <title>win10上使用指定的ntp地址同步时间</title>
    <url>/2023/2023-01-11-add-ntp-address-on-windows10/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>内网有ntp的需求，搭一个ntp服务。给win10 增加一个ntp服务器地址<br><a id="more"></a>  </p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>我电脑为win10专业版，如发现有不一样，请去网上搜索你的版本对应的操作</p>
<h1 id="大致情况只用一句命令就可以了"><a href="#大致情况只用一句命令就可以了" class="headerlink" title="大致情况只用一句命令就可以了"></a>大致情况只用一句命令就可以了</h1><p>注意，需要管理员权限</p>
<p>将以下命令中的<code>SPACE_LIMITED_NTP_SERVERS</code>改成ntp服务器地址就可以了</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">w32tm /config /update /manualpeerlist:SPACE_LIMITED_NTP_SERVERS /syncfromflags:manual /reliable:yes</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>微软官网的，不深究可以用不看</p>
<blockquote>
<p><a href="https://learn.microsoft.com/en-us/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/windows-server/networking/windows-time-service/windows-time-service-tools-and-settings</a></p>
</blockquote>
<p>Configure NTP on Windows Server</p>
<blockquote>
<p><a href="https://docs.vmware.com/en/VMware-Horizon-DaaS/services/horizondaas.install900/GUID-AEC90E5F-C5B6-447F-B03F-C1060C405E1F.html" target="_blank" rel="noopener">https://docs.vmware.com/en/VMware-Horizon-DaaS/services/horizondaas.install900/GUID-AEC90E5F-C5B6-447F-B03F-C1060C405E1F.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>windows10</tag>
        <tag>ntp</tag>
      </tags>
  </entry>
  <entry>
    <title>win10上搭ntp服务</title>
    <url>/2023/2023-01-11-ntp-server-on-windows10/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>内网有ntp的需求，搭一个ntp服务</p>
<a id="more"></a>  
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>我电脑为win10专业版，如发现有不一样，请去网上搜索你的版本对应的操作</p>
<h1 id="修改注册表"><a href="#修改注册表" class="headerlink" title="修改注册表"></a>修改注册表</h1><h2 id="打开注册表编辑器"><a href="#打开注册表编辑器" class="headerlink" title="打开注册表编辑器"></a>打开注册表编辑器</h2><p>win10系统直接在系统的搜索框输入<code>regedit</code>就弹出来相关程序了</p>
<p>还可以在<code>运行</code>、<code>cmd</code>、<code>powershell</code>里面直接输入</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">regedit</span><br></pre></td></tr></table></figure>
<h2 id="修改位置1"><a href="#修改位置1" class="headerlink" title="修改位置1"></a>修改位置1</h2><p><code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Config</code>的<code>AnnounceFlags</code></p>
<p>有情提示，上面那一串路径，是可以复制下来，粘贴在注册表编辑器的地址栏的，注意地址栏上的<code>计算机</code>三个字别覆盖了</p>
<p>我电脑上 <code>AnnounceFlags</code>的值为<code>10</code></p>
<p>现修改 <code>AnnounceFlags</code>的值为<code>5</code></p>
<h2 id="修改位置2"><a href="#修改位置2" class="headerlink" title="修改位置2"></a>修改位置2</h2><p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\Parameters</code>的<code>Type</code></p>
<p>我电脑上 <code>AnnounceFlags</code>的值为<code>NTP</code></p>
<p>现修改 <code>AnnounceFlags</code>的值为<code>NTP</code></p>
<p>这步看来不用改</p>
<h2 id="修改位置3"><a href="#修改位置3" class="headerlink" title="修改位置3"></a>修改位置3</h2><p><code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer</code>的<code>Enabled</code></p>
<p>我电脑上 <code>Enabled</code>的值为<code>0</code></p>
<p>现修改 <code>Enabled</code>的值为<code>1</code></p>
<h1 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h1><p>以下两种方式，二选一</p>
<h2 id="使用powershell"><a href="#使用powershell" class="headerlink" title="使用powershell"></a>使用powershell</h2><p>以管理员身份打开<code>powershell</code>（左下角开始点鼠标右键，选<code>Windows Powershell(管理员)</code>）</p>
<p>依次输入以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Start-Service</span> <span class="literal">-Name</span> W32Time</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-Service</span> <span class="literal">-Name</span> W32Time <span class="literal">-StartupType</span> Automatic</span><br><span class="line"></span><br><span class="line"><span class="built_in">Get-Service</span> W32Time | <span class="built_in">Select-Object</span> <span class="literal">-Property</span> Status, Name, DisplayName, StartType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果显示以下，则表示以正常运行并且开机自动运行</span></span><br><span class="line"><span class="comment">#  Status Name    DisplayName  StartType</span></span><br><span class="line"><span class="comment">#  ------ ----    -----------  ---------</span></span><br><span class="line"><span class="comment"># Running W32Time Windows Time Automatic</span></span><br></pre></td></tr></table></figure>
<h2 id="使用点击方式"><a href="#使用点击方式" class="headerlink" title="使用点击方式"></a>使用点击方式</h2><p>在运行<code>（WIN+R快捷键）</code>或<code>windows搜索框</code>或<code>cmd</code>或<code>powershell</code>等中输入<code>services.msc</code>以打开服务界面</p>
<p>找到Windows Time并双击</p>
<p>点击下面的启动，确保能正常启动</p>
<p>设置启用类型为<code>自动</code>后，然后点击确定</p>
<!-- # 启动服务2

net start w32time -->
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>测试方式有很多，写一种简单通用的方法，使用<code>ntp-check</code></p>
<p><a href="https://www.ntp-time-server.com/ntp-software/ntp-check.html" target="_blank" rel="noopener">点击进入官网</a></p>
<p>为了方便，我本人直接把它下载下来了，也可以直接在这里下载 <a href="/2023/2023-01-11-ntp-server-on-windows10/ntp-check.exe" title="下载地址">下载地址</a></p>
<p>ntp-check是一个简单的支持ntp的客户端。操作起来也很简单，只需要输入ntp服务的地址，然后点击test就可以了</p>
<p>有时一次测试不成功，可以多点几次</p>
<p>测试本机，ip可以以输入<code>127.0.0.1</code></p>
<p>局网内测试，则输入本机在局域网内的ip，如果测试失败，可以考虑防火域问题</p>
<p>也可以</p>
<h1 id="提供一些常用的ntp服务器"><a href="#提供一些常用的ntp服务器" class="headerlink" title="提供一些常用的ntp服务器"></a>提供一些常用的ntp服务器</h1><p>转自</p>
<blockquote>
<p><a href="https://blog.csdn.net/sjzsel/article/details/122453509" target="_blank" rel="noopener">https://blog.csdn.net/sjzsel/article/details/122453509</a></p>
</blockquote>
<p>ntp.ntsc.ac.cn 国家授时中心网络授时域名（不建议使用）</p>
<p>国家授时中心服务器IP：<br>210.72.145.44</p>
<p>阿里云公网NTP服务器：<br>ntp.aliyun.com<br>ntp1.aliyun.com<br>ntp2.aliyun.com<br>ntp3.aliyun.com<br>ntp4.aliyun.com<br>ntp5.aliyun.com<br>ntp6.aliyun.com<br>ntp7.aliyun.com</p>
<p>腾讯云NTP服务器：<br>time1.cloud.tencent.com<br>time2.cloud.tencent.com<br>time3.cloud.tencent.com<br>time4.cloud.tencent.com<br>time5.cloud.tencent.com</p>
<p>国内一些大学NTP时间源服务器:<br>s1a.time.edu.cn 　　北京邮电大学<br>s1b.time.edu.cn 　　清华大学<br>s1c.time.edu.cn 　　北京大学<br>s1d.time.edu.cn 　　东南大学<br>s1e.time.edu.cn 　　清华大学<br>s2a.time.edu.cn 　　清华大学<br>s2b.time.edu.cn 　　清华大学<br>s2c.time.edu.cn 　　北京邮电大学<br>s2d.time.edu.cn 　　西南地区网络中心<br>s2e.time.edu.cn 　　西北地区网络中心<br>s2f.time.edu.cn 　　东北地区网络中心<br>s2g.time.edu.cn 　　华东南地区网络中心<br>s2h.time.edu.cn 　　四川大学网络管理中心<br>s2j.time.edu.cn 　　大连理工大学网络中心<br>s2k.time.edu.cn 　　CERNET桂林主节点<br>s2m.time.edu.cn 　　北京大学</p>
<p>苹果NTP服务器：<br>time.asia.apple.com<br>微软NTP服务器（WINDOWS系统常用）：<br>time.windows.com<br>其他NTP服务器：<br>cn.ntp.org.cn</p>
<p>苹果提供的公共NTP服务：<br>time1.apple.com<br>time2.apple.com<br>time3.apple.com<br>time4.apple.com<br>time5.apple.com<br>time6.apple.com<br>time7.apple.com</p>
<p>Google（谷歌）提供的NTP服务器：<br>time1.google.com<br>time2.google.com<br>time3.google.com<br>time4.google.com</p>
]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>ntp</tag>
      </tags>
  </entry>
  <entry>
    <title>install-openclash-on-openwrt</title>
    <url>/2023/2023-02-23-install-openclash-on-openwrt/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>abstract of this post<br><a id="more"></a><br>content of this post</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">opkg update</span><br><span class="line"></span><br><span class="line">CLASH_VERSION=0.45.157-beta</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"></span><br><span class="line">wget https://github.com/vernesong/OpenClash/releases/download/v<span class="variable">$&#123;CLASH_VERSION&#125;</span>/luci-app-openclash_<span class="variable">$&#123;CLASH_VERSION&#125;</span>_all.ipk -O openclash.ipk</span><br><span class="line"></span><br><span class="line">opkg install openclash.ipk</span><br><span class="line"></span><br><span class="line">rm openclash.ipk</span><br></pre></td></tr></table></figure>
<a href="/2023/2023-02-23-install-openclash-on-openwrt/clash_install_on_openwrt.sh" title="Install.sh">Install.sh</a>
<h1 id="下载-更新内核"><a href="#下载-更新内核" class="headerlink" title="下载/更新内核"></a>下载/更新内核</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/vernesong/OpenClash/tree/core/master" target="_blank" rel="noopener">https://github.com/vernesong/OpenClash/tree/core/master</a></p>
<p>分别去该目录下的 <code>dev</code>,<code>meta</code>,<code>premium</code>下下载自己相应系统的内核</p>
<h2 id="上传到路由中"><a href="#上传到路由中" class="headerlink" title="上传到路由中"></a>上传到路由中</h2><p>将下载的三个文件解压到 <code>/etc/openclash/core/</code>，分别命令为 <code>clash</code>,<code>clash_meta</code>,<code>clash_tun</code></p>
<p>这一步可以在路由的luci页面操作</p>
<p>服务 =》 openclash =&gt; 配置管理 =&gt; 上传文件类型， 分别选取相应的类型</p>
]]></content>
      <categories>
        <category>openwrt</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
      </tags>
  </entry>
  <entry>
    <title>use-warp-on-vps</title>
    <url>/2023/2023-02-28-use-warp-on-vps/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在vps上装warp</p>
<a id="more"></a>  
<h1 id="转自"><a href="#转自" class="headerlink" title="转自"></a>转自</h1><blockquote>
<p><a href="https://p3terx.com/archives/cloudflare-warp-configuration-script.html" target="_blank" rel="noopener">https://p3terx.com/archives/cloudflare-warp-configuration-script.html</a></p>
</blockquote>
<h1 id="为什么要这么搞呢"><a href="#为什么要这么搞呢" class="headerlink" title="为什么要这么搞呢"></a>为什么要这么搞呢</h1><p>不知道</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下面的 <code>git.io/warp.sh</code> 可以替换成<a href="https://raw.githubusercontent.com/P3TERX/warp.sh/main/warp.sh" target="_blank" rel="noopener">这个链接</a>或者<a href="/2023/2023-02-28-use-warp-on-vps/warp.sh" title="这个链接">这个链接</a></p>
<h2 id="添加-WARP-Wire­Guard-双栈全局网络，直接使用以下-WARP-脚本命令一把梭："><a href="#添加-WARP-Wire­Guard-双栈全局网络，直接使用以下-WARP-脚本命令一把梭：" class="headerlink" title="添加 WARP Wire­Guard 双栈全局网络，直接使用以下 WARP 脚本命令一把梭："></a>添加 WARP Wire­Guard 双栈全局网络，直接使用以下 WARP 脚本命令一把梭：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -fsSL git.io/warp.sh) d</span><br></pre></td></tr></table></figure>
<h2 id="添加或更改-IPv4-​IPv6-网络中的一个出口走-WARP-Wire­Guard-网络，使用以下-WARP-脚本命令一把梭："><a href="#添加或更改-IPv4-​IPv6-网络中的一个出口走-WARP-Wire­Guard-网络，使用以下-WARP-脚本命令一把梭：" class="headerlink" title="添加或更改 IPv4/​IPv6 网络中的一个出口走 WARP Wire­Guard 网络，使用以下 WARP 脚本命令一把梭："></a>添加或更改 IPv4/​IPv6 网络中的一个出口走 WARP Wire­Guard 网络，使用以下 WARP 脚本命令一把梭：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动配置 WARP WireGuard IPv4 网络（IPv4 出站流量走 WARP 网络）</span></span><br><span class="line">bash &lt;(curl -fsSL git.io/warp.sh) 4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动配置 WARP WireGuard IPv6 网络（IPv6 出站流量走 WARP 网络）</span></span><br><span class="line">bash &lt;(curl -fsSL git.io/warp.sh) 6</span><br></pre></td></tr></table></figure>
<h2 id="其它相关命令："><a href="#其它相关命令：" class="headerlink" title="其它相关命令："></a>其它相关命令：</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 WARP 脚本子命令列表</span></span><br><span class="line">bash &lt;(curl -fsSL git.io/warp.sh) <span class="built_in">help</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 WARP WireGuard 网络接口</span></span><br><span class="line">systemctl restart wg-quick@wgcf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用 WARP WireGuard 网络接口</span></span><br><span class="line">systemctl <span class="built_in">disable</span> wg-quick@wgcf --now</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>尝试使用Depay来支付chatgpt</title>
    <url>/2023/2023-03-25-Attempt-to-use-Depay/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>chatgpt plus或者api需要付费了，尝试一下depay</p>
<a id="more"></a>  
<h1 id="为何使用"><a href="#为何使用" class="headerlink" title="为何使用"></a>为何使用</h1><p>首先申明，任何机构都可能破产或者跑路，包括美国才破产的一些银行</p>
<p>所以请明确考虑自己的用途和能承担的风险</p>
<p>比如本人，之前只有国内发的visa卡，但目前chatgpt不支持支付，故申请一个depay试试</p>
<p>然后，我又有一些usdt，也算多了一个出金方式</p>
<p>由于开销少，需要支付时，再充个几刀，用完就行了</p>
<p><code>注意，最少充值5usdt，否则不到账</code></p>
<p><code>注意，最少充值5usdt，否则不到账</code></p>
<p><code>注意，最少充值5usdt，否则不到账</code></p>
<h1 id="卡片等级"><a href="#卡片等级" class="headerlink" title="卡片等级"></a>卡片等级</h1><table>
<thead>
<tr>
<th>-</th>
<th>Lite</th>
<th>标准</th>
<th>高级</th>
<th>白金</th>
<th>黑金</th>
</tr>
</thead>
<tbody>
<tr>
<td>开卡费（usdt）</td>
<td>10</td>
<td>0</td>
<td>10</td>
<td>50</td>
<td>活动空投</td>
</tr>
<tr>
<td>月费（usdt）</td>
<td>2</td>
<td>1</td>
<td>0.5</td>
<td>0</td>
<td>0</td>
</tr>
<tr>
<td>额度(usd)</td>
<td>20000</td>
<td>20000</td>
<td>50000</td>
<td>200000</td>
<td>无限</td>
</tr>
<tr>
<td>充值费率(%)</td>
<td>2</td>
<td>1.35</td>
<td>1.2</td>
<td>1</td>
<td>0.8</td>
</tr>
</tbody>
</table>
<p>其中：</p>
<p>lite卡不用Kyc。对隐私有需求的可选择</p>
<p>黑金不能直接开，只能活动空投。目前活动为拉新20个才有资格参加空投</p>
<p>标准卡，手续费最少收1刀</p>
<p>卡的有效期是3年</p>
<h1 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h1><p>可以直接登网页申请</p>
<p><a href="https://depay.depay.one/web-app/register-h5?invitCode=268811&lang=zh-cn" target="_blank" rel="noopener">注册地址</a></p>

<p>或者app注册</p>
<p><a href="https://depay.one/zh-cn/download.html?invitCode=268811" target="_blank" rel="noopener">下载地址</a></p>

<p>苹果需要海外账号，直接搜索<code>depay</code>.</p>
<p>app注册，可选填邀请码助功，谢谢： <code>268811</code></p>
<h1 id="Kyc"><a href="#Kyc" class="headerlink" title="Kyc"></a>Kyc</h1><p>注册完成后，可以隐私非敏感用户可以选择kyc先，即类似于实名认证。</p>
<p>就上传个身份证照片和录一段<code>念随机数字的视频</code>，个人认为尺度不大</p>
<p>隐私敏感用户可以跳过此步骤，开lite卡，只是贵点</p>
<h1 id="开卡"><a href="#开卡" class="headerlink" title="开卡"></a>开卡</h1><p>切换到首页，开卡</p>
<p>考虑到我本人：</p>
<ol>
<li>非大户，隐私又不值钱</li>
<li>花费应该又不多，目前就chatgpt，可能美区appstroe以后也会用</li>
<li>标准卡手续费的最低消费1刀</li>
</ol>
<p>目前我选择开高级卡，10刀开费，每月0.5</p>
<h2 id="开卡建议"><a href="#开卡建议" class="headerlink" title="开卡建议"></a>开卡建议</h2><p>有效期间内</p>
<p>总费用 = 开卡费 + 月费 <em> 36 + 总充值 </em> 充值费率</p>
<h3 id="1-假设就用一两次，后面甚至都不考虑交月租"><a href="#1-假设就用一两次，后面甚至都不考虑交月租" class="headerlink" title="1. 假设就用一两次，后面甚至都不考虑交月租"></a>1. 假设就用一两次，后面甚至都不考虑交月租</h3><p>标准或lite卡</p>
<h3 id="2-假设，想长期使用，且本卡能稳定使用三年"><a href="#2-假设，想长期使用，且本卡能稳定使用三年" class="headerlink" title="2. 假设，想长期使用，且本卡能稳定使用三年"></a>2. 假设，想长期使用，且本卡能稳定使用三年</h3><table>
<thead>
<tr>
<th>ss</th>
<th>ss</th>
</tr>
</thead>
<tbody>
<tr>
<td>标准卡</td>
<td>0  + 36 + 1.35 / 100 x 总费用</td>
</tr>
<tr>
<td>高级卡</td>
<td>10 + 18 + 1.2 / 100 x 总费用</td>
</tr>
<tr>
<td>白金卡</td>
<td>50 + 0  + 1 / 100 x 总费用</td>
</tr>
</tbody>
</table>
<p>标准卡无论固定费和费率都高于高级卡</p>
<p>高级卡和白金卡的分水岭在 11000usdt</p>
<p>即期间内 充值&lt; 11000usdt的，选高级卡， 充值&gt; 11000usdt的，选白金卡</p>
<h3 id="3-假设，本卡中途跑路"><a href="#3-假设，本卡中途跑路" class="headerlink" title="3. 假设，本卡中途跑路"></a>3. 假设，本卡中途跑路</h3><p>损失余额和开卡费</p>
<p>余额：</p>
<p>考虑到充值费率的最低消费，标准卡的余额不会小于高级卡</p>
<p>开卡费：</p>
<p>高级的10刀与白金的50刀</p>
<h1 id="充值兑换"><a href="#充值兑换" class="headerlink" title="充值兑换"></a>充值兑换</h1><p>大致为app里在支持的每条链上为每个用户分配了一个钱包，通过该链转到地址就存入钱包了。</p>
<p>然后再在app里兑换成usd</p>
<p>就可以交易了</p>
<p>大致流程为</p>
<p>（其它钱包地址的虚拟币）-&gt; depay钱包的usdt -&gt; usd -&gt; mastercard -&gt;(消费，绑支付宝京东微信等)</p>
<h1 id="各类app绑卡使用"><a href="#各类app绑卡使用" class="headerlink" title="各类app绑卡使用"></a>各类app绑卡使用</h1><p>暂无</p>
<h1 id="风险总结"><a href="#风险总结" class="headerlink" title="风险总结"></a>风险总结</h1><ol>
<li>跑路把钱带走<br>每次充值不多，可以承受。开卡费同理</li>
<li>隐私泄露<br>鄙人，没啥隐私，哈哈哈哈</li>
</ol>
<h1 id="chatgpt交费"><a href="#chatgpt交费" class="headerlink" title="chatgpt交费"></a>chatgpt交费</h1><p>暂无</p>
<h1 id="ojbk"><a href="#ojbk" class="headerlink" title="ojbk"></a>ojbk</h1><p><a href="https://depay.depay.one/web-app/register-h5?invitCode=268811&lang=zh-cn" target="_blank" rel="noopener">注册地址</a></p>

<p><a href="https://depay.one/zh-cn/download.html?invitCode=268811" target="_blank" rel="noopener">下载地址</a></p>

<p>app注册，可选填邀请码助功，谢谢： <code>268811</code></p>
<!-- 
安装并申请Depay账号并实名验证；
充值加密货币USDT（可向朋友换购或者到中心化交易所购买）到Depay APP钱包；
Depay APP中开通万事达虚拟卡（VISA卡暂时无法申请）；
将USDT换成USD美元，再充值到Depay万事达银行卡里，就相当于预付费的万事达信用卡了。 -->
]]></content>
      <categories>
        <category>depay</category>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>depay</tag>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx上的一个反向代理https的错误</title>
    <url>/2023/2023-04-07-An-error-with-HTTPS-reverse-proxy-on-nginx/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在nginx上突然出现的一个反向代理https的错误，特此记录<br><a id="more"></a>  </p>
<h1 id="问题说明"><a href="#问题说明" class="headerlink" title="问题说明"></a>问题说明</h1><p>本来就是一个简单的反向代理，用来代理openai的api，今天之前用得好好的，重启了nginx后，就不能用了</p>
<blockquote>
<p>真实域名已隐藏</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        server_name openai.your.domain;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass https://api.openai.com/;</span><br><span class="line">            proxy_set_header Host api.openai.com;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">            proxy_set_header Connection &apos;&apos;;</span><br><span class="line">            proxy_http_version 1.1;</span><br><span class="line">            chunked_transfer_encoding off;</span><br><span class="line">            proxy_buffering off;</span><br><span class="line">            proxy_cache off;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl; # managed by Certbot</span><br><span class="line">    ssl_certificate /etc/letsencrypt/live/openai.your.domain/fullchain.pem; # managed by Certbot</span><br><span class="line">    ssl_certificate_key /etc/letsencrypt/live/openai.your.domain/privkey.pem; # managed by Certbot</span><br><span class="line">    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot</span><br><span class="line">    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>http请求报502</p>
<p>nginx日志报错，大致是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2023/04/07 10:53:24 [error] 886#886: *21 SSL_do_handshake() failed (SSL: error:0A000410:SSL routines::sslv3 alert handshake failure:SSL alert number 40) while SSL handshaking to upstream, client: 151.61.223.142, server: openai.your.domain, request: &quot;GET /v1/chat/completions HTTP/1.1&quot;, upstream: &quot;https://104.18.7.192:443/v1/chat/completions&quot;, host: &quot;openai.your.domain&quot;</span><br></pre></td></tr></table></figure>
<h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在location里加一句<code>proxy_ssl_server_name on;</code>，再重启nginx就可以了，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_ssl_server_name on;</span><br><span class="line">    proxy_pass https://api.openai.com/;</span><br><span class="line">    proxy_set_header Host api.openai.com;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line"></span><br><span class="line">    proxy_set_header Connection &apos;&apos;;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    chunked_transfer_encoding off;</span><br><span class="line">    proxy_buffering off;</span><br><span class="line">    proxy_cache off;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么，从日志看，<code>proxy_set_header Host api.openai.com;</code>这一句是不是没有生效呢。再研究吧</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.claudiokuenzler.com/blog/1120/nginx-reverse-proxy-ssl-alert-number-40-while-ssl-handshaking-upstream" target="_blank" rel="noopener">https://www.claudiokuenzler.com/blog/1120/nginx-reverse-proxy-ssl-alert-number-40-while-ssl-handshaking-upstream</a></p>
</blockquote>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>nginx</tag>
        <tag>reverse</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>a site</title>
    <url>/2023/2023-04-13-a-site/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>神奇的字幕网站</p>
<a id="more"></a>  
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>文件类型</th>
<th>地址</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>Subtitle Cat</td>
<td>字幕</td>
<td>文件</td>
<td><a href="https://subtitlecat.com" target="_blank" rel="noopener">https://subtitlecat.com</a></td>
<td>基本上该有的都有了</td>
</tr>
<tr>
<td>AV Subs</td>
<td>字幕</td>
<td>文件</td>
<td><a href="https://www.avsubtitles.com" target="_blank" rel="noopener">https://www.avsubtitles.com</a></td>
<td>AV字幕捡漏</td>
</tr>
<tr>
<td>ScanLover</td>
<td>字幕</td>
<td>文件</td>
<td><a href="https://scanlover.com" target="_blank" rel="noopener">https://scanlover.com</a></td>
<td>AV字幕捡漏</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>安装lxc版openwrt</title>
    <url>/2024/2024-02-23-install-lxc-openwrt-on-pve/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>安装lxc版openwrt</p>
<a id="more"></a>  
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>我是pve7.4</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>截止目前，在这里<a href="https://fw.koolcenter.com/LEDE_X64_fw867/LXC%20CT%E6%A8%A1%E6%9D%BF/" target="_blank" rel="noopener">下载</a></p>
<p>我下载的是 <code>openwrt-koolshare-router-v3.2-r19470-2f7d60f0e5-x86-64-generic-rootfs.tar.gz</code></p>
<h2 id="上传到pve中"><a href="#上传到pve中" class="headerlink" title="上传到pve中"></a>上传到pve中</h2><p>这步不多解释吧</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>在pve的控制台中，输入类似命令，有些地方要改</p>
<p>模板位置: local:vztmpl/openwrt-koolshare-router-v3.2-r19470-2f7d60f0e5-x86-64-generic-rootfs.tar.gz</p>
<p><code>--rootfs local-lvm:2</code> 安装系统的位置，后面那个数字是磁盘大小，单位为GB</p>
<p><code>--hostname openwrt-side</code> 主机名称</p>
<p><code>--cores 2</code> 核心数，一般1核就够了</p>
<p><code>--memory 1024</code> 内存，一般512就够了</p>
<p><code>-net0 bridge=vmbr0,name=eth0</code> 网卡</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># LXC_ID set your new CTID</span></span><br><span class="line">LXC_ID=902</span><br><span class="line"></span><br><span class="line">pct create <span class="variable">$&#123;LXC_ID&#125;</span> \</span><br><span class="line">    <span class="built_in">local</span>:vztmpl/openwrt-koolshare-router-v3.2-r19470-2f7d60f0e5-x86-64-generic-rootfs.tar.gz \</span><br><span class="line">    --rootfs <span class="built_in">local</span>-lvm:2 \</span><br><span class="line">    --ostype unmanaged \</span><br><span class="line">    --hostname openwrt-side \</span><br><span class="line">    --arch amd64 \</span><br><span class="line">    --cores 2 \</span><br><span class="line">    --memory 1024 \</span><br><span class="line">    --swap 0 \</span><br><span class="line">    -net0 bridge=vmbr0,name=eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># if add tun</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"lxc.cgroup2.devices.allow: c 10:200 rwm"</span> &gt;&gt; /etc/pve/lxc/<span class="variable">$&#123;LXC_ID&#125;</span>.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file"</span> &gt;&gt; /etc/pve/lxc/<span class="variable">$&#123;LXC_ID&#125;</span>.conf</span><br></pre></td></tr></table></figure>
<p>如果还需要拨号或者直通网卡等功能，还得添加其它配置，由于我只是做旁路由，就没去搞了，有需要的百度</p>
<h2 id="选择一些功能"><a href="#选择一些功能" class="headerlink" title="选择一些功能"></a>选择一些功能</h2><p>节点-》选择你新增的虚拟机 =&gt; 选项 =》 功能 。。。</p>
<p>比如我几乎全选了 [fuse=1,mount=nfs;cifs,nesting=1]</p>
<h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><p>这步可略过，只是查看配置文件</p>
<p><code>cat /etc/pve/lxc/${LXC_ID}.conf</code></p>
<p>结果大致为<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch: amd64</span><br><span class="line">cores: 2</span><br><span class="line">features: fuse=1,mount=nfs;cifs,nesting=1</span><br><span class="line">hostname: openwrt-side</span><br><span class="line">memory: 1024</span><br><span class="line">net0: name=eth0,bridge=vmbr0,hwaddr=CE:A1:05:57:F6:4A,type=veth</span><br><span class="line">ostype: unmanaged</span><br><span class="line">rootfs: local-lvm:vm-901-disk-0,size=2G</span><br><span class="line">swap: 0</span><br><span class="line">lxc.cgroup2.devices.allow: c 10:200 rwm</span><br><span class="line">lxc.mount.entry: /dev/net/tun dev/net/tun none bind,create=file</span><br></pre></td></tr></table></figure></p>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>启动后，第一步改网络，在pve中，点 ${LXC_ID} 的控制台</p>
<p><code>vim /etc/config/network</code></p>
<p>修改lan下面的ip</p>
<p>改完后，重启网络<code>service network restart</code>或重启虚拟机<code>reboot</code></p>
<p>然后就可以在浏览器中操作了</p>
<p>默认密码是<code>koolshare</code></p>
<h1 id="一些检测脚本"><a href="#一些检测脚本" class="headerlink" title="一些检测脚本"></a>一些检测脚本</h1><p>tiktok<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s https://raw.githubusercontent.com/lmc999/TikTokCheck/main/tiktok.sh)</span><br></pre></td></tr></table></figure></p>
<p>netflix disney chatgpt 等<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash &lt;(curl -s https://raw.githubusercontent.com/lmc999/RegionRestrictionCheck/main/check.sh)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>router</category>
      </categories>
      <tags>
        <tag>openwrt</tag>
        <tag>router</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Copilot的免费替代品</title>
    <url>/2024/2024-06-12-free-alternatives-to-github-copilot/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>列一下Github Copilot的免费替代品<br><a id="more"></a>  </p>
<p>转自</p>
<blockquote>
<p><a href="https://www.cnblogs.com/feffery/p/17428388.html" target="_blank" rel="noopener">https://www.cnblogs.com/feffery/p/17428388.html</a></p>
</blockquote>
<h1 id="Amazon-CodeWhisperer"><a href="#Amazon-CodeWhisperer" class="headerlink" title="Amazon CodeWhisperer"></a>Amazon CodeWhisperer</h1><p>Amazon CodeWhisperer是由亚马逊研发的一款免费的AI代码生成工具，面向个人用户提供无限制的代码智能生成服务</p>
<h1 id="Codeium"><a href="#Codeium" class="headerlink" title="Codeium"></a>Codeium</h1><p>Codeium是由初创公司研发的一款对标Github Copilot的代码智能生成插件，支持主流的各种编程语言，同样面向个人用户免费使用</p>
<h1 id="CodeGeeX"><a href="#CodeGeeX" class="headerlink" title="CodeGeeX"></a>CodeGeeX</h1><p>CodeGeeX跟前面两款插件相比要冷门一些，不过特别地是其是开源的，项目地址：<a href>https://github.com/THUDM/CodeGeeX</a></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>vscode</tag>
        <tag>copilot</tag>
        <tag>codeium</tag>
      </tags>
  </entry>
  <entry>
    <title>pve运行arm虚拟机</title>
    <url>/2024/2024-06-28-new-vm-on-arm-pve/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>pve运行arm虚拟机<br><a id="more"></a>  </p>
<p><a href="https://zhuanlan.zhihu.com/p/620969622" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/620969622</a></p>
<p><a href="https://superuser.com/questions/980202/cant-call-grubx64-efi-using-startup-nsh-in-efi" target="_blank" rel="noopener">https://superuser.com/questions/980202/cant-call-grubx64-efi-using-startup-nsh-in-efi</a></p>
]]></content>
      <categories>
        <category>pve</category>
      </categories>
      <tags>
        <tag>pve</tag>
        <tag>vm</tag>
        <tag>arm</tag>
      </tags>
  </entry>
  <entry>
    <title>Unable to fully install initramfs-tools on debian 12 with additional harddisk errors</title>
    <url>/2024/2024-07-31-a-error-for-initramfs-tool/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>Unable to fully install <code>initramfs-tools</code> on debian 12 with additional harddisk errors<br><a id="more"></a>  </p>
<h2 id="大致问题"><a href="#大致问题" class="headerlink" title="大致问题"></a>大致问题</h2><blockquote>
<p><a href="https://www.techpository.com/linux-error-with-update-initramfs-no-space-left-on-device/" target="_blank" rel="noopener">https://www.techpository.com/linux-error-with-update-initramfs-no-space-left-on-device/</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update-initramfs: Generating /boot/initrd.img-6.1.0-23-amd64</span><br><span class="line">zstd: error 70 : Write error : cannot write block : No space left on device</span><br><span class="line">E: mkinitramfs failure zstd -q -9 -T0 70</span><br><span class="line">update-initramfs: failed for /boot/initrd.img-6.1.0-23-amd64 with 1.</span><br><span class="line">dpkg: 处理软件包 initramfs-tools (--configure)时出错：</span><br><span class="line"> 已安装 initramfs-tools 软件包 post-installation 脚本 子进程返回错误状态 1</span><br><span class="line">正在处理用于 libvlc-bin:amd64 (3.0.21-0+deb12u1) 的触发器 ...</span><br><span class="line">在处理时有错误发生：</span><br><span class="line"> initramfs-tools</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>首先，创建一个文件<code>/etc/initramfs-tools/conf.d/modules</code>，内容为<code>MODULES=dep</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"MODULES=dep"</span> &gt; /etc/initramfs-tools/conf.d/modules</span><br></pre></td></tr></table></figure>
<p>然后执行 <code>update-initramfs -u</code> 或 <code>update-initramfs -k all -u</code></p>
<p>搞定</p>
]]></content>
      <categories>
        <category>debian</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
        <tag>initramfs</tag>
      </tags>
  </entry>
  <entry>
    <title>install-wireguard-in-openwrt</title>
    <url>/2024/2024-08-29-install-wireguard-in-openwrt/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在openwrt中安装wireguard server<br><a id="more"></a>  </p>
<p>安装</p>
<p><a href="https://6xyun.cn/article/openwrt-install-wireguard" target="_blank" rel="noopener">https://6xyun.cn/article/openwrt-install-wireguard</a></p>
<p>按上面的安好了后，不能访问到局域网中的设备</p>
<p>按下面的配置</p>
<p><a href="https://www.chiphell.com/thread-2649373-1-1.html" target="_blank" rel="noopener">https://www.chiphell.com/thread-2649373-1-1.html</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>common-security-scanning-tools-for-linux</title>
    <url>/2025/2025-04-02-common-security-scanning-tools-for-linux/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>常用的安全漏洞扫描工具</p>
<a id="more"></a>  
<p>以下由gemini生成的，先保存再说</p>
<p><strong>推荐工具组合:</strong></p>
<ol>
<li><p><strong>Trivy (用于软件包和操作系统漏洞扫描 - 必须)</strong></p>
<ul>
<li><strong>为什么?</strong> 非常适合你的场景。它快速、易用，专门扫描已安装的操作系统软件包 (Debian packages) 和某些应用依赖项中的已知 CVEs，并直接提供 CVSS v3 分数。因为它扫描的是系统当前状态，所以非常适合在最终交付前运行。</li>
<li><p><strong>怎么用?</strong></p>
<ul>
<li>在服务器还能连接互联网时安装 Trivy (使用前面提到的方法之一，如 <code>apt</code> 或下载 <code>.deb</code>)。</li>
<li>更新 Trivy 的漏洞数据库 (通常在扫描时自动进行，或手动 <code>trivy image --download-db-only</code>)。</li>
<li><p>在服务器本地运行扫描:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 扫描操作系统安装的软件包</span></span><br><span class="line">trivy os --severity HIGH,CRITICAL --ignore-unfixed --format table -o os-vulnerabilities.txt</span><br><span class="line"><span class="comment"># 或扫描整个根文件系统 (会包含 OS 包，可能更全面)</span></span><br><span class="line">trivy fs --security-checks vuln --severity HIGH,CRITICAL --ignore-unfixed / -o fs-vulnerabilities.txt</span><br></pre></td></tr></table></figure>
<ul>
<li><code>--severity HIGH,CRITICAL</code>: 仅报告高危和严重漏洞，方便聚焦。你可以根据需要调整。</li>
<li><code>--ignore-unfixed</code>: 通常建议加上，忽略那些发行版尚未提供修复补丁的漏洞（因为你可能也无法修复）。</li>
<li><code>-o ...</code>: 将结果输出到文件方便查看。</li>
</ul>
</li>
</ul>
</li>
<li><strong>优点:</strong> 快速定位需要打补丁的软件包。</li>
</ul>
</li>
<li><p><strong>GVM (OpenVAS) (用于网络服务漏洞扫描 - 强烈推荐)</strong></p>
<ul>
<li><strong>为什么?</strong> Trivy 主要看软件包版本，而 GVM 则模拟攻击者从网络层面探测服务。它可以发现：<ul>
<li>运行的服务本身存在的已知漏洞 (即使软件包是最新版，服务配置也可能有问题或该版本有0-day)。</li>
<li>配置错误导致的安全风险（如弱密码、信息泄露等）。</li>
<li>这是 Trivy 无法覆盖的领域，对评估网络暴露面至关重要。</li>
</ul>
</li>
<li><strong>怎么用?</strong><ul>
<li><strong>最佳实践:</strong> 在另一台机器（可以是你的管理机，只要能访问目标服务器 IP）上安装 GVM (推荐使用 Docker 镜像，部署更快)。</li>
<li>在 GVM 机器还能访问互联网时，确保其漏洞库 (NVT Feed) 是最新的。登录 GVM 的 Web UI (叫做 Greenbone Security Assistant / GSA)，通常在 “Administration” -&gt; “Feed Status” 下查看并更新。</li>
<li>在 GSA 中配置扫描任务，目标为你待交付的 Debian 服务器的 IP 地址。</li>
<li>选择一个合适的扫描配置 (例如 “Full and fast” 或根据需要调整)。</li>
<li>运行扫描。扫描会花费一些时间。</li>
<li>查看报告，重点关注高危和严重漏洞，报告会包含 CVSS v3 分数。</li>
</ul>
</li>
<li><strong>如果 GVM 太复杂?</strong><ul>
<li><strong>替代方案:</strong> 使用 <strong>Nmap + Vuln Scripts</strong>。虽然不如 GVM 全面，但可以做基本的网络服务漏洞探测。<br><code>`</code>bash<h1 id="确保-Nmap-和-nmap-sc"><a href="#确保-Nmap-和-nmap-sc" class="headerlink" title="确保 Nmap 和 nmap-sc"></a>确保 Nmap 和 nmap-sc</h1></li>
</ul>
</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>arm-pve-issue</title>
    <url>/2025/2025-08-17-arm-pve-issue/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>arm的pve还是太小众 。搞了个e20c来玩pve，安装好了遇到了问题，在gemini的帮助下解决了</p>
<a id="more"></a>  
<h1 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h1><h2 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h2><p>radxa e20c 4g+32g</p>
<h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p><a href="https://github.com/ophub/amlogic-s9xxx-armbian" target="_blank" rel="noopener">armbian</a><br>Armbian_25.11.0_rockchip_e20c_bookworm_5.10.160_server_2025.08.11</p>
<p>(由于该项目几乎每周都会编译新的固件，链接会失效，就不挂链接了)</p>
<h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><p>然后我使用命令更新内核到<code>6.1</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">armbian-update -k 6.1.115</span><br></pre></td></tr></table></figure>
<p>注意，内核也有可能因为更新的原因而删除旧的内核，可以去以下链接查看</p>
<p><a href="https://github.com/ophub/kernel/releases/" target="_blank" rel="noopener">https://github.com/ophub/kernel/releases/</a></p>
<p>e20c的目前支持的内核版本</p>
<p><a href="https://github.com/ophub/kernel/releases/tag/kernel_rk35xx" target="_blank" rel="noopener">https://github.com/ophub/kernel/releases/tag/kernel_rk35xx</a></p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>在安装pve之前，我执行了<code>armbian-upgrade</code>把软件都更新到了最新版本</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote>
<p>注意1，armbian13 (trixie) 目前（2025-08-17）是不支持安装pve9的。尽管文档中写的支持</p>
</blockquote>
<blockquote>
<p>注意2，以前可以使用 <code>armbian-software</code> 直接选<code>308</code> 安装pve，现在也不行了。直接表现为里面那个仓库都404了</p>
</blockquote>
<p>项目地址</p>
<p><a href="https://github.com/jiangcuo/pxvirt" target="_blank" rel="noopener">https://github.com/jiangcuo/pxvirt</a></p>
<p>中文文档：<br><a href="https://docs.pxvirt.lierfang.com/zh/installfromdebian.html" target="_blank" rel="noopener">https://docs.pxvirt.lierfang.com/zh/installfromdebian.html</a></p>
<p>就几句命令就安装好了</p>
<h1 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h1><blockquote>
<p>注意，我解决了问题以后，没能复现问题，但在解决之前是100%复现了问题的，估计是刷机没有清理的问题。。。</p>
</blockquote>
<p>安装完成后，能看到版本 <code>pveversion</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pve-manager/8.4.10/01d2d7dd794a93d5 (running kernel: 6.1.115-rk35xx-ophub)</span><br></pre></td></tr></table></figure>
<p>端口也能正常监听，但是不能访问</p>
<p>root@pxvirt:~# netstat -ano | grep 8006</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tcp6       0      0 :::8006                 :::*                    LISTEN      off (0.00/0/0)</span><br></pre></td></tr></table></figure>
<p>问了gemini，让按步骤排除问题</p>
<p>1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status pveproxy pvedaemon</span><br></pre></td></tr></table></figure>
<p>2<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status pve-firewall</span><br><span class="line">pve-firewall status</span><br></pre></td></tr></table></figure></p>
<p>3 </p>
<p>检查证书问题</p>
<p>开始检查</p>
<p>我第一步就检查出了问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl status pveproxy pvedaemon</span><br></pre></td></tr></table></figure>
<p>以下输出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">● pveproxy.service - PVE API Proxy Server</span><br><span class="line"></span><br><span class="line">     Loaded: loaded (/lib/systemd/system/pveproxy.service; enabled; preset: enabled)</span><br><span class="line"></span><br><span class="line">     Active: active (running) since Sun 2025-08-17 05:51:43 PDT; 10min ago</span><br><span class="line"></span><br><span class="line">    Process: 1624 ExecStartPre=/usr/bin/pvecm updatecerts --silent (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">    Process: 1630 ExecStart=/usr/bin/pveproxy start (code=exited, status=0/SUCCESS)</span><br><span class="line"></span><br><span class="line">   Main PID: 1662 (pveproxy)</span><br><span class="line"></span><br><span class="line">      Tasks: 3 (limit: 4664)</span><br><span class="line"></span><br><span class="line">     Memory: 152.7M</span><br><span class="line"></span><br><span class="line">        CPU: 1min 32.921s</span><br><span class="line"></span><br><span class="line">     CGroup: /system.slice/pveproxy.service</span><br><span class="line"></span><br><span class="line">             ├─1662 pveproxy</span><br><span class="line"></span><br><span class="line">             ├─3629 &quot;pveproxy worker&quot;</span><br><span class="line"></span><br><span class="line">             └─3630 &quot;pveproxy worker&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: starting 1 worker(s)</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: worker 3629 started</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[3629]: /etc/pve/local/pve-ssl.pem: failed to use local certificate chain (cert_file or cert) at /usr/share/perl5/PVE/APIServer/AnyEvent.pm line 2088.</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[3606]: worker exit</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[3607]: worker exit</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: worker 3606 finished</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: starting 1 worker(s)</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: worker 3607 finished</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[1662]: worker 3630 started</span><br><span class="line"></span><br><span class="line">Aug 17 06:02:04 pxvirt pveproxy[3630]: /etc/pve/local/pve-ssl.pem: failed to use local certificate chain (cert_file or cert) at /usr/share/perl5/PVE/APIServer/AnyEvent.pm line 2088.</span><br></pre></td></tr></table></figure>
<p>注意到这句，说明是证书问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/pve/local/pve-ssl.pem: failed to use local certificate chain (cert_file or cert) at /usr/share/perl5/PVE/APIServer/AnyEvent.pm line 2088.</span><br></pre></td></tr></table></figure>
<p>然后我输入 <code>pvecm updatecerts</code> 命令更新证书，但更新失败</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Could not read private key from /etc/pve/priv/pve-root-ca.key</span><br><span class="line"></span><br><span class="line">generating pve root certificate failed:</span><br><span class="line"></span><br><span class="line">command &apos;faketime yesterday openssl req -batch -days 3650 -new -x509 -nodes -key /etc/pve/priv/pve-root-ca.key -out /etc/pve/pve-root-ca.pem -subj &apos;/CN=Proxmox Virtual Environment/OU=f02937c1-6c62-490d-890b-47fb7699dae2/O=PVE Cluster Manager CA/&apos;&apos; failed: exit code 1</span><br></pre></td></tr></table></figure>
<p>然后，我发现 <code>/etc/pve/priv/pve-root-ca.key</code> 和 <code>/etc/pve/pve-root-ca.pem</code> 文件的内容是空的</p>
<!-- systemctl stop pve-cluster -->
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop pvedaemon</span><br><span class="line">systemctl stop pveproxy</span><br></pre></td></tr></table></figure>
<p>然后我执行了 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">rm -rf /etc/pve/priv/pve-root-ca.key</span><br><span class="line">rm -rf /etc/pve/pve-root-ca.pem</span><br><span class="line">rm -rf /etc/pve/pve-www.key</span><br><span class="line">rm -rf /etc/pve/authkey.pub</span><br></pre></td></tr></table></figure>
<p>再执行了这个 <code>pvecm updatecerts --forse</code></p>
<h1 id="附上所有安装命令"><a href="#附上所有安装命令" class="headerlink" title="附上所有安装命令"></a>附上所有安装命令</h1><h2 id="第一次连ssh"><a href="#第一次连ssh" class="headerlink" title="第一次连ssh"></a>第一次连ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">armbian-update -k 6.1.115</span><br></pre></td></tr></table></figure>
<h2 id="第二次连ssh"><a href="#第二次连ssh" class="headerlink" title="第二次连ssh"></a>第二次连ssh</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 这句可以不要，相当于运行该命令时，会安装一些必要软件。</span></span><br><span class="line"><span class="comment"># 打印同列表后，按 ctrl+c 退出</span></span><br><span class="line">armbian-software</span><br><span class="line"></span><br><span class="line">armbian-upgrade</span><br><span class="line"></span><br><span class="line">curl -L https://mirrors.lierfang.com/pxcloud/lierfang.gpg -o /etc/apt/trusted.gpg.d/lierfang.gpg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备做安装装的准备，设置网络网卡</span></span><br><span class="line"><span class="comment"># 改变一下下面两个变量的值，</span></span><br><span class="line"><span class="comment"># 即目前ip设为 192.168.1.2，网卡使用 eth0</span></span><br><span class="line">tmp_ip=192.168.1.2</span><br><span class="line">tmp_if_name=eth0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始设置网络网卡 </span></span><br><span class="line"><span class="built_in">source</span> /etc/os-release</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"deb  https://mirrors.lierfang.com/pxcloud/pxvirt <span class="variable">$VERSION_CODENAME</span> main"</span>&gt;/etc/apt/sources.list.d/pxvirt-sources.list</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pxvirt"</span> &gt; /etc/hostname</span><br><span class="line">cat &lt;&lt;eof &gt; /etc/hosts</span><br><span class="line">127.0.0.1   localhost</span><br><span class="line"><span class="variable">$&#123;tmp_ip&#125;</span> pxvirt.local pxvirt </span><br><span class="line"></span><br><span class="line">::1         localhost ip6-localhost ip6-loopback</span><br><span class="line">fe00::0     ip6-localnet</span><br><span class="line">ff00::0     ip6-mcastprefix</span><br><span class="line">ff02::1     ip6-allnodes</span><br><span class="line">ff02::2     ip6-allrouters</span><br><span class="line">eof</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line"></span><br><span class="line">apt install vim ifupdown2 -y</span><br><span class="line">rm /etc/network/interfaces.new</span><br><span class="line"></span><br><span class="line">tmp_gateway=`<span class="built_in">echo</span> <span class="variable">$tmp_ip</span> | awk -F. <span class="string">'&#123;print $1"."$2"."$3".1"&#125;'</span>`</span><br><span class="line">cat &lt;&lt;eof &gt;&gt; /etc/network/interfaces</span><br><span class="line">auto <span class="variable">$&#123;tmp_if_name&#125;</span></span><br><span class="line">iface <span class="variable">$&#123;tmp_if_name&#125;</span> inet static</span><br><span class="line">      address <span class="variable">$&#123;tmp_ip&#125;</span>/24</span><br><span class="line">      gateway <span class="variable">$&#123;tmp_gateway&#125;</span></span><br><span class="line">eof</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"show hosts '/etc/hosts' ................."</span></span><br><span class="line">cat /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"show interfaces '/etc/network/interfaces' ............."</span></span><br><span class="line">cat /etc/network/interfaces</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"检查，如果有问题，重启后，可能ssh连接不到系统"</span></span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>
<h2 id="第三次连ssh"><a href="#第三次连ssh" class="headerlink" title="第三次连ssh"></a>第三次连ssh</h2><p>注意，由于由dhcp改成了静态ip，可能要设置dns,否则可能同有网</p>
<p>可以用以下命令试试</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ping 8.8.8.8</span><br><span class="line"></span><br><span class="line">curl baidu.com</span><br></pre></td></tr></table></figure>
<p>如果能ping 但不能curl 就是dns问题，使用以下命令设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"nameserver 8.8.8.8"</span> &gt; /etc/resolv.conf</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install proxmox-ve pve-manager qemu-server pve-cluster</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>display-vm-on-pve-arm</title>
    <url>/2025/2025-08-18-display-vm-on-pve-arm/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>abstract of this post<br><a id="more"></a><br>content of this post</p>
<p>有些系统支持</p>
<p>硬件，添加，串口</p>
<p>display 选择 串口</p>
<h1 id="openwrt-vm"><a href="#openwrt-vm" class="headerlink" title="openwrt vm"></a>openwrt vm</h1><p><a href="https://medium.com/@aj.abdelwahed/openwrt-on-proxmox-ve-turn-your-raspberry-pi-into-a-networking-powerhouse-ee61bd2f342c" target="_blank" rel="noopener">https://medium.com/@aj.abdelwahed/openwrt-on-proxmox-ve-turn-your-raspberry-pi-into-a-networking-powerhouse-ee61bd2f342c</a></p>
<h1 id="openwrt-lxc1"><a href="#openwrt-lxc1" class="headerlink" title="openwrt lxc1"></a>openwrt lxc1</h1><p>这上面说的，好像不行</p>
<p><a href="https://openwrt.org/docs/guide-user/virtualization/lxc" target="_blank" rel="noopener">https://openwrt.org/docs/guide-user/virtualization/lxc</a></p>
<h1 id="openwrt-lxc2"><a href="#openwrt-lxc2" class="headerlink" title="openwrt lxc2"></a>openwrt lxc2</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting Up OpenWRT on a Virtual Machine with Proxmox</span></span><br><span class="line"><span class="comment"># Based on: https://community.bigbeartechworld.com/t/setting-up-openwrt-on-a-virtual-machine-with-proxmox/257</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set your wished version:</span></span><br><span class="line"><span class="built_in">export</span> VER=<span class="string">"24.10"</span></span><br><span class="line"><span class="built_in">export</span> ARCH=<span class="string">"arm64"</span></span><br><span class="line"><span class="built_in">export</span> INDEX_URL=<span class="string">"https://images.linuxcontainers.org/images/openwrt/<span class="variable">$VER</span>/<span class="variable">$ARCH</span>/default"</span></span><br><span class="line"><span class="comment">#export BUILDDATE=$(date -d "yesterday" '+%Y%m%d')</span></span><br><span class="line"><span class="built_in">export</span> BUILDDATE=$(curl -sL <span class="variable">$INDEX_URL</span> | grep <span class="string">"&lt;a href="</span> | sed -E <span class="string">'s/.*&lt;a href="([^"]+)".*/\1/'</span> | sort | tail -n 1 | tr -d \/)</span><br><span class="line"><span class="built_in">export</span> BD_URL=<span class="string">"<span class="variable">$INDEX_URL</span>/<span class="variable">$BUILDDATE</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span>; <span class="built_in">echo</span> <span class="string">"[*] Setting Up OpenWRT Version <span class="variable">$VER</span> on a Virtual Machine with Proxmox"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"[*] Downloading by <span class="variable">$BD_URL</span>/ "</span></span><br><span class="line">sleep 2</span><br><span class="line">wget <span class="variable">$BD_URL</span>/rootfs.tar.xz -O /var/lib/vz/template/cache/OpenWrt-<span class="variable">$VER</span>.tar.xz</span><br><span class="line"><span class="comment"># lvm disk: 1G - RAM 1G - CPU 1Core 64bit</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">pct create 202 /var/lib/vz/template/cache/OpenWrt-<span class="variable">$VER</span>.tar.xz --arch <span class="variable">$ARCH</span> --hostname OpenWrt-<span class="variable">$VER</span> --rootfs <span class="built_in">local</span>-lvm:1 --memory 1024 --cores 1 --ostype unmanaged --unprivileged 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">"</span></span><br><span class="line"><span class="string">Add network on interface and setup network file via dhcp </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(vi /etc/config/network):</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">config interface 'wrtb'</span></span><br><span class="line"><span class="string">        option type 'bridge'</span></span><br><span class="line"><span class="string">        option ifname 'eth0'</span></span><br><span class="line"><span class="string">        option proto 'dhcp'</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0;</span><br></pre></td></tr></table></figure>
<h1 id="immortalwrt"><a href="#immortalwrt" class="headerlink" title="immortalwrt"></a>immortalwrt</h1><h2 id="lxc"><a href="#lxc" class="headerlink" title="lxc"></a>lxc</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://downloads.immortalwrt.org/releases/24.10.1/targets/armsr/armv8/immortalwrt-24.10.1-armsr-armv8-rootfs.tar.gz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pct create 700 /var/lib/vz/template/cache/immortalwrt-24.10.1-armsr-armv8-rootfs.tar.gz --arch arm64 --hostname immortalwrt --rootfs <span class="built_in">local</span>:1 --memory 512 --cores 1 --ostype unmanaged --unprivileged 1</span><br></pre></td></tr></table></figure>
<p>注意，我应该是遇到两次了，lxc运行后，dnsmq 不能启动导致不能上网</p>
<p>比如 ping baidu.com<br>bad address “baidu.com”</p>
<p>/etc/init.d/dnsmasq status<br>not running</p>
<p>解决<br><a href="https://github.com/immortalwrt/immortalwrt/issues/1588" target="_blank" rel="noopener">https://github.com/immortalwrt/immortalwrt/issues/1588</a></p>
<p>vim /etc/init.d/dnsmasq</p>
<p>删除或注释掉这几句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#       procd_add_jail dnsmasq ubus log                                                                                     </span><br><span class="line">#       procd_add_jail_mount $CONFIGFILE $DHCPBOGUSHOSTNAMEFILE $DHCPSCRIPT $DHCPSCRIPT_DEPENDS                             </span><br><span class="line">#       procd_add_jail_mount $EXTRA_MOUNT $RFC6761FILE $TRUSTANCHORSFILE                                                    </span><br><span class="line">#       procd_add_jail_mount $dnsmasqconffile $dnsmasqconfdir $resolvdir $user_dhcpscript                                   </span><br><span class="line">#       procd_add_jail_mount /etc/passwd /etc/group /etc/TZ /etc/hosts /etc/ethers                                          </span><br><span class="line">#       procd_add_jail_mount_rw /var/run/dnsmasq/ $leasefile                                                                </span><br><span class="line">#       case &quot;$logfacility&quot; in */*)                                                                                         </span><br><span class="line">#               [ ! -e &quot;$logfacility&quot; ] &amp;&amp; touch &quot;$logfacility&quot;                                                             </span><br><span class="line">#               procd_add_jail_mount_rw &quot;$logfacility&quot;                                                                      </span><br><span class="line">#       esac                                                                                                                </span><br><span class="line">#       [ -e &quot;$hostsfile&quot; ] &amp;&amp; procd_add_jail_mount $hostsfile</span><br></pre></td></tr></table></figure>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>临时设置ip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip addr add 192.168.122.94/24 dev enp6s19</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>ventoy-verification-failed-0x1a</title>
    <url>/2025/2025-09-05-ventoy-verification-failed-0x1a/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>abstract of this post<br><a id="more"></a><br>content of this post<br><a href="https://blog.csdn.net/weixin_52326756/article/details/148444717" target="_blank" rel="noopener">https://blog.csdn.net/weixin_52326756/article/details/148444717</a></p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>clash</title>
    <url>/2023/fixed-09-05-clash/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>what</p>
<a id="more"></a>  
<p>content of this post</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>php在docker环境下的远程xdebug</title>
    <url>/2019/2019-2019-01-30-docker-php-use-xdebug/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>复习一下<br><a id="more"></a>  </p>
<h1 id="先放个链接"><a href="#先放个链接" class="headerlink" title="先放个链接"></a>先放个链接</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li><p>没打断点也会暂停</p>
<p>  有可能是phpstorm xdebug 设置里面选了 Break at first line in PHP Scripts.</p>
</li>
</ul>
<p>转自</p>
<p><a href="https://thecodingmachine.io/configuring-xdebug-phpstorm-docker" target="_blank" rel="noopener">https://thecodingmachine.io/configuring-xdebug-phpstorm-docker</a></p>
<p><a href="https://www.jianshu.com/p/42eb347e0283" target="_blank" rel="noopener">https://www.jianshu.com/p/42eb347e0283</a></p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>debian系统下各种中文显示、乱码、输入等问题</title>
    <url>/2019/2019-2019-03-03-debian-charset-words-zhcn-program/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>记录debian下面各种中文字符的问题</p>
<a id="more"></a>  
<blockquote>
<p>未完待续。</p>
</blockquote>
<blockquote>
<p>以前遇到的时候解决了，然后后面又遇到又要一直去搜。现在开始，遇到了就记录一下，以后直接就翻这里就完了。</p>
</blockquote>
<h1 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h1><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><h1 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h1><h2 id="dota2"><a href="#dota2" class="headerlink" title="dota2"></a>dota2</h2><p>dota2中fcitx输入中文</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 我用的fcitx输入法，其它的可以试试，在下没试过</span></span><br><span class="line"><span class="built_in">export</span> SDL_IM_MODULE=fcitx</span><br></pre></td></tr></table></figure>
<p>这一步能解决dota2中几个聊天界面的中文输入，但还有些地方不能输入中文，比如steam 的im (区别steam和dota2，进入dota2前的好友与聊天，以前在游戏中按 shift+tab 键)</p>
<p>steam 的im 暂没找到方法，以下可以参考，但我试了不行</p>
<p><a href="https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=9433" target="_blank" rel="noopener">https://www.ubuntukylin.com/ukylin/forum.php?mod=viewthread&amp;tid=9433</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>debian</tag>
        <tag>linux</tag>
        <tag>language</tag>
        <tag>charset</tag>
        <tag>input</tag>
      </tags>
  </entry>
  <entry>
    <title>linux基本安全</title>
    <url>/2019/2019-2019-03-22-linux-server-security/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>自己运营一个小网站，还是需要一些安全知识<br><a id="more"></a>  </p>
<h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><h2 id="本文引用"><a href="#本文引用" class="headerlink" title="本文引用"></a>本文引用</h2><blockquote>
<p><a href="https://blog.csdn.net/holmofy/article/details/70185358" target="_blank" rel="noopener">https://blog.csdn.net/holmofy/article/details/70185358</a></p>
</blockquote>
<blockquote>
<p><a href="https://www.cnblogs.com/lcword/p/5912614.html" target="_blank" rel="noopener">https://www.cnblogs.com/lcword/p/5912614.html</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>
<h1 id="查日志文件"><a href="#查日志文件" class="headerlink" title="查日志文件"></a>查日志文件</h1><h2 id="日志文件默认的路径"><a href="#日志文件默认的路径" class="headerlink" title="日志文件默认的路径"></a>日志文件默认的路径</h2><ul>
<li>Redhat or Fedora Core:<br>  /var/log/secure</li>
<li>Mandrake, FreeBSD or OpenBSD:<br>  /var/log/auth.log</li>
<li>SuSE:<br>  /var/log/messages</li>
<li>Mac OS X (v10.4 or greater):<br>  /private/var/log/asl.log</li>
<li>Mac OS X (v10.3 or earlier):<br>  /private/var/log/system.log</li>
<li>Debian:<br>  /var/log/auth.log</li>
</ul>
<h2 id="var-log-secure"><a href="#var-log-secure" class="headerlink" title="/var/log/secure"></a>/var/log/secure</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计登录的次数</span></span><br><span class="line">grep <span class="string">"Failed password for invalid user"</span> /var/<span class="built_in">log</span>/secure | awk <span class="string">'&#123;print $13&#125;'</span> | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure>
<h2 id="var-log-btmp"><a href="#var-log-btmp" class="headerlink" title="/var/log/btmp"></a>/var/log/btmp</h2><p>该日志是用二进制文件保存的，用lastb查看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lastb | awk <span class="string">'&#123;print $3&#125;'</span> | sort | uniq -c | sort -nr</span><br></pre></td></tr></table></figure>
<h1 id="修改ssh配置"><a href="#修改ssh配置" class="headerlink" title="修改ssh配置"></a>修改ssh配置</h1><p>ssh服务端的配置一般在 <strong>/etc/ssh/sshd_config</strong></p>
<h2 id="修改默认端口"><a href="#修改默认端口" class="headerlink" title="修改默认端口"></a>修改默认端口</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Port 42972   <span class="comment">#ssh端口默认是22，改成不容易猜的，一般5位数</span></span><br></pre></td></tr></table></figure>
<h2 id="禁止root登录"><a href="#禁止root登录" class="headerlink" title="禁止root登录"></a>禁止root登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PermitRootLogin no</span><br></pre></td></tr></table></figure>
<h2 id="强制证书登录"><a href="#强制证书登录" class="headerlink" title="强制证书登录"></a>强制证书登录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PasswordAuthentication no</span><br><span class="line">RSAAuthentication yes       <span class="comment">#秘钥认证</span></span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure>
<h1 id="安全工具"><a href="#安全工具" class="headerlink" title="安全工具"></a>安全工具</h1><h2 id="lynis"><a href="#lynis" class="headerlink" title="lynis"></a>lynis</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><a href="https://github.com/CISOfy/lynis" target="_blank" rel="noopener">gayhub</a></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>先上链接，以后整理<br><a href="http://www.importnew.com/29048.html" target="_blank" rel="noopener">参见这里</a><br><a href="https://blog.csdn.net/qq_37865996/article/details/84112065" target="_blank" rel="noopener">以及这里</a></p>
<p>最简单的，执行审计命令。然后查看后面的建议，跟据建议进行一下步操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lynis audit system</span><br></pre></td></tr></table></figure>
<h2 id="fail2ban"><a href="#fail2ban" class="headerlink" title="fail2ban"></a>fail2ban</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>fail2ban的配置文件在 <strong>/etc/fail2ban/</strong> 文件夹里面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls /etc/fail2ban</span><br></pre></td></tr></table></figure>
<p>大概会出现以下文件<br>action.d  fail2ban.conf  fail2ban.d  filter.d  jail.conf  jail.d  paths-common.conf  paths-debian.conf  paths-fedora.conf  paths-freebsd.conf  paths-opensuse.conf  paths-osx.conf</p>
<p>然后，我们先改 <strong>jail</strong> ，不过官方不建议修改该文件，而是让我们建一个同名的local文件，并在里面修改配置。如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch jail.local</span><br></pre></td></tr></table></figure>
<h3 id="防ssh暴破"><a href="#防ssh暴破" class="headerlink" title="防ssh暴破"></a>防ssh暴破</h3><p>修改 jail.local 文件，加入以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[ssh-iptables]</span><br><span class="line">enabled  = <span class="literal">true</span></span><br><span class="line">filter   = sshd</span><br><span class="line">action   = iptables[name=SSH, port=22, protocol=tcp]</span><br><span class="line">logpath  = /var/<span class="built_in">log</span>/secure</span><br><span class="line">maxretry = 5</span><br><span class="line">findtime  = 600</span><br><span class="line">bantime = 1800</span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<ul>
<li>enabled： 是否开启</li>
<li><p>filter： 过滤器，具体规则在 filter.d/ 里面看</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat /etc/fail2ban/filter.d/ssh.conf</span><br></pre></td></tr></table></figure>
</li>
<li><p>action=iptables[name=SSH, port=22, protocol=tcp]<br>  port 按实际填，应该是填哪个端口就禁哪个端口，具体未知，也未测试</p>
</li>
<li>logpath: ssh的日志路径，参见 <a href="#查日志文件">ssh日志路径</a></li>
<li>maxretry： 最大尝试次数，超过则会被ban掉</li>
<li>findtime： 查询时间，单位秒，即查询多少秒内的登录错误次数</li>
<li>bantime： 非法IP封禁时间，单位秒，-1 代表永远封锁</li>
</ul>
<h3 id="http服务器防恶意扫描"><a href="#http服务器防恶意扫描" class="headerlink" title="http服务器防恶意扫描"></a>http服务器防恶意扫描</h3><p>以nginx为例，filter里面有一个 nginx-botsearch.conf，就以这个过滤</p>
<p>修改 jail.local 文件，加入以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[http-botsearch]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">port = http</span><br><span class="line">filter = nginx-botsearch</span><br><span class="line">logpath = /path/to/access.log</span><br><span class="line">maxretry = 100</span><br><span class="line">findtime = 5</span><br><span class="line">bantime = 600</span><br><span class="line">action = iptables[name=HTTP,port=http,protocol=tcp]</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/wangxiaoqiangs/p/5630325.html" target="_blank" rel="noopener">参见这里</a></p>
<p><a href="https://blog.51cto.com/7938217/1652970" target="_blank" rel="noopener">参见这里</a></p>
<p><a href="https://www.jianshu.com/p/4fdec5794d08" target="_blank" rel="noopener">参见这里</a></p>
<h3 id="解锁IP地址"><a href="#解锁IP地址" class="headerlink" title="解锁IP地址"></a>解锁IP地址</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fail2ban-client <span class="built_in">set</span> ssh-iptables unbanip xx.xx.xx.xx</span><br></pre></td></tr></table></figure>
<h1 id="web服务"><a href="#web服务" class="headerlink" title="web服务"></a>web服务</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>参见nginx专门有一章</p>
<p>百度 谷歌</p>
<h3 id="letsencrypt"><a href="#letsencrypt" class="headerlink" title="letsencrypt"></a>letsencrypt</h3><blockquote>
<p><a href="https://letsencrypt.org/zh-cn/getting-started/" target="_blank" rel="noopener">https://letsencrypt.org/zh-cn/getting-started/</a></p>
</blockquote>
<p>然后官方推荐 <a href="https://certbot.eff.org/" target="_blank" rel="noopener">certbot</a></p>
<blockquote>
<p><a href="https://certbot.eff.org/" target="_blank" rel="noopener">https://certbot.eff.org/</a></p>
</blockquote>
<h3 id="防恶意解析"><a href="#防恶意解析" class="headerlink" title="防恶意解析"></a>防恶意解析</h3><p>妈的，被别人解析了，会被相关部门打电话。。。</p>
]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>other</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中iptables设置详细</title>
    <url>/2015/2015-2015-03-29-linux-iptables-setup/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<p>无论如何，iptables是一个需要特别谨慎设置的东西，万一服务器不在你身边，而你贸然设置导致无法SSH，那就等着被老板骂吧，呵呵。。。</p>
<p>一下内容是为了防止这种情况发生而写的，当然很初级，不过一般服务器也够用了：</p>
<p>1.首先介绍一下指令和相关配置文件</p>
<ul>
<li>启动指令:service iptables start</li>
<li>重启指令:service iptables restart</li>
<li>关闭指令:service iptables stop</li>
</ul>
<p>然后是相关配置:/etc/sysconfig/iptables</p>
<ul>
<li>如何操作该配置呢？</li>
<li>vim /etc/sysconfig/iptables</li>
<li>然后进去修改即可，修改完了怎么办？这里很多人会想到/etc/rc.d/init.d/iptables save指令，但是一旦你这么干了你刚才的修改内容就白做了。。。</li>
</ul>
<p>具体方法是：</p>
<p>只修改/etc/sysconfig/iptables 使其生效的办法是修改好后先service iptables restart，然后才调用/etc/rc.d/init.d/iptables save，因为/etc/rc.d/init.d/iptables save会在iptables服务启动时重新加载，要是在重启之前直接先调用了/etc/rc.d/init.d/iptables save那么你的/etc/sysconfig/iptables 配置就回滚到上次启动服务的配置了，这点必须注意！！！</p>
<p>2.下面介绍一些指令用法（主要还是man iptables看下相关资料才行）</p>
<ul>
<li>-A：指定链名</li>
<li>-p：指定协议类型</li>
<li>-d：指定目标地址</li>
<li>–dport：指定目标端口（destination port 目的端口）</li>
<li>–sport：指定源端口（source port 源端口）</li>
<li>-j：指定动作类型</li>
</ul>
<p>3.如果我不像修改文件直接打命令可以吗，当然没问题，步骤如下:</p>
<p>例如我给SSH加放行的语句：</p>
<ul>
<li>添加input记录： iptables -A INPUT -p tcp –dport 22 -j ACCEPT</li>
<li>添加output记录： iptables -A OUTPUT -p tcp –sport 22 -j ACCEPT</li>
<li>最后注意需要再执行一下 /etc/init.d/iptables save，这样这两条语句就保存到刚才那个/etc/sysconfig/iptables 文件中了。</li>
</ul>
<p>4.接下来说明一下步骤，如果机器不在我身边，我只能SSH进去做iptables规则，那么我必须注意每一步，千万别搞错了，否则就SSH链接不上都有可能！</p>
<p>首先要做的是给咱的SSH进行ACCEPT配置，以免直接无法连接的情况发生:</p>
<p>1.如果SSH端口是22（这里不建议用默认端口最好改掉SSH端口）</p>
<ul>
<li>iptables -A INPUT -p tcp –dport 22 -j ACCEPT</li>
<li>iptables -A OUTPUT -p tcp –sport 22 -j ACCEPT</li>
<li>注意要/etc/rc.d/init.d/iptables save，以下每一步都最好执行一遍此语句，以下不再累述。</li>
</ul>
<p>2.vim /etc/sysconfig/iptables确定是否已经加入配置，可以的话执行service iptables restart重启后生效</p>
<p>3.下面是很危险的操作，如果你第一步没做就会直接可能导致你连不上SSH，此步骤前切记执行第一步！！！</p>
<ul>
<li>iptables -P INPUT DROP</li>
<li>iptables -P OUTPUT DROP</li>
<li>iptables -P FORWARD DROP</li>
</ul>
<p>这个步骤是把所有不符合自己配置的规则ACCEPT的连接全部DROP掉，执行完以后如果咱SSH还没掉，那么谢天谢地，安全了，重启下iptables后继续下面的配置！</p>
<p>4.下面咱就不细说了，具体就是看自己服务器要开放哪些端口或者是要访问哪些端口来做具体的配置，下面是我自己的机器的配置：</p>
<ul>
<li>/etc/sysconfig/iptables文件配置如下:</li>
<li>#Generated by iptables-save v1.4.7 on Fri Mar  2 19:59:43 2012</li>
<li>*filter</li>
<li>:INPUT DROP [0:0]</li>
<li>:FORWARD DROP [0:0]</li>
<li>:OUTPUT DROP [8:496]</li>
<li>-A INPUT -m state –state RELATED,ESTABLISHED -j ACCEPT</li>
<li>#ping使用的端口</li>
<li>-A INPUT -p icmp -j ACCEPT</li>
<li>-A INPUT -i lo -j ACCEPT</li>
<li>-A INPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT</li>
<li>-A INPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT</li>
<li>#允许服务器自己的SSH（对外部请求来说服务器是目标所以使用–dport）</li>
<li>-A INPUT -p tcp -m tcp –dport 22 -j ACCEPT</li>
<li>#80端口不用说了吧，服务器网站访问端口</li>
<li>-A INPUT -p tcp -m tcp –dport 80 -j ACCEPT</li>
<li>-A INPUT -p tcp -m tcp –dport 3306 -j ACCEPT</li>
<li>-A INPUT -p tcp -m tcp –dport 11211 -j ACCEPT</li>
<li>-A INPUT -p tcp -m tcp –dport 11212 -j ACCEPT</li>
<li>-A FORWARD -j REJECT –reject-with icmp-host-prohibited</li>
<li>#53端口是DNS相关，TCP和UDP都要配置</li>
<li>-A INPUT -p tcp -m tcp –dport 53 -j ACCEPT</li>
<li>-A INPUT -p udp -m udp –dport 53 -j ACCEPT</li>
<li>#ping使用的端口</li>
<li>-A OUTPUT -p icmp -j ACCEPT</li>
<li>-A OUTPUT -s 127.0.0.1/32 -d 127.0.0.1/32 -j ACCEPT</li>
<li>-A OUTPUT -s 192.168.2.200/32 -d 192.168.2.200/32 -j ACCEPT</li>
<li>#允许服务器SSH到其他机器（使用外部端口就使用–dport）</li>
<li>-A OUTPUT -p tcp -m tcp –dport 22 -j ACCEPT</li>
<li>#允许服务器自己的SSH（自已为源输出就使用–sport）</li>
<li>-A OUTPUT -p tcp -m tcp –sport 22 -j ACCEPT</li>
<li>#访问外部网站80端口（使用外部端口就使用–dport）</li>
<li>-A OUTPUT -p tcp -m tcp –dport 80 -j ACCEPT</li>
<li>#如果服务器需要访问外部网站，那么OUTPUT也需要配置53端口（使用外部端口就使用–dport）</li>
<li>-A OUTPUT -p tcp -m tcp –dport 53 -j ACCEPT</li>
<li>-A OUTPUT -p udp -m udp –dport 53 -j ACCEPT</li>
<li>#如果有访问外部邮箱，那么打开邮箱相关端口（使用外部端口就使用–dport）</li>
<li>-A OUTPUT -p tcp -m tcp –dport 465 -j ACCEPT</li>
<li>-A OUTPUT -p tcp -m tcp –dport 25 -j ACCEPT</li>
<li>-A OUTPUT -p tcp -m tcp –dport 110 -j ACCEPT</li>
<li>#服务器网站访问端口（自已为源输出就使用–sport）</li>
<li>-A OUTPUT -p tcp -m tcp –sport 80 -j ACCEPT</li>
<li>-A OUTPUT -p tcp -m tcp –sport 3306 -j ACCEPT</li>
<li>-A OUTPUT -p tcp -m tcp –sport 11211 -j ACCEPT</li>
<li>-A OUTPUT -p tcp -m tcp –sport 11212 -j ACCEPT</li>
<li>COMMIT</li>
<li>Completed on Fri Mar  2 19:59:43 2012</li>
</ul>
<p>5.可能有时候需要删除规则，最简单就是修改一下/etc/sysconfig/iptables然后service iptables restart,最后/etc/rc.d/init.d/iptables save即可。</p>
<p>当然也可以使用指令完成:</p>
<p>在网上找了一下，删除规则的方法：</p>
<p>语法是： iptables -D chain rulenum [options]</p>
<p>其中： chain 是链的意思，就是INPUT FORWARD 之类的<br>             rulenum 是规则的编号。从1 开始。可以使用  –line-numbers 列出规则的编号</p>
<p>所以，例如上面要删除一个INPUT链的规则的话可以这样：<br>    iptables -D INPUT 3</p>
<p>意思是删除第3条规则。</p>
<p>还有第二种方法。第二种办法是 -A 命令的映射，不过用-D替换-A。当你的链中规则很复杂，而你不想计算它们的编号的时候这就十分有用了。也就是说，你如何用iptables -A…. 语句定义了一个规则，则删除此规则时就用 -D 来代替- A  其余的都不变即可。</p>
<p>======================</p>
<p>说一下上面的 –line-numbers 选项，如下面的命令：</p>
<pre><code>iptables -L INPUT --line-numbers
</code></pre><p>列出INPUT 链所有的规则</p>
<ul>
<li>num  target     prot opt source               destination</li>
<li>1    REJECT     tcp  –  anywhere             anywhere            tcp dpt:microsoft-ds reject-with icmp-port-unreachable</li>
<li>2    REJECT     tcp  –  anywhere             anywhere            tcp dpt:135 reject-with icmp-port-unreachable</li>
<li>3    REJECT     tcp  –  anywhere             anywhere            tcp dpt:netbios-ssn reject-with icmp-port-unreachable</li>
</ul>
<p>…</p>
<p>…</p>
<p>删除指定行规则：</p>
<pre><code>[root@localhost rc.d]# iptables -D INPUT 4
</code></pre><p>  6.最后补充一下，如果想针对某IP进行单独开放端口可以如下配置：</p>
<p>如果我需要对内网某机器单独开放mysql端口，应该如下配置：</p>
<pre><code>iptables -A INPUT -s 192.168.2.6 -p tcp -m tcp --dport 3306 -j ACCEPT
iptables -A OUTPUT -s 192.168.2.6 -p tcp -m tcp --sport 3306 -j ACCEPT
</code></pre><p>7.彻底禁止某IP访问:</p>
<p>#屏蔽单个IP的命令是</p>
<pre><code>iptables -I INPUT -s 123.45.6.7 -j DROP
</code></pre><p>#封整个段即从123.0.0.1到123.255.255.254的命令</p>
<pre><code>iptables -I INPUT -s 123.0.0.0/8 -j DROP
</code></pre><p>#封IP段即从123.45.0.1到123.45.255.254的命令</p>
<pre><code>iptables -I INPUT -s 124.45.0.0/16 -j DROP
</code></pre><p>#封IP段即从123.45.6.1到123.45.6.254的命令是</p>
<pre><code>iptables -I INPUT -s 123.45.6.0/24 -j DROP
</code></pre><p>指令I是insert指令 但是该指令会insert在正确位置并不像A指令看你自己的排序位置，因此用屏蔽因为必须在一开始就要加载屏蔽IP，所以必须使用I命令加载，然后注意执行/etc/rc.d/init.d/iptables save进行保存后重启服务即可</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>swoole 做 httpserver 整合phalcon </title>
    <url>/2017/2017-2017-03-22-swoole-httpserver-attention/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在整合的时候遇到的一些问题，先列出来，害怕忘了</p>
<a id="more"></a>
<h1 id="mysql连接断开问题，可能redis等也存在"><a href="#mysql连接断开问题，可能redis等也存在" class="headerlink" title="mysql连接断开问题，可能redis等也存在"></a>mysql连接断开问题，可能redis等也存在</h1><h2 id="找原因"><a href="#找原因" class="headerlink" title="找原因"></a>找原因</h2><ol>
<li><p>mysql 客户端运行时，如果长时间没有操作会自动断开</p>
</li>
<li><p>swoole 开启的服务程序长时间运行，常驻内存</p>
</li>
<li><p>phalcon 里的model 的 find findFirst 方法里面，不能选择di，而只能使用默认 di</p>
<p>以下是model的一段源代码</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">findFirst</span><span class="params">(var parameters = null)</span> -&gt; &lt;<span class="title">Model</span>&gt;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> params, builder, query, bindParams, bindTypes, cache,</span><br><span class="line">            dependencyInjector, manager;</span><br><span class="line"></span><br><span class="line">    let dependencyInjector = Di::getDefault();</span><br><span class="line">    let manager = &lt;ManagerInterface&gt; dependencyInjector-&gt;getShared(<span class="string">"modelsManager"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> typeof parameters != <span class="string">"array"</span> &#123;</span><br><span class="line">        let params = [];</span><br><span class="line">        <span class="keyword">if</span> parameters !== <span class="keyword">null</span> &#123;</span><br><span class="line">                let params[] = parameters;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        let params = parameters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>毋庸置疑，Di::getDefault() 中的 default 肯定是一个静态属性<br> 以下是 di 的一段源代码</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Latest DI build</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> _default;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * ......</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Return the latest DI created</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getDefault</span><span class="params">()</span> -&gt; &lt;<span class="title">DiInterface</span>&gt;</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">self</span>::_default;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p> 也就是说在cli中（也就是server端）调用后，_default 这个属性就会一直在内存中，mysql的客户端（比如pdo）<br> 由于注入到di中（di-&gt;set(‘db’,{PdoAdapter})），并且phalcon在取db时，用的<br> 是di-&gt;getShared(‘db’,{db})，以下是 phalcn/model/manager 中的一段代码</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the connection to read or write data related to a model depending on the connection services.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">_getConnection</span><span class="params">(&lt;ModelInterface&gt; model, connectionServices)</span> -&gt; &lt;<span class="title">AdapterInterface</span>&gt;</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dependencyInjector, service, connection;</span><br><span class="line"></span><br><span class="line">    let service = this-&gt;_getConnectionService(model, connectionServices);</span><br><span class="line"></span><br><span class="line">    let dependencyInjector = &lt;DiInterface&gt; this-&gt;_dependencyInjector;</span><br><span class="line">    <span class="keyword">if</span> typeof dependencyInjector != <span class="string">"object"</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"A dependency injector container is required to obtain the services related to the ORM"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Request the connection service from the DI</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    let connection = &lt;AdapterInterface&gt; dependencyInjector-&gt;getShared(service);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> typeof connection != <span class="string">"object"</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Invalid injected connection service"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>综上所述，如果app长时间没有对数据库的操作，他们之间的连接就会断开，<br>并且不会自动重连，还有一种情况，就是如果mysql服务重启了，连接也不会重连<br>而常规的apache/nginx方式就不会出现这个问题，毕竟每次请求都会新建一个客户端</p>
</li>
<li><p>现在问题找到了，下面就该说解决方法了，方法很多，只是难易问题</p>
</li>
</ol>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol>
<li><p>在每次与mysql 交互时用，如果返回失败，检查错误代码，如果为 2006 / 2013，表示连接失败，再执行一次连接操作。</p>
<p> 这种方法的思路就是很简单，就是没连上就重连</p>
<p> 这明显不可能在业务层实现，但phalcon的源码不是php的，所以dao层也不太方便修改</p>
</li>
<li><p>不用findFirst 这类静态方法，而用builder 来操作数据。</p>
<p> 这样虽能解决问题，但原本一句话能解决的问题需要写多句才能实现。我目前临时用的这种方式，在model 中封装了两个方法来暂代。</p>
</li>
<li><p>其实和2差不多，只是在 modelManager 和 di 上做文章</p>
<p> 也就是说，操作数据库时，不用默认的di（即常驻内存的di），而选用每次请求生成的di</p>
 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findOne</span><span class="params">($parameters = null)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> DiInterface $di */</span></span><br><span class="line">        $di = <span class="keyword">$this</span>-&gt;_dependencyInjector;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$di || !($di <span class="keyword">instanceof</span> DiInterface))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Model\<span class="keyword">Exception</span>(<span class="string">'di must be set in model'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> Model\Manager $manager */</span></span><br><span class="line">        $manager = $di-&gt;getShared(<span class="string">"modelsManager"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!is_array($parameters))&#123;</span><br><span class="line">            $params = [];</span><br><span class="line">            <span class="keyword">if</span> ($parameters !== <span class="keyword">null</span>) &#123;</span><br><span class="line">                $params[] = $parameters;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $params = $parameters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Builds a query with the passed parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $builder = $manager-&gt;createBuilder($params);</span><br><span class="line">        $builder-&gt;from(get_called_class());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * We only want the first record</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $builder-&gt;limit(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> Model\Query $query */</span></span><br><span class="line">        $query = $builder-&gt;getQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Check for bind parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $bindParams = <span class="keyword">isset</span>($bindParams[<span class="string">'bind'</span>]) ? $bindParams[<span class="string">'bind'</span>] : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>($bindParams)&#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($bindParams)) &#123;</span><br><span class="line">                $query-&gt;setBindParams($bindParams, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($params[<span class="string">"bindTypes"</span>]) )&#123;</span><br><span class="line">                <span class="keyword">if</span>(is_array($params[<span class="string">"bindTypes"</span>]))&#123;</span><br><span class="line">                    $query-&gt;setBindTypes($params[<span class="string">"bindTypes"</span>], <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pass the cache options to the query</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>($params[<span class="string">'cache'</span>]))&#123;</span><br><span class="line">            $query-&gt;cache($params[<span class="string">'cache'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Return only the first row</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        $query-&gt;setUniqueRow(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Execute the query passing the bind-params and casting-types</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> $query-&gt;execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">findAll</span><span class="params">($parameters = null)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> DiInterface $di */</span></span><br><span class="line">        $di = <span class="keyword">$this</span>-&gt;_dependencyInjector;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!$di || !($di <span class="keyword">instanceof</span> DiInterface))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Model\<span class="keyword">Exception</span>(<span class="string">'di must be set in model'</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> Model\Manager $manager */</span></span><br><span class="line">        $manager = $di-&gt;getShared(<span class="string">"modelsManager"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!is_array($parameters)) &#123;</span><br><span class="line">            $params = [];</span><br><span class="line">            <span class="keyword">if</span> ($parameters !== <span class="keyword">null</span>) &#123;</span><br><span class="line">                $params[] = $parameters;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $params = $parameters;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Builds a query with the passed parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        $builder = $manager-&gt;createBuilder($params);</span><br><span class="line">        $builder-&gt;from(get_called_class());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> Model\Query $query */</span></span><br><span class="line">        $query = $builder-&gt;getQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Check for bind parameters</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($params[<span class="string">'bind'</span>])) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array($params[<span class="string">'bind'</span>])) &#123;</span><br><span class="line">                $query-&gt;setBindParams($params[<span class="string">'bind'</span>], <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($params[<span class="string">'bindTypes'</span>])) &#123;</span><br><span class="line">                <span class="keyword">if</span> (is_array($params[<span class="string">'bindTypes'</span>])) &#123;</span><br><span class="line">                    $query-&gt;setBindTypes($params[<span class="string">'bindTypes'</span>],<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Pass the cache options to the query</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>($params[<span class="string">'cache'</span>])) &#123;</span><br><span class="line">            $query-&gt;cache($params[<span class="string">'cache'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Execute the query passing the bind-params and casting-types</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> Model\ResultsetInterface|Model\Resultset\Complex $resultSet */</span></span><br><span class="line">        $resultSet = $query-&gt;execute();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Define an hydration mode</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (is_object($resultSet)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">isset</span>($params[<span class="string">'hydration'</span>])) &#123;</span><br><span class="line">                $resultSet-&gt;setHydrateMode($params[<span class="string">'hydration'</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $resultSet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<pre><code>    这样做后代码的前后对比，以findFirst为例

    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 没改之前</span></span><br><span class="line">    </span><br><span class="line">$row = Model::findFirst([...]);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 改了之后</span></span><br><span class="line">    </span><br><span class="line">$row = (<span class="keyword">new</span> Model(<span class="keyword">null</span>,$di))-&gt;findOne([...]);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 或者用 modelManager 来生成</span></span><br><span class="line">$row = <span class="keyword">$this</span>-&gt;modelManager-&gt;load(Model::class)-&gt;findOne([...]);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 使用这种方式的前提是在注入modelManager服务时，就应该把di注入到modelManager中</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1. 注入 modelManager</span></span><br><span class="line">$di-&gt;setShared(<span class="string">'modelManager'</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span> <span class="title">use</span><span class="params">($di)</span></span>&#123;</span><br><span class="line">    $manager = <span class="keyword">new</span> Phalcon\Mvc\Model\Manager();</span><br><span class="line">    $manager-&gt;setDi($di);</span><br><span class="line">    <span class="keyword">return</span> $manager;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 2. findOne</span></span><br><span class="line">$row = <span class="keyword">$this</span>-&gt;modelManager-&gt;load(Model::class)-&gt;findOne([...]);</span><br></pre></td></tr></table></figure>

    如果要实例化一个模型，做 dml 操作，如save
    <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># load的参数2，如果为false，表示不新实例化一个模型，而沿用一个曾经实例化过的模型，</span></span><br><span class="line"><span class="comment"># 目前没有没有测试为false 的情况来做dml操作，但为了不必要的麻烦，暂时不用false的情况</span></span><br><span class="line">$row = <span class="keyword">$this</span>-&gt;modelManager-&gt;load(Model::class，<span class="keyword">true</span>);</span><br><span class="line">$row-&gt;name = <span class="string">'jim green'</span>;</span><br><span class="line">$row-&gt;age  = <span class="string">'13'</span>;</span><br><span class="line">$row-&gt;save();</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">    </span><br><span class="line">$row = <span class="keyword">new</span> Model([<span class="string">'name'</span>=&gt;<span class="string">'tom'</span>,<span class="string">'age'</span>=&gt;<span class="string">'13'</span>],$di);</span><br><span class="line">$row-&gt;save();</span><br></pre></td></tr></table></figure>


4. 还在思考其它方法

   目前想的是，既然要把swoole 和phalcon 合起来，就避免不了两个或多个di。
   所以，我想把model这部分重写了，去掉取默认di的做法。而多个应用之各自分别
   设置不同di，只不过，可能脑壳容易混乱。
</code></pre><h1 id="get-post-cookie-header-的-get-set-问题"><a href="#get-post-cookie-header-的-get-set-问题" class="headerlink" title="get post cookie header 的 get/set 问题"></a>get post cookie header 的 get/set 问题</h1><h1 id="session-的-get-set-问题"><a href="#session-的-get-set-问题" class="headerlink" title="session 的 get/set 问题"></a>session 的 get/set 问题</h1><h1 id="其它解决方法有空再写出来"><a href="#其它解决方法有空再写出来" class="headerlink" title="其它解决方法有空再写出来"></a>其它解决方法有空再写出来</h1>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phalcon</tag>
        <tag>swoole</tag>
      </tags>
  </entry>
  <entry>
    <title>start a new debian</title>
    <url>/2019/2019-07-01-start-a-new-debian/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在下常年用debian做开发。最近买了个5手电脑，又一次装了系统，还是会遇到太多问题。太烦了，还是记下来吧！！！</p>
<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>系统：debian9</li>
<li>用途：开发</li>
</ul>
<h1 id="开始吧"><a href="#开始吧" class="headerlink" title="开始吧"></a>开始吧</h1><h2 id="首先装debian9"><a href="#首先装debian9" class="headerlink" title="首先装debian9"></a>首先装debian9</h2><p>有些问题在联网安装的情况下可能不会发生，但我一般都是断网装</p>
<h2 id="软件源"><a href="#软件源" class="headerlink" title="软件源"></a>软件源</h2><h3 id="aliyun"><a href="#aliyun" class="headerlink" title="aliyun"></a>aliyun</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;eof &gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/debian stretch main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian stretch main non-free contrib</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/debian stretch-updates main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/debian stretch-updates main non-free contrib</span><br><span class="line">eof</span><br></pre></td></tr></table></figure>
<h3 id="us常用"><a href="#us常用" class="headerlink" title="us常用"></a>us常用</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;eof &gt; /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">deb http://ftp.us.debian.org/debian/ stretch main</span><br><span class="line">deb-src http://ftp.us.debian.org/debian/ stretch main</span><br><span class="line"></span><br><span class="line">deb http://security.debian.org/debian-security stretch/updates main</span><br><span class="line">deb-src http://security.debian.org/debian-security stretch/updates main</span><br><span class="line"></span><br><span class="line">deb http://ftp.us.debian.org/debian/ stretch-updates main</span><br><span class="line">deb-src http://ftp.us.debian.org/debian/ stretch-updates main</span><br><span class="line">eof</span><br></pre></td></tr></table></figure>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a>others</h3><pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># no no no</span></span><br></pre></td></tr></table></figure>
</code></pre><p>源设置完成后要update 一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>
<h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><p>一个临时文件夹，操作都在该目录下执行，完后好一起删了<br>一个存放app的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir ~/applications/ -p</span><br><span class="line">mkdir ~/tmp -p &amp;&amp; <span class="built_in">cd</span> ~/tmp</span><br></pre></td></tr></table></figure>
<h2 id="安装代理软件"><a href="#安装代理软件" class="headerlink" title="安装代理软件"></a>安装代理软件</h2><h3 id="apt一波"><a href="#apt一波" class="headerlink" title="apt一波"></a>apt一波</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install -y proxychains privoxy</span><br></pre></td></tr></table></figure>
<h3 id="ss"><a href="#ss" class="headerlink" title="ss"></a>ss</h3><p>安装sslocal</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/uljjmhn555/ssinstaller</span><br><span class="line"><span class="built_in">cd</span> ssinstaller</span><br><span class="line">./install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
<p>配置sslocal</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/shadowsocks/sslocal.json</span><br><span class="line"><span class="comment"># 然后修改相应的地方就</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start sslocal</span><br><span class="line">systemctl <span class="built_in">enable</span> sslocal</span><br></pre></td></tr></table></figure>
<h3 id="proxychains"><a href="#proxychains" class="headerlink" title="proxychains"></a>proxychains</h3><p>配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains.conf</span><br><span class="line"><span class="comment">## 翻到最后把[ProxyList]里的 socks4 xxxxx改为 socks5 127.0.0.1 1080</span></span><br><span class="line"><span class="comment">## 1080 为ss 的端口</span></span><br></pre></td></tr></table></figure>
<h3 id="privoxy"><a href="#privoxy" class="headerlink" title="privoxy"></a>privoxy</h3><h2 id="apt安装常用的软件"><a href="#apt安装常用的软件" class="headerlink" title="apt安装常用的软件"></a>apt安装常用的软件</h2><p>常用的，后续再加<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt-get install -y vim git meld mysql-client curl gdebi net-tools</span><br></pre></td></tr></table></figure></p>
<h2 id="输入法fcitx"><a href="#输入法fcitx" class="headerlink" title="输入法fcitx"></a>输入法fcitx</h2><p>安装之前先看一看是否能正常切换，能切换则可以跳过安装部分</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 删除默认的</span></span><br><span class="line">apt-get remove fcitx* -y</span><br><span class="line">apt-get autoremove -y</span><br><span class="line"></span><br><span class="line"><span class="comment">## 重新安装</span></span><br><span class="line">apt-get install fcitx fcitx-table-wbpy -y</span><br><span class="line"></span><br><span class="line"><span class="comment">## 这两个不晓得有没有用，只有下次试了</span></span><br><span class="line">apt-get install fcitx-ui-classic fcitx-ui-light -y</span><br></pre></td></tr></table></figure>
<p>完成后，记得把fcitx加入自启动<br>以kde 为例<br>在 <strong>设置</strong> 》 <strong>系统设置</strong> 》 <strong>开机和关机</strong> 》 <strong>自动启动</strong> 里面添加</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 环境变量 ，以下5句也不晓得哪些有用，貌似记得是有些窗口不能用fcitx，加入以下变量后就可以了</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;eof &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> LANG=zh_CN.utf8</span><br><span class="line"><span class="built_in">export</span> LANGUAGE=zh_CN</span><br><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=@im=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line">eof</span><br></pre></td></tr></table></figure>
<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="docker-安装"><a href="#docker-安装" class="headerlink" title="docker 安装"></a>docker 安装</h3><p>参见<a href="https://docs.docker.com/install/linux/docker-ce/debian/" target="_blank" rel="noopener">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg2 \</span><br><span class="line">    software-properties-common -y</span><br><span class="line"></span><br><span class="line">curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">    <span class="string">"deb [arch=amd64] https://download.docker.com/linux/debian \</span></span><br><span class="line"><span class="string">    <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">    stable"</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install docker-ce docker-ce-cli containerd.io -y</span><br></pre></td></tr></table></figure>
<h3 id="docker-compose安装"><a href="#docker-compose安装" class="headerlink" title="docker-compose安装"></a>docker-compose安装</h3><p>参见官网链接和compsoe仓库</p>
<blockquote>
<p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">https://docs.docker.com/compose/install/</a></p>
</blockquote>
<blockquote>
<p><a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h3 id="加入常用用户到docker组"><a href="#加入常用用户到docker组" class="headerlink" title="加入常用用户到docker组"></a>加入常用用户到docker组</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo usermod -a -G docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 更新组用户</span></span><br><span class="line">sudo newgrp docker</span><br></pre></td></tr></table></figure>
<h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>阿里云加速</p>
<p>修改<code>data-root</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 阿里云加速</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"registry-mirrors"</span>: [<span class="string">"https://izuikcb5.mirror.aliyuncs.com"</span>],</span><br><span class="line">    <span class="string">"data-root"</span>: <span class="string">"/path/to"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
<h2 id="jetbrains-tool-box"><a href="#jetbrains-tool-box" class="headerlink" title="jetbrains tool box"></a>jetbrains tool box</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tmp</span><br><span class="line">wget https://download-cf.jetbrains.com/toolbox/jetbrains-toolbox-1.15.5387.tar.gz</span><br><span class="line">tar -zxvf jetbrains-toolbox-1.15.5387.tar.gz</span><br><span class="line">mv jetbrains-toolbox-1.15.5387 ~/applications/jetbrains-toolbox/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 jetbrains-toolbox/jetbrains-toolbox</span></span><br></pre></td></tr></table></figure>
<h2 id="virtualbox"><a href="#virtualbox" class="headerlink" title="virtualbox"></a>virtualbox</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tmp/</span><br><span class="line">wget https://download.virtualbox.org/virtualbox/6.0.8/virtualbox-6.0_6.0.8-130520~Debian~stretch_amd64.deb</span><br><span class="line">apt-get install -y linux-headers-$(uname -r) build-essential</span><br><span class="line"><span class="comment">### vboxconfig之前最好upgrade一下，并重启</span></span><br><span class="line">apt-get upgrade -y</span><br><span class="line">apt-get dist-upgrade -y</span><br><span class="line"></span><br><span class="line">reboot</span><br><span class="line">vboxconfig</span><br></pre></td></tr></table></figure>
<h2 id="chrome"><a href="#chrome" class="headerlink" title="chrome"></a>chrome</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">proxychains wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</span><br><span class="line"></span><br><span class="line">sudo gdebi google-chrome-stable_current_amd64.deb</span><br></pre></td></tr></table></figure>
<h2 id="charles"><a href="#charles" class="headerlink" title="charles"></a>charles</h2><p><a href="https://www.charlesproxy.com/latest-release/download.do" target="_blank" rel="noopener">这是官网</a><br>这是用apt 安装的，也可以直接下载</p>
<h3 id="apt方式安装"><a href="#apt方式安装" class="headerlink" title="apt方式安装"></a>apt方式安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -q -O - https://www.charlesproxy.com/packages/apt/PublicKey | sudo apt-key add -</span><br><span class="line"></span><br><span class="line">sudo sh -c <span class="string">'echo deb https://www.charlesproxy.com/packages/apt/ charles-proxy main &gt; /etc/apt/sources.list.d/charles.list'</span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line"></span><br><span class="line">sudo apt-get install charles-proxy</span><br></pre></td></tr></table></figure>
<h3 id="wget方式安装"><a href="#wget方式安装" class="headerlink" title="wget方式安装"></a>wget方式安装</h3><p>下次用这个方式安装<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tmp/</span><br><span class="line">wget https://www.charlesproxy.com/assets/release/4.2.8/charles-proxy-4.2.8_amd64.tar.gz</span><br><span class="line">tar -zxvf charles-proxy-4.2.8_amd64.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mv charles ~/applications/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 bin/charles</span></span><br></pre></td></tr></table></figure></p>
<h3 id="xx"><a href="#xx" class="headerlink" title="xx"></a>xx</h3><p>其它的，目前没有</p>
<h2 id="telegram"><a href="#telegram" class="headerlink" title="telegram"></a>telegram</h2><h2 id="teamviewer"><a href="#teamviewer" class="headerlink" title="teamviewer"></a>teamviewer</h2><p><a href="https://www.teamviewer.com/en/download/linux/" target="_blank" rel="noopener">这是官网</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains wget https://download.teamviewer.com/download/linux/teamviewer_amd64.deb</span><br><span class="line">dpkg -i teamviewer_amd64.deb</span><br></pre></td></tr></table></figure></p>
<h2 id="anydesk"><a href="#anydesk" class="headerlink" title="anydesk"></a>anydesk</h2><p><a href="https://anydesk.com/zhs/downloads/linux" target="_blank" rel="noopener">这是官网</a><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用proxychains 代理有可能会快点</span></span><br><span class="line">proxychains wget https://download.anydesk.com/linux/anydesk_5.1.1-1_amd64.deb</span><br><span class="line">dpkg -i anydesk_5.1.1-1_amd64.deb</span><br></pre></td></tr></table></figure></p>
<h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>用nvm 安装</p>
<blockquote>
<p><a href="https://github.com/nvm-sh/nvm#installing-and-updating" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm#installing-and-updating</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;eof &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="comment"># This loads nvm</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/bash_completion"</span></span><br><span class="line">eof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line">nvm install 10.16</span><br><span class="line">nvm use 10.16</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的10已经老了，现在 lts 都是14了</span></span><br><span class="line">nvm install v14.17.0</span><br><span class="line">nvm use v14.17.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认</span></span><br><span class="line">nvm <span class="built_in">alias</span> default v14.17.0</span><br></pre></td></tr></table></figure>
<h2 id="git-cz"><a href="#git-cz" class="headerlink" title="git cz"></a>git cz</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g commitizen</span><br><span class="line"></span><br><span class="line">npm install -g cz-conventional-changelog</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'&#123; "path": "cz-conventional-changelog" &#125;'</span> &gt; ~/.czrc</span><br></pre></td></tr></table></figure>
<h2 id="code-server"><a href="#code-server" class="headerlink" title="code-server"></a>code-server</h2><blockquote>
<p><a href="https://github.com/cdr/code-server/blob/main/docs/guide.md#2-install-code-server" target="_blank" rel="noopener">https://github.com/cdr/code-server/blob/main/docs/guide.md#2-install-code-server</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://code-server.dev/install.sh | sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> --now code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.config/code-server/config.yaml</span><br><span class="line"></span><br><span class="line">sudo systemctl restart code-server@<span class="variable">$USER</span></span><br></pre></td></tr></table></figure></p>
<h2 id="termius"><a href="#termius" class="headerlink" title="termius"></a>termius</h2><p>这是<a href="https://www.termius.com/linux" target="_blank" rel="noopener">官网</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/tmp/</span><br><span class="line"></span><br><span class="line">wget https://www.termius.com/download/linux/Termius.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i Termius.deb</span><br><span class="line"></span><br><span class="line">apt-get install -f</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应该用 gdebi Termius.deb 应该也可以，下次试试</span></span><br></pre></td></tr></table></figure>
<h2 id="git工具"><a href="#git工具" class="headerlink" title="git工具"></a>git工具</h2><p>我习惯用 meld</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># diff</span></span><br><span class="line">git config --global diff.tool meld</span><br><span class="line"></span><br><span class="line">git config --global difftool.meld.cmd <span class="string">"meld \"\$LOCAL\" \"\$REMOTE\""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># merge</span></span><br><span class="line">git config --global merge.tool meld</span><br></pre></td></tr></table></figure>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>
<p>将以下写入 <code>.bashrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 目前重庆这边不支持ipv6，如果报相关错误就把这条加上</span></span><br><span class="line"><span class="built_in">export</span> PYTHON_CONFIGURE_OPTS=<span class="string">"--disable-ipv6"</span></span><br></pre></td></tr></table></figure>
<p>或一句命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"<span class="variable">$HOME</span>/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br><span class="line"><span class="built_in">export</span> PYTHON_CONFIGURE_OPTS=<span class="string">"--disable-ipv6"</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<p>其它问题</p>
<blockquote>
<p><a href="https://github.com/pyenv/pyenv/wiki/common-build-problems" target="_blank" rel="noopener">https://github.com/pyenv/pyenv/wiki/common-build-problems</a></p>
</blockquote>
<h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><blockquote>
<p><a href="https://www.typora.io/#linux" target="_blank" rel="noopener">https://www.typora.io/#linux</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -</span><br><span class="line"><span class="comment"># add Typora's repository</span></span><br><span class="line">sudo add-apt-repository <span class="string">'deb https://typora.io/linux ./'</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="comment"># install typora</span></span><br><span class="line">sudo apt-get install typora</span><br></pre></td></tr></table></figure>
<h2 id="Atom"><a href="#Atom" class="headerlink" title="Atom"></a>Atom</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><blockquote>
<p><a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a></p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://atom.io/download/deb -o atom-amd64.deb</span><br><span class="line"></span><br><span class="line">sudo dpkg -i atom-amd64.deb</span><br><span class="line"></span><br><span class="line">sudo apt-get install -f</span><br><span class="line"></span><br><span class="line">sudo dpkg -i atom-amd64.deb</span><br></pre></td></tr></table></figure>
<h3 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h3><p>先暂时用别人的，后面写个专题</p>
<blockquote>
<p><a href="https://www.cnblogs.com/fanzhidongyzby/p/6637084.html" target="_blank" rel="noopener">https://www.cnblogs.com/fanzhidongyzby/p/6637084.html</a></p>
</blockquote>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
      <categories>
        <category>other</category>
      </categories>
      <tags>
        <tag>debian</tag>
      </tags>
  </entry>
  <entry>
    <title>pm2里跑的cluster模式里用log4js不工作</title>
    <url>/2019/2019-07-18-express-log4js-in-pm2/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>这不是我第一次踩这个坑了，因为node不是太常用，有时只是遇到问题了查一下就完了。md，又遇到了，决定记下来<br><a id="more"></a>  </p>
<h1 id="这篇文章是转的"><a href="#这篇文章是转的" class="headerlink" title="这篇文章是转的"></a>这篇文章是转的</h1><p>转自</p>
<blockquote>
<p><a href="http://blog.yangfch3.com/2018/04/22/log4js-with-pm2/" target="_blank" rel="noopener">http://blog.yangfch3.com/2018/04/22/log4js-with-pm2/</a></p>
</blockquote>
<p>然后，自己可能会改一些东西</p>
<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>我相信你是在使用 <code>pm2</code> 和 <code>log4js</code> 中踩到了坑才会搜素到这篇文章，我便假定你已经对二者都有了基本的了解，遂不再赘述二者的介绍。</p>
<p><code>pm2</code> 在使用 <code>cluster</code> 模式部署应用时，服务都通过 <code>worker</code> 进程提供，<code>pm2</code> 做为 <code>master</code> 进行监控管理。</p>
<img src="/2019/2019-07-18-express-log4js-in-pm2/pm2.png">
<p>由于存在多个 <code>worker</code> 进程，那么我们在使用 <code>log4js</code> 进行日志记录时会有下列疑问：</p>
<ol>
<li>多个 <code>worker</code> 进程能否正常写入同一个日志文件</li>
<li>要实现 1，<code>pm2</code> 需要作何处理，<code>log4js</code> 需要作何处理</li>
</ol>
<h2 id="退而求其次：多进程分日志？"><a href="#退而求其次：多进程分日志？" class="headerlink" title="退而求其次：多进程分日志？"></a>退而求其次：多进程分日志？</h2><p>首先来尝试“逃避”上面的两个问题。</p>
<p>要“逃避”上面疑问最简易的方案就是：每个进程写入自己的日志文件（例如：<code>robotService-worker&lt;id&gt;.log</code>）。只需要对 <code>log4js</code> 做一下简易的设置即可实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    disableClustering: <span class="literal">true</span></span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方案带来了<strong>日志分散、查阅与处理不方便</strong>的问题，一般情况下不采用。此方案较为经典的使用场景是 <code>pomelo</code> 的多进程游戏日志采集<br>（但 <code>pomelo</code> 不是使用 <code>cluster</code> 来搭建集群）。</p>
<h2 id="log4js-与-pm2-相关源码"><a href="#log4js-与-pm2-相关源码" class="headerlink" title="log4js 与 pm2 相关源码"></a>log4js 与 pm2 相关源码</h2><p><code>lib/log4js</code> 下的 <code>getLogger</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get a logger instance.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@static</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">loggerCategoryName</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;Logger&#125;</span> </span>instance of logger for the category</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLogger</span>(<span class="params">category</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!enabled) &#123;</span><br><span class="line">    configure(process.env.LOG4JS_CONFIG || defaultConfig);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cat = category || <span class="string">'default'</span>;</span><br><span class="line">  debug(<span class="string">`creating logger as <span class="subst">$&#123;isMaster() ? <span class="string">'master'</span> : <span class="string">'worker'</span>&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Logger((isMaster() ? sendLogEventToAppender : workerDispatch), cat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明 <code>log4js</code> 在 <code>cluster</code> 集群模式下与单进程模式（<code>isMaster</code> 方法来区分）下获取 <code>logger</code> 的存在差异。<br>我们关注到 <code>log4js</code> 在 <code>worker</code> 进程下执行的是 <code>workerDispatch</code>。</p>
<p>下面是 <code>isMaster</code> 的源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPM2Master</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> config.pm2 &amp;&amp; process.env[config.pm2InstanceVar] === <span class="string">'0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMaster</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> config.disableClustering || cluster.isMaster || isPM2Master();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>说明 <code>log4js</code> 对普通的 <code>cluster</code> 模式和 <code>pm2</code> 的 <code>cluster</code> 模式又做了区分。我们留意到有两个可配置项：<code>pm2</code> <code>pm2InstanceVar</code>，<br>可以查看 <code>log4js</code> 的<a href="https://log4js-node.github.io/log4js-node/api.html" target="_blank" rel="noopener">文档</a>了解这两个配置项。</p>
<p>继续看 <code>workerDispatch</code> 的源码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">workerDispatch</span>(<span class="params">logEvent</span>) </span>&#123;</span><br><span class="line">  debug(<span class="string">`sending message to master from worker <span class="subst">$&#123;process.pid&#125;</span>`</span>);</span><br><span class="line">  process.send(&#123; <span class="attr">topic</span>: <span class="string">'log4js:message'</span>, <span class="attr">data</span>: serialise(logEvent) &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以得知：<strong>在 pm2 cluster 模式下，<code>log4js</code> 不在 <code>worker</code> 进程直接记录日志，而是将需要记录日志的消息发送给 <code>master</code> 进程。</strong></p>
<p><code>log4js</code> 既然有发送消息的代码，那肯定有接收消息的代码，下面是接收消息的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params">configurationFileOrObject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> configObject = configurationFileOrObject;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> configObject === <span class="string">'string'</span>) &#123;</span><br><span class="line">    configObject = loadConfigurationFile(configurationFileOrObject);</span><br><span class="line">  &#125;</span><br><span class="line">  debug(<span class="string">`Configuration is <span class="subst">$&#123;configObject&#125;</span>`</span>);</span><br><span class="line">  config = <span class="keyword">new</span> Configuration(configObject);</span><br><span class="line">  <span class="built_in">module</span>.exports.levels = config.levels;</span><br><span class="line">  <span class="keyword">const</span> loggerModule = logger(config.levels, levelForCategory, setLevelForCategory);</span><br><span class="line">  Logger = loggerModule.Logger;</span><br><span class="line">  LoggingEvent = loggerModule.LoggingEvent;</span><br><span class="line">  <span class="built_in">module</span>.exports.connectLogger = connectModule(config.levels).connectLogger;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// just in case configure is called after shutdown</span></span><br><span class="line">  process.removeListener(<span class="string">'message'</span>, receiver);</span><br><span class="line">  <span class="keyword">if</span> (cluster) &#123;</span><br><span class="line">    cluster.removeListener(<span class="string">'message'</span>, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.disableClustering) &#123;</span><br><span class="line">    debug(<span class="string">'Not listening for cluster messages, because clustering disabled.'</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPM2Master()) &#123;</span><br><span class="line">    <span class="comment">// PM2 cluster support</span></span><br><span class="line">    <span class="comment">// PM2 runs everything as workers - install pm2-intercom for this to work.</span></span><br><span class="line">    <span class="comment">// we only want one of the app instances to write logs</span></span><br><span class="line">    debug(<span class="string">'listening for PM2 broadcast messages'</span>);</span><br><span class="line">    process.on(<span class="string">'message'</span>, receiver);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">    debug(<span class="string">'listening for cluster messages'</span>);</span><br><span class="line">    cluster.on(<span class="string">'message'</span>, receiver);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    debug(<span class="string">'not listening for messages, because we are not a master process'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> log4js;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// in a multi-process node environment, worker loggers will use</span></span><br><span class="line"><span class="comment">// process.send</span></span><br><span class="line"><span class="keyword">const</span> receiver = <span class="function">(<span class="params">worker, message</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// prior to node v6, the worker parameter was not passed (args were message, handle)</span></span><br><span class="line">  debug(<span class="string">'cluster message received from worker '</span>, worker, <span class="string">': '</span>, message);</span><br><span class="line">  <span class="keyword">if</span> (worker.topic &amp;&amp; worker.data) &#123;</span><br><span class="line">    message = worker;</span><br><span class="line">    worker = <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (message &amp;&amp; message.topic &amp;&amp; message.topic === <span class="string">'log4js:message'</span>) &#123;</span><br><span class="line">    debug(<span class="string">'received message: '</span>, message.data);</span><br><span class="line">    sendLogEventToAppender(deserialise(message.data));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendLogEventToAppender</span>(<span class="params">logEvent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!enabled) <span class="keyword">return</span>;</span><br><span class="line">  debug(<span class="string">'Received log event '</span>, logEvent);</span><br><span class="line">  <span class="keyword">const</span> appenders = appendersForCategory(logEvent.categoryName);</span><br><span class="line">  appenders.forEach(<span class="function">(<span class="params">appender</span>) =&gt;</span> &#123;</span><br><span class="line">    appender(logEvent);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是日志是由 <code>worker</code> –①–&gt; pm2 <code>master</code> –②–&gt; <code>worker</code> 进行的传递，其思路就是日志只由一个 <code>worker</code> 去记录。</p>
<p><strong>而 ② 处的转发以及选择哪一个 <code>worker</code> 去接收就需要 <code>pm2-intercom</code> 这个 pm2 的 module 来处理了。</strong></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>要解决前言中的两个疑问，可以这样做：</p>
<ol>
<li><code>pm2</code> 安装 <code>pm2 install pm2-intercom</code></li>
<li><code>log4js</code> 启用以下配置：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    pm2: <span class="literal">true</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>结束了？</strong></p>
<p>没有。</p>
<p>在上面的代码中我们发现 <code>isPM2Master</code> 的判断中有这样一句代码：<code>process.env[config.pm2InstanceVar] === &#39;0&#39;</code>。</p>
<p>我们查阅 <code>pm2</code> 的<a href="http://pm2.keymetrics.io/docs/usage/environment/#specific-environment-variables" target="_blank" rel="noopener">文档</a>发现，<br><code>pm2</code> 的进程都是有编号的，默认使用 <code>NODE_APP_INSTANCE</code> 环境变量（可以自己配置指定）上标识是 <code>master</code>（=== ‘0’） 还是 <code>worker</code>。<br><code>log4js</code> 也是根据这个特征来实现 <code>isPM2Master</code> 检测。</p>
<p>但是 <code>pm2</code> 不一定使用默认的 <code>NODE_APP_INSTANCE</code> 环境变量来编号，<br>可能会变化——可能是用户自己定义了其他名称（例如<code>node-config</code> 将这个环境变量字段占用了，<code>pm2</code> 只能改用其他的），<br>所以当 <code>pm2</code> 改变了字段名时，<code>log4js</code> 要做相应的配置：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    pm2InstanceVar: <span class="string">'INSTANCE_ID'</span>; <span class="comment">// 默认 NODE_APP_INSTANCE，与 pm2 的配置保持一致即可</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="附赠：单机多-pm2-实例"><a href="#附赠：单机多-pm2-实例" class="headerlink" title="附赠：单机多 pm2 实例"></a>附赠：单机多 pm2 实例</h1><p>一台机器上可以部署多个 <code>pm2</code> 实例，这在我们需要再一台机器上部署多个不同的服务时可以用到，<br>例如我们可能同时在一台机器上部署 <code>web-server</code>和 <code>api-server</code>（因为机器紧张等原因）。</p>
<p>当我们第一次调用 <code>pm2</code> 时，我们会发现 <code>$HOME/.pm2</code> 目录被创建，里面存储着 （该）<code>pm2</code> 实例 的运行信息和日志输出。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">pm2 start app.js -i 3 --name=web-server</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[admin@sypt_web-test_10.0.3.188 .pm2]<span class="comment"># pwd</span></span><br><span class="line">/home/admin/.pm2</span><br><span class="line"></span><br><span class="line">[admin@sypt_web-test_10.0.3.188 .pm2]<span class="comment"># ls -a -l</span></span><br><span class="line">total 72</span><br><span class="line">drwxrwxr-x   5 admin admin  4096 Mar 29 17:19 .</span><br><span class="line">drwx------. 12 admin admin  4096 Apr 11 09:53 ..</span><br><span class="line">drwxrwxr-x   2 admin admin  4096 Mar 29 17:20 logs</span><br><span class="line">-rw-rw-r--   1 admin admin   127 Mar 28 20:58 module_conf.json</span><br><span class="line">drwxrwxr-x   3 admin admin  4096 Mar 28 20:55 modules</span><br><span class="line">drwxrwxr-x   2 admin admin  4096 Apr 16 15:24 pids</span><br><span class="line">-rw-rw-r--   1 admin admin 34054 Apr 16 15:24 pm2.log</span><br><span class="line">-rw-rw-r--   1 admin admin     4 Mar 29 17:19 pm2.pid</span><br><span class="line">srwxrwxr-x   1 admin admin     0 Mar 29 17:19 pub.sock</span><br><span class="line">srwxrwxr-x   1 admin admin     0 Mar 29 17:19 rpc.sock</span><br><span class="line">-rw-rw-r--   1 admin admin    13 Mar 24 15:12 touch</span><br></pre></td></tr></table></figure>
<p>所以要创建多个 <code>pm2</code> 实例就需要每个实例使用不同的目录来存储运行信息。<code>pm2</code> 使用 <code>PM2_HOME</code> 环境变量来识别存储运行信息的目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/web-server/'</span> pm2 start app.js -i --name=web-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有和 web-server 集群相关的 pm2 命令都加上 PM2_HOME</span></span><br><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/web-server/'</span> pm2 list</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/api-server/'</span> pm2 start app.js -i --name=api-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有和 api-server 集群相关的 pm2 命令都加上 PM2_HOME</span></span><br><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/api-server/'</span> pm2 list</span><br></pre></td></tr></table></figure>
<p>为特定的 pm2 实例安装模块：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/web-server/'</span> pm2 install pm2-intercom</span><br><span class="line">PM2_HOME=<span class="string">'/path/to/pm2/api-server/'</span> pm2 install pm2-intercom</span><br></pre></td></tr></table></figure>
<p>Tip：pm2 模块的安装可以不使用线上下载安装的方式（例如不方便执行 pm2 install 操作时），<br>你只需要将模块放到 modules 目录下，然后修改 module_conf.json 注册模块即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── dump.pm2</span><br><span class="line">├── dump.pm2.bak</span><br><span class="line">├── logs</span><br><span class="line">├── module_conf.json</span><br><span class="line">├── modules</span><br><span class="line">│   └── pm2-intercom</span><br><span class="line">│       ├── etc</span><br><span class="line">│       ├── node_modules</span><br><span class="line">│       └── package-lock.json</span><br><span class="line">├── pids</span><br><span class="line">├── pm2.log</span><br><span class="line">├── pm2.pid</span><br><span class="line">├── pub.sock</span><br><span class="line">├── rpc.sock</span><br><span class="line">└── touch</span><br></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// module_conf.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"pm2-intercom"</span>: &#123;</span><br><span class="line">        <span class="attr">"default-strategy"</span>: <span class="string">"broadcast"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"module-db-v2"</span>: &#123;</span><br><span class="line">        <span class="attr">"pm2-intercom"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>node</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>纯新手自学入门机器/深度学习指南（附一个月速成方案）</title>
    <url>/2019/2019-07-30-learn-dl-for-a-noob/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>学习一下dl，哪怕是概念呢。本文是转的。为何要转？怕丢失了呗，哈哈哈哈</p>
<a id="more"></a>  
<p>这篇文章是转的</p>
<blockquote>
<p><a href="http://www.360doc.com/content/18/0527/23/48630098_757540268.shtml" target="_blank" rel="noopener">http://www.360doc.com/content/18/0527/23/48630098_757540268.shtml</a></p>
</blockquote>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/01.jpg">
<h1 id="怎么入门机器-深度学习？"><a href="#怎么入门机器-深度学习？" class="headerlink" title="怎么入门机器/深度学习？"></a>怎么入门机器/深度学习？</h1><p>回答这个问题，最先要考虑的问题是：你有多少时间？</p>
<p>准备用三个月入门，和想要一个月速成，肯定是截然不同的路径。当然我建议大家稳扎稳打，至少可以拿出五个月的时间来学好机器学习的基础知识。</p>
<p>基础很重要，知其所以然很重要。毕竟工具总在进步，每个月都会出现更好的深度学习技术，但基础知识是不变的。</p>
<p>如何用五个月时间入门？下面分三个部分，详细指南。（以及，如果你确实时间有限，最后还有一个速成指南）</p>
<h1 id="五个月入门"><a href="#五个月入门" class="headerlink" title="五个月入门"></a>五个月入门</h1><h2 id="Part-1：从机器学习开始（两个月）"><a href="#Part-1：从机器学习开始（两个月）" class="headerlink" title="Part 1：从机器学习开始（两个月）"></a>Part 1：从机器学习开始（两个月）</h2><p>最好的入门教程，就是吴恩达讲授的机器学习。吴恩达这套课程发布很久了，虽然有些地方稍微过时，但相信我，现在没有任何公开的课程，能比吴恩达讲得更好。<br>真的，课程结束时我几乎哭了出来。</p>
<p>这个课程可以说适合任何水平的学生，当然，你最好还是得知道两个矩阵如何相乘，以及对编程有一些基本的了解。</p>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/02.jpg">
<p>这套课程可以前往Coursera学习，传送门：</p>
<blockquote>
<p><a href="https://www.coursera.org/learn/machine-learning" target="_blank" rel="noopener">https://www.coursera.org/learn/machine-learning</a></p>
</blockquote>
<p>也可以上网易公开课收看，传送门：</p>
<blockquote>
<p><a href="http://open.163.com/special/opencourse/machinelearning.html" target="_blank" rel="noopener">http://open.163.com/special/opencourse/machinelearning.html</a></p>
</blockquote>
<p>如果你有时间，一定要听完全部的课程。如果时间紧张，至少要听完前五节课程，后面的可以暂时跳过。</p>
<p>吴恩达的机器学习课程深入讲解了经典的机器学习模型，如线性回归、逻辑回归、神经网络、支持向量机、PCA、无监督学习等等。<br>大部分重要概念，都以简单易懂的方式进行了介绍。</p>
<p><strong>课程延伸</strong></p>
<p>当你学习到第五节课，也就是开始讲述神经网络时，建议开始查看与课程平行的外部资料。比方3bule1brown推出的神经网络讲解视频。推荐必看。</p>
<p>YouTube传送门：</p>
<blockquote>
<p><a href="https://youtu.be/aircAruvnKk?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi" target="_blank" rel="noopener">https://youtu.be/aircAruvnKk?list=PLZHQObOWTQDNU6R1_67000Dx_ZCJB-3pi</a></p>
</blockquote>
<p>或者可以前往B站查看：</p>
<blockquote>
<p><a href="http://space.bilibili.com/88461692/#/" target="_blank" rel="noopener">http://space.bilibili.com/88461692/#/</a></p>
</blockquote>
<p>这里给个示例：</p>
<p>以及，我觉得吴恩达在讲神经网络时有点快，所以建议补充阅读一些资料。比如有关神经网络和深度学习的在线书籍，免费的就很好了。</p>
<p>传送门：</p>
<blockquote>
<p><a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="noopener">http://neuralnetworksanddeeplearning.com/</a></p>
</blockquote>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/03.jpg">
<p>作者Michael A. Nielsen以一种简单直观的方式，深入探究了神经网络的每个细节。建议阅读这本书的前两章，与吴恩达的课程并行。当你熟悉更多概念后，开始搞深度学习时，可以再看书中的其余部分。<br>如果你英文不好，这本《神经网络与深度学习》也有中文翻译版本，可以免费在线查看。<br>感谢译者，传送门在此：</p>
<blockquote>
<p><a href="https://tigerneil.gitbooks.io/neural-networks-and-deep-learning-zh/content/" target="_blank" rel="noopener">https://tigerneil.gitbooks.io/neural-networks-and-deep-learning-zh/content/</a></p>
</blockquote>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/04.jpg">
<p>这个部分的学习结束之后，你就能明白机器/深度学习的许多概念。最后推荐阅读Christopher Olah的博客，很有意思。</p>
<p>传送门：</p>
<blockquote>
<p><a href="http://colah.github.io/" target="_blank" rel="noopener">http://colah.github.io/</a></p>
</blockquote>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/05.jpg">
<h2 id="Part-2：涉足深度学习（1个月）"><a href="#Part-2：涉足深度学习（1个月）" class="headerlink" title="Part 2：涉足深度学习（1个月）"></a>Part 2：涉足深度学习（1个月）</h2><p>开始研究深度学习之前，最好重温一下大学数学。Ian Goodfellow传奇般的“花书”《深度学习》，简明扼要的概括了大部分重要主题。</p>
<p>建议大家尽可能深入地阅读线性代数、概率、信息理论的章节。每当读论文遇到深度学习概念时，都可以在书中找到参考。</p>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/06.jpg">
<p>以及，这本书有在线的版本。</p>
<p>例如英文版在此：</p>
<blockquote>
<p><a href="https://github.com/janishar/mit-deep-learning-book-pdf/blob/master/complete-book-bookmarked-pdf/deeplearningbook.pdf" target="_blank" rel="noopener">https://github.com/janishar/mit-deep-learning-book-pdf/blob/master/complete-book-bookmarked-pdf/deeplearningbook.pdf</a></p>
</blockquote>
<p>而中文翻译版本在此：</p>
<blockquote>
<p><a href="https://github.com/exacity/deeplearningbook-chinese" target="_blank" rel="noopener">https://github.com/exacity/deeplearningbook-chinese</a></p>
</blockquote>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/07.jpg">
<p>关于深度学习的在线资料有很多，你可能会挑花了眼。</p>
<p>再一次，我觉得最好的选择，还是听吴恩达的《深度学习专项系列课程（Deep Learning Specialization）》。</p>
<p>Coursera传送门：</p>
<blockquote>
<p><a href="https://www.coursera.org/specializations/deep-learning" target="_blank" rel="noopener">https://www.coursera.org/specializations/deep-learning</a></p>
</blockquote>
<p>网易云课堂的传送门：</p>
<blockquote>
<p><a href="https://mooc.study.163.com/smartSpec/detail/1001319001.htm/" target="_blank" rel="noopener">https://mooc.study.163.com/smartSpec/detail/1001319001.htm/</a></p>
</blockquote>
<p>这门课程包括五大章节。其实不是免费的，你可以按照50美元/月购买。当然，如果你负担不起，还能申请“助学金”。申请时请详细阐明理由，处理的时间大概需要15天左右。</p>
<p>当然不付费，大部分内容都是可以看的。以及视频的部分，在很多地方也能免费收看。</p>
<p>这五门课程主要讲的是：</p>
<ol>
<li>神经网络和深度学习（4周）</li>
<li>改善深度神经网络（3周）</li>
<li>结构化机器学习项目（2周）</li>
<li>卷积神经网络（4周）</li>
<li>序列模型（3周）</li>
</ol>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/08.jpg">
<p>前三门课程涉及一般的神经网络和深度学习，第四、第五门课程涉及特定主题。如果你打算搞视觉，第四课必听；<br>如果你搞NLP、音频等，第五课必听。但如果你需要听第五课，那么建议也把第四课好好听一下。</p>
<p>这里鼓励大家一下，课程里每周的内容，实际上一两天就能学完，所以不要被课程表吓倒。劳逸集合、提升效率。</p>
<p>学到这个地步，其实就可以再去<a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="noopener">http://neuralnetworksanddeeplearning.com/</a> ，查看第三到第六章的内容，来强化你的概念。<br>如果你有什么还没搞懂的，请前往Olah的博客。</p>
<p>以及，这时候你要开始看深度学习的论文了，从中学习知识。深度学习有个强烈的特点，那就是内容都非常新，阅读论文是跟上时代唯一的方法。<br>不想被抛下，那么还是养成阅读论文的好习惯吧。</p>
<h2 id="Part-3：深度学习上手练（两个月）"><a href="#Part-3：深度学习上手练（两个月）" class="headerlink" title="Part 3：深度学习上手练（两个月）"></a>Part 3：深度学习上手练（两个月）</h2><p>学到这里，你应该对机器学习和深度学习中的大多数概念有了正确的理解，现在是时候投入沸腾的实际生活中了。</p>
<p>练手深度学习，最好的资源在fast.ai。</p>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/09.jpg">
<p>传送门在此：</p>
<blockquote>
<p><a href="http://course.fast.ai/" target="_blank" rel="noopener">http://course.fast.ai/</a></p>
</blockquote>
<p>他们在流行的深度学习工具PyTorch上构建了一个库，只需要几行代码，就能实现世界级的性能。</p>
<p>fast.ai的理念有点不同。吴恩达等老师的教授方法是自上而下，先讲再做。而fast.ai倡导自下而上，先做再讲。</p>
<p>所以在他们的课程中，第一节就带你建立一个强大的图像分类器。自己训练模型的快感，刺激着你去完成其余的课程。</p>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/10.jpg">
<p>除此以外，还要推荐两门课。</p>
<p>斯坦福大学的CS231n和CS224n。CS231n专注于计算机视觉的深度学习，而CS224n专注于序列建模。</p>
<p>CS231n，李飞飞等主讲。</p>
<p>官网传送门：</p>
<blockquote>
<p><a href="http://cs231n.stanford.edu/" target="_blank" rel="noopener">http://cs231n.stanford.edu/</a></p>
</blockquote>
<p>CS224n，目前是Richard Socher主讲。<br>官网传送门：</p>
<blockquote>
<p><a href="http://web.stanford.edu/class/cs224n/" target="_blank" rel="noopener">http://web.stanford.edu/class/cs224n/</a></p>
</blockquote>
<p>此前的课程，网上也有中文字幕版本，大家可自行搜索。</p>
<p>到这里，为期五个月的机器/深度学习入门就结束了。</p>
<p>希望大家都能稳扎稳打，夯实基础。</p>
<p>以及最后，兑现一个开头的承诺。如果你确实时间很紧张，必须尽快入门机器/深度学习，那么请看——</p>
<h1 id="速成指南"><a href="#速成指南" class="headerlink" title="速成指南"></a>速成指南</h1><h2 id="我最多只有俩月"><a href="#我最多只有俩月" class="headerlink" title="我最多只有俩月"></a>我最多只有俩月</h2><ol>
<li>完成吴恩达机器学习课程的前五周，要做编程练习。</li>
<li>看完3Blue1Brown的视频。</li>
<li>完成吴恩达的深度学习专项系列课程，做练习。</li>
<li>如果你想搞图像，看专项课程第四讲，搞NLP或序列数据，看第五讲。</li>
<li>搜索你感兴趣的开源实现。如果你还没想好用什么语言，推荐Keras。然后根据需要，再迁到TensorFlow或者PyTorch框架。</li>
</ol>
<h2 id="我只有一个月"><a href="#我只有一个月" class="headerlink" title="我只有一个月"></a>我只有一个月</h2><p>想要在30天完成入门超级困难。除非，你只是想了解机器学习的工作原理，然后应用到自己的项目中。</p>
<p>如果是这样的话，速成建议如下：</p>
<ol>
<li>略读吴恩达机器学习课程第1-5周的课程，只看视频，掌握概念即可。第三周可以跳过MATLAB/Octave课程。</li>
<li>看完3Blue1Brow的视频。</li>
<li>略读吴恩达深度学习专项系列课程的第一课，也就是神经网络和深度学习。</li>
<li>如果你想做图像处理项目，看一下Nielsen书中的第六章：<a href="http://neuralnetworksanddeeplearning.com/chap6.html" target="_blank" rel="noopener">http://neuralnetworksanddeeplearning.com/chap6.html</a><br> 如果你需要序列建模的一些想法，可以看看Olah的博客：<a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-08-Understanding-LSTMs/</a><br>5、Siraj Raval拍了很多有趣的视频，涉及大多数机器/深度学习的主题。传送门在此：<a href="https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A" target="_blank" rel="noopener">https://www.youtube.com/channel/UCWN3xxRkmTPmbKwht9FuE5A</a><br>6、搜索跟你感兴趣的开源实现，随时调整以满足你的需求。如前所述，我推荐你先用带有TensorFlow后端的Keras语言。</li>
</ol>
<h1 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h1><p>YouTube上有一个两分钟读论文的系列视频，可以帮你快速了解全球深度学习的最热门进展。</p>
<p>如果你关注进机器学习领域的进展，Twitter是个绝佳的工具。</p>
<p>遇到困境的时候，记得reddit和Facebook上有很多志同道合的人，不要犹豫，在社区里寻求帮助，大家会伸出援手。</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>机器学习和深度学习是当今世界最具魅力的技术之一。而且这个领域的深度学习专家总是处于稀缺的状态。从职业前景来看，深度学习非常吸引人。</p>
<p>需要提醒的是，与计算机学科的其他领域不同，深度学习的资源还不够丰富。很多时候你会遇到失败挫折，千万不要灰心丧气，<br>你可以向更多人寻求帮助，很多人都愿意伸出援手，大家都在学习。</p>
<p>关于机器/深度学习，有一个误解是需要计算机科学的背景才能学习。这不是真的，你确实需要一些编程的思维才好入手，但也仅限于此。<br>现在机器学习领域的很多专家，都来自其他研究领域。</p>
<p>如果你有计算机科学的背景，这是一个非常好的开始。但如果你出身其他学科，想要迎头赶上并不难。</p>
<p>感谢看到这里。</p>
<img src="/2019/2019-07-30-learn-dl-for-a-noob/11.jpg">
<p>— 完 —</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>develop</tag>
        <tag>learn</tag>
        <tag>dl</tag>
      </tags>
  </entry>
  <entry>
    <title>openvpn通过ss隐藏流量</title>
    <url>/2020/2020-03-06-openvpn-over-ss/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>作为一个开发者，日常工作就是解决各类开发问题。但是，由于众所周知的原因，有些问题的难度不在于问题本身，而在于其它的东西<br><a id="more"></a>  </p>
<h1 id="科学上网"><a href="#科学上网" class="headerlink" title="科学上网"></a>科学上网</h1><ol>
<li><p>浏览器上网问题（比如google一些资料啊），一般各种科学上网工具都都解决</p>
</li>
<li><p>一些软件需要外网，但是又没有配置代理的功能</p>
<p> 可以考虑用<code>ss</code>的全局代理或<code>proxifier</code>等工具</p>
</li>
<li><p>还有极少数的软件，用以上两种办法都没法解决的<br> 比如使用 go get</p>
<p> 通常，go get 可以在 <code>GO111MODULE</code>为<code>on</code>时，使用代理。但是在使用 <a href="https://github.com/go-flutter-desktop/go-flutter" target="_blank" rel="noopener">go-flutter</a>时，要求不能设为<code>on</code></p>
<p> 然后我尝试了各种方法，在win下面都不能成功正常使用（linux下却go get成功了），也不知道是不是win本身的问题</p>
</li>
</ol>
<h1 id="vpn"><a href="#vpn" class="headerlink" title="vpn"></a>vpn</h1><p>因为众所周知的原因，市面上各大vpn会被轻易的识别出来，因为vpn一般的不会隐藏流量。所以我们要学会用一些方法来隐藏一下流量，比如用利用隧道</p>
<p>以<a href="#openvpn安装">openvpn</a>为例</p>
<p>正常情况</p>
<p>openvpn client <-> openvpn server</-></p>
<p>用隧道的情况</p>
<p>openvpn client <-> 隧道入口 <-> 隧道服务（ss/ssh等） <-> 隧道出口 <-> openvpn server</-></-></-></-></p>
<p>即 client 和 server 之间，利用隧道来隐藏流量</p>
<h2 id="ssh隧道"><a href="#ssh隧道" class="headerlink" title="ssh隧道"></a>ssh隧道</h2><p>ssh隧道是很常见的一种方式，只是在下用得少</p>
<p>安全性肯定没得说，能否被某系统识别这就不知道了，毕竟用得少</p>
<h2 id="ss隧道"><a href="#ss隧道" class="headerlink" title="ss隧道"></a>ss隧道</h2><p>我以前看过ss的wiki，发现有一个配置是也是讲openvpn的，用的是openvpn的内置代理<code>socks-proxy</code>，但是我试了几次都没成功，发现代理不生效。并且我把本的ss关了后，opv仍然能连接。。。</p>
<p>然后，思索了下，虽然没成功，也算有点灵感</p>
<p>ss-libev里面，有一个<code>ss-tunnel</code>就是专门用于端口转发的，那么我们可以用他来做个隧道。然后通过这个隧道来建立openvpn的c/s的连接</p>
<p>ps：笔者试了openvpn如果用udp方式连接，那么这种方式不成功，不知道是不是哪里的配置不小心搞错了。以下步骤是基于openvpn使用tcp方式连接</p>
<p>下面说一下具体步骤</p>
<h3 id="1、先确定本地的ss-client-能正常连接服务端的-ss-server"><a href="#1、先确定本地的ss-client-能正常连接服务端的-ss-server" class="headerlink" title="1、先确定本地的ss client 能正常连接服务端的 ss server"></a>1、先确定本地的ss client 能正常连接服务端的 ss server</h3><p>由于这个前面已经写过了，这里就不用写了</p>
<a href="/2015/08-11-p-shadowsocks-config/" title="shadowsocks常用配置">shadowsocks常用配置</a>
<h3 id="2、用ss-tunnel建立一个隧道"><a href="#2、用ss-tunnel建立一个隧道" class="headerlink" title="2、用ss-tunnel建立一个隧道"></a>2、用ss-tunnel建立一个隧道</h3><p><a href="#ss-tunnel编译">ss-tunel编译</a></p>
<p>下载好ss-tunnel，并在同一文件夹下建一个配置文件 <code>config.json</code><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"SS_SERVER_IP"</span>,</span><br><span class="line">  <span class="attr">"server_port"</span>: <span class="number">8388</span>,</span><br><span class="line">  <span class="attr">"local_port"</span>: <span class="number">1194</span>,</span><br><span class="line">  <span class="attr">"password"</span>: <span class="string">"PASSWORD"</span>,</span><br><span class="line">  <span class="attr">"method"</span>: <span class="string">"aes-256-cfb"</span>,</span><br><span class="line">  <span class="attr">"tunnel_address"</span>: <span class="string">"172.17.0.1:1194"</span>,</span><br><span class="line">  <span class="attr">"mode"</span>: <span class="string">"tcp_and_udp"</span>,</span><br><span class="line">  <span class="attr">"timeout"</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>比如在win中，目录结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├─ config.json</span><br><span class="line">├─ run.bat</span><br><span class="line">├─ ss-tunnel-x64.exe</span><br></pre></td></tr></table></figure>
<p>其中run.bat中，就一句代码</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">.\ss-tunnel-x64.exe -c .\config.json</span><br></pre></td></tr></table></figure>
<p>将配置文件的设设置正确，与ss客户端的配置大致相同</p>
<p>其中：</p>
<p><code>local_port</code>：本地监听端口，也就是上文提到的隧道入口的端口</p>
<p><code>tunnel_address</code>: 目标地址和端口，即上文提到的隧道出口的地址和端口</p>
<p>示例中，因为我的<code>openvpn</code>和<code>ss-server</code>在同一台机器上，并且都是用docker跑的，所以用 172.17.0.1(用docker内网也可以，但是用docker内置dns则不能，原因未明)</p>
<h3 id="3、在命令行中运行"><a href="#3、在命令行中运行" class="headerlink" title="3、在命令行中运行"></a>3、在命令行中运行</h3><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">.\ss-tunnel-x64.exe -c .\config.json</span><br></pre></td></tr></table></figure>
<p>或者直接运行目录中的<code>run.bat</code></p>
<p>隧道建立成功后，我们在本地访问 <code>local_port</code> (localhost:local_port)，就会访问到相对于<code>ss-server</code>服务端的<code>tunnel_address</code></p>
<p>以示例配置文件为<code>config.json</code>例，访问本地的<code>1194</code>端口时，ss-tunnel会将请求转发到服务端，并从服务端访问 <code>172.17.0.1:1194</code></p>
<h3 id="4、修改openvpn的配置文件"><a href="#4、修改openvpn的配置文件" class="headerlink" title="4、修改openvpn的配置文件"></a>4、修改openvpn的配置文件</h3><p>openvpn的配置文件为 xxxx.ovpn</p>
<p>修改你的ovpn配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">remote 127.0.0.1 1194 tcp</span><br><span class="line">route SS_SERVER_IP 255.255.255.255 net_gateway</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>通常情况，一般为直接连接，则 <code>remote</code> 后面通常为一个公网ip，比如我把vpn搭在和ss-server搭在同一台电脑上，则这里的ip就和ss-server的ip一致。</p>
<p>现在，因为用到的隧道，就应该填隧道的ip和端口，以示例<code>config.json</code>为例，<code>就填 remote 127.0.0.1 1194 tcp</code><br>(示例中，ss-tunnel和openvpn在同一台机器上，如果不同机，则以实际为准)</p>
<p>然后，就是还要加上一句 <code>route XXX_IP 255.255.255.255 net_gateway</code></p>
<p>这句的意思是 <code>XXX_IP</code>的流量，用直连方式，不通过vpn。这句很重要的，因为vpn是全局的，默认情况ss的连接也会走vpn，如果不排除，则ss也不能连接到远程服务器了</p>
<p>另因为我的ss-client和openvpn-client在同一机器，所以排除的是ss-client连接的服务端地址</p>
<p>如果ss-client和openvpn-client 不在同一机器，则应该排除的是ss-client的ip地址</p>
<h3 id="5、将修改后的ovpn文件重新导入openvpn-client中，正常情况下，就能连接了"><a href="#5、将修改后的ovpn文件重新导入openvpn-client中，正常情况下，就能连接了" class="headerlink" title="5、将修改后的ovpn文件重新导入openvpn-client中，正常情况下，就能连接了"></a>5、将修改后的ovpn文件重新导入openvpn-client中，正常情况下，就能连接了</h3><h3 id="6、优点"><a href="#6、优点" class="headerlink" title="6、优点"></a>6、优点</h3><ol>
<li>全局，比proxifier的全局更彻底</li>
<li>用ss的加密隧道隐藏了openvpn的流量，使之相对不易被封</li>
<li>这种方式不用将openvpn的服务端的端口暴露（监听0.0.0.0），以示例来说，openvpn 只需监听172.17.0.1:1194就行了</li>
</ol>
<h3 id="7、缺点"><a href="#7、缺点" class="headerlink" title="7、缺点"></a>7、缺点</h3><p>肯定比较慢一点</p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="ss-tunnel编译"><a href="#ss-tunnel编译" class="headerlink" title="ss-tunnel编译"></a>ss-tunnel编译</h2><blockquote>
<p>详情见<br><a href="https://github.com/shadowsocks/shadowsocks-libev" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-libev</a></p>
</blockquote>
<p>我一般在linux下编译，跨平台编译依赖docker</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shadowsocks/shadowsocks-libev</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> shadowsocks-libev/docker/mingw</span><br><span class="line"></span><br><span class="line">git submodule init &amp;&amp; git submodule update</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h2 id="openvpn安装"><a href="#openvpn安装" class="headerlink" title="openvpn安装"></a>openvpn安装</h2><p>一般习惯用docker了，然后用docker-compose编排</p>
<p>先上一个<code>docker-compose.yml</code>文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2.1'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">'openvpn'</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">'kylemanna/openvpn'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">openvpn_data:/etc/openvpn</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">1194</span><span class="string">:1194</span></span><br><span class="line">    <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">frontend</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">openvpn_data:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">ovpn-data-example</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">frontend:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">frontend</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中的network和 volume 是个人习惯，即会先在外部用docker创建</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network create frontend</span><br><span class="line">docker volume create --name ovpn-data-example</span><br></pre></td></tr></table></figure>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 先准备</span></span><br><span class="line"><span class="comment"># 随便找一个文件夹再创建一个openvpn文件夹。比如 ~/openvpn</span></span><br><span class="line"></span><br><span class="line">mkdir ~/openvpn &amp;&amp; <span class="built_in">cd</span> ~/openvpn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个上面的 docker-compose.yml 文件。</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;eof &gt; docker-compose.yml</span><br><span class="line">version: <span class="string">'2.1'</span></span><br><span class="line">services:</span><br><span class="line">  server:</span><br><span class="line">    container_name: <span class="string">'openvpn'</span></span><br><span class="line">    image: <span class="string">'kylemanna/openvpn'</span></span><br><span class="line">    volumes:</span><br><span class="line">      - openvpn_data:/etc/openvpn</span><br><span class="line">    ports:</span><br><span class="line">      - 1194:1194</span><br><span class="line">    privileged: <span class="literal">true</span></span><br><span class="line">    networks:</span><br><span class="line">      - frontend</span><br><span class="line">    restart: always</span><br><span class="line">    env_file:</span><br><span class="line">      - .env</span><br><span class="line">volumes:</span><br><span class="line">  openvpn_data:</span><br><span class="line">    external:</span><br><span class="line">      name: ovpn-data-example</span><br><span class="line">networks:</span><br><span class="line">  frontend:</span><br><span class="line">    external:</span><br><span class="line">      name: frontend</span><br><span class="line">eof</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建 .env文件，写入相关信息</span></span><br><span class="line"><span class="comment"># 这一步我们定义两个变量,OPV_HOST 和 OPV_SCHEME</span></span><br><span class="line"><span class="comment"># OPV_HOST指你的公网ip，或域名</span></span><br><span class="line"><span class="comment"># OPV_SCHEME指opvpn的协议，openvpn支持 tcp 和udp. 本文中，在测试udp转发时失败了，所以用tcp</span></span><br><span class="line"></span><br><span class="line">cat &lt;&lt;eof &gt; .env</span><br><span class="line">OPV_HOST=www.baidu.commmmm</span><br><span class="line">OPV_SCHEME=tcp</span><br><span class="line">eof</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备工作做完了，下面开始</span></span><br></pre></td></tr></table></figure>
<h4 id="运行一个容器并配置"><a href="#运行一个容器并配置" class="headerlink" title="运行一个容器并配置"></a>运行一个容器并配置</h4><ol>
<li><p>运行一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm server bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ovpn_genconfig -u <span class="variable">$&#123;OPV_SCHEME&#125;</span>://<span class="variable">$&#123;OPV_HOST&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">touch /etc/openvpn/vars</span><br><span class="line">ovpn_initpki</span><br></pre></td></tr></table></figure>
<p>该步骤会填写相关信息</p>
<p>Enter PEM pass phrase: 输入123456（你是看不见的）<br>Verifying - Enter PEM pass phrase: 输入123456（你是看不见的）<br>Common Name (eg: your user, host, or server name) [Easy-RSA CA]:回车一下<br>Enter pass phrase for /etc/openvpn/pki/private/ca.key:输入123456 </p>
</li>
<li><p>创建用户<br>命令中的 <code>CLIENTNAME</code> 为你的客户端用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">easyrsa build-client-full CLIENTNAME nopass</span><br><span class="line">Enter pass phrase <span class="keyword">for</span> /etc/openvpn/pki/private/ca.key:输入123456 （你是看不见的）</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成密钥<br>生成的密钥因为需要使用并且还要传给客户端，所以退出容器操作比较方便</p>
<p>按下 <code>ctrl + d</code> ，即可退出容器</p>
<p>执行以下命令</p>
<p>命令中的 <code>CLIENTNAME</code> 为你的客户端用户名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose run --rm server ovpn_getclient CLIENTNAME &gt; CLIENTNAME.ovpn</span><br></pre></td></tr></table></figure>
</li>
<li><p>将生成的 <code>CLIENTNAME.ovpn</code> 发送到客户端以供使用</p>
</li>
<li><p>运行openvpn服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>自此，openvpn服务就能成功运行了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>network</tag>
        <tag>develop</tag>
      </tags>
  </entry>
  <entry>
    <title>开始尝试使用swarm之第三篇-多节点操作</title>
    <url>/2021/2021-11-13-try-using-docker-swarm-node2/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>尝试一下docker-swarm之hello world<br><a id="more"></a>  </p>
<h1 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h1><p>接上文，本文一共在虚拟机上运行了三个节点。它们都是管理节点。然后对service做了一些简单的增删查操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node  ls</span><br><span class="line"><span class="comment"># ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span></span><br><span class="line"><span class="comment">#xgjnkzvysal5fv7ugm1t5d7zr *   swarmmanger    Ready     Active         Leader           20.10.21</span></span><br><span class="line"><span class="comment">#e3ye8fep0dr3xkxrzdxz8wzjw     swarmworker1   Ready     Active         Reachable        20.10.21</span></span><br><span class="line"><span class="comment">#i5vz5saiixnx82j9hpy4d5wmc     swarmworker2   Ready     Active         Reachable        20.10.21</span></span><br></pre></td></tr></table></figure>
<p>在这3个节点上，本文就要开始做多节点方面的操作</p>
<h1 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h1><p>什么是task</p>
<p>大意就是服务的执行者，一个服务通过多个task来执行服务</p>
<p>swarm的task之于service相当于：</p>
<p>面向对像的object之于class；</p>
<p>docker的container之于images；</p>
<p>一个服务可有多个task，并且通过内部算法，部署在一个或多个node上</p>
<p>处理各类任务的，也是这些task</p>
<p>设置task个数的参数为<code>replicas</code>，即复制品或副本…</p>
<p>那么我们来试一下</p>
<h1 id="创建多task的service并指定node"><a href="#创建多task的service并指定node" class="headerlink" title="创建多task的service并指定node"></a>创建多task的service并指定node</h1><p>现在，我们一共3个节点，创建服务时将<code>replicas</code>设为2</p>
<p>分别按以下条件指定<code>--constraint</code> 参数</p>
<p>由于遇到一些问题，此时再次查看一下node数量 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node ls</span><br><span class="line"><span class="comment"># ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span></span><br><span class="line"><span class="comment"># xgjnkzvysal5fv7ugm1t5d7zr *   swarmmanger    Ready     Active         Leader           20.10.21</span></span><br><span class="line"><span class="comment"># e3ye8fep0dr3xkxrzdxz8wzjw     swarmworker1   Ready     Active         Reachable        20.10.21</span></span><br><span class="line"><span class="comment"># 61yvp61wb1ojwytecc7d8vtcf     swarmworker2   Down      Active                          20.10.21</span></span><br><span class="line"><span class="comment"># hmekztyy9ux1soi3mg7xde7f5     swarmworker2   Ready     Active                          20.10.21</span></span><br><span class="line"><span class="comment"># i5vz5saiixnx82j9hpy4d5wmc     swarmworker2   Down      Active                          20.10.21</span></span><br></pre></td></tr></table></figure>
<p>swarmworker2因为遇到了问题，前后执行了两次leave，导致id发生了变化。从<code>status</code>看，只有3个是<code>ready</code>的</p>
<h2 id="不指定条件"><a href="#不指定条件" class="headerlink" title="不指定条件"></a>不指定条件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service create --replicas 2 --name hello_without_constraint  alpine ping docker.com</span><br><span class="line"><span class="comment"># rbzl783j0ngiu5apkc3ivuz8m</span></span><br><span class="line"><span class="comment"># overall progress: 2 out of 2 tasks</span></span><br><span class="line"><span class="comment"># 1/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># 2/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment"># verify: Service converged</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker service ps  hello_without_constraint</span><br><span class="line"><span class="comment"># ID             NAME                         IMAGE           NODE           DESIRED STATE   CURRENT STATE            ERROR     PORTS</span></span><br><span class="line"><span class="comment"># 9abhtllls5yu   hello_without_constraint.1   alpine:latest   swarmworker2   Running         Running 23 seconds ago</span></span><br><span class="line"><span class="comment"># ts72jny9a066   hello_without_constraint.2   alpine:latest   swarmworker1   Running         Running 25 seconds ago</span></span><br></pre></td></tr></table></figure>
<p>经多次设置，task应该是通过某种算法均匀分布在所有node上的。表现为尽可能给所有节点平滩。据经验，分配方式肯定可以配置的，比如设权重之类的</p>
<h2 id="指定hostname"><a href="#指定hostname" class="headerlink" title="指定hostname"></a>指定hostname</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 2 --constraint node.hostname==swarmworker1 --name hello alpine ping docker.com</span><br><span class="line"><span class="comment">#0fz44crhpw73te5t6hva5gsaq</span></span><br><span class="line"><span class="comment">#overall progress: 2 out of 2 tasks</span></span><br><span class="line"><span class="comment">#1/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#2/2: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#verify: Service converged</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在两台机器上运行以下命令，结果一致</span></span><br><span class="line">docker service ls</span><br><span class="line"><span class="comment">#ID             NAME      MODE         REPLICAS   IMAGE           PORTS</span></span><br><span class="line"><span class="comment">#0fz44crhpw73   hello     replicated   2/2        alpine:latest</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在两台机器上运行以下命令，结果一致。可以看到，两个task运行在两个不同的节点上</span></span><br><span class="line">docker service ps hello</span><br><span class="line"><span class="comment">#ID             NAME          IMAGE           NODE           DESIRED STATE   CURRENT STATE                ERROR                              PORTS</span></span><br><span class="line"><span class="comment">#kh1um6dqg31d   hello.1       alpine:latest   swarmworker1   Running         Running about a minute ago</span></span><br><span class="line"><span class="comment">#5jttfmry1nm9   hello.2       alpine:latest   swarmworker1   Running         Running about a minute ago</span></span><br></pre></td></tr></table></figure>
<p>可见，分配到指定hostname的节点上了</p>
<p>多个节点的hostname理论上是可以重复的，这个有空再说吧</p>
<h2 id="指定节点类型"><a href="#指定节点类型" class="headerlink" title="指定节点类型"></a>指定节点类型</h2><p>节点类型就两种，worker和manager</p>
<p>那么本次我们先将worker2降级成worker类型，那么，有两个管理节点和一个工作节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node demote swarmworker2</span><br><span class="line"><span class="comment">#Manager swarmworker2 demoted in the swarm.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker node  ls</span><br><span class="line"><span class="comment">#ID                            HOSTNAME       STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION</span></span><br><span class="line"><span class="comment">#xgjnkzvysal5fv7ugm1t5d7zr *   swarmmanger    Ready     Active         Leader           20.10.21</span></span><br><span class="line"><span class="comment">#e3ye8fep0dr3xkxrzdxz8wzjw     swarmworker1   Ready     Active         Reachable        20.10.21</span></span><br><span class="line"><span class="comment">#i5vz5saiixnx82j9hpy4d5wmc     swarmworker2   Ready     Active                          20.10.21</span></span><br></pre></td></tr></table></figure>
<p>键入以下命令将服务的task分布在管理节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 4 --constraint node.role==manager --name hello_by_role alpine ping docker.com</span><br><span class="line"><span class="comment">#af7xj2jrqgfjsy35klqrajltv</span></span><br><span class="line"><span class="comment">#overall progress: 4 out of 4 tasks</span></span><br><span class="line"><span class="comment">#1/4: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#2/4: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#3/4: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#4/4: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#verify: Service converged</span></span><br><span class="line"></span><br><span class="line">docker service ps hello_by_role</span><br><span class="line"><span class="comment"># ID             NAME              IMAGE           NODE           DESIRED STATE   CURRENT STATE            ERROR     PORTS</span></span><br><span class="line"><span class="comment"># py8yy13tqcvg   hello_by_role.1   alpine:latest   swarmmanger    Running         Running 49 seconds ago</span></span><br><span class="line"><span class="comment"># 4xfukh7i7tue   hello_by_role.2   alpine:latest   swarmworker1   Running         Running 50 seconds ago</span></span><br><span class="line"><span class="comment"># fmd8xxkexrxl   hello_by_role.3   alpine:latest   swarmmanger    Running         Running 49 seconds ago</span></span><br><span class="line"><span class="comment"># wqlnuvy34a7j   hello_by_role.4   alpine:latest   swarmworker1   Running         Running 50 seconds ago</span></span><br></pre></td></tr></table></figure>
<h2 id="指定label"><a href="#指定label" class="headerlink" title="指定label"></a>指定label</h2><p>就不多做了，内容都差不多。。官网看吧</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/swarm/services/#placement-constraints" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/services/#placement-constraints</a></p>
</blockquote>
<h1 id="关于端口"><a href="#关于端口" class="headerlink" title="关于端口"></a>关于端口</h1><p>一般情况，我们用http来提供无状态的服务，就会涉及到端口的暴露和分布的问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 目前有两个节点，下面我们建一个replicas=1的nginx服务，暴露端口为8080，容器内部端口为80，即8080转发到80</span></span><br><span class="line">docker service create --name my_web --replicas 1 --publish published=8080,target=80 nginx</span><br><span class="line"><span class="comment">#k7w0xq3n9in3ttdfggg6q0wc5</span></span><br><span class="line"><span class="comment">#overall progress: 1 out of 1 tasks</span></span><br><span class="line"><span class="comment">#1/1: running   [==================================================&gt;]</span></span><br><span class="line"><span class="comment">#verify: Service converged</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 查看nginx运行情况，发现运行在manager上</span></span><br><span class="line">docker service  ps my_web</span><br><span class="line"><span class="comment">#ID             NAME       IMAGE          NODE          DESIRED STATE   CURRENT STATE           ERROR     PORTS</span></span><br><span class="line"><span class="comment">#35pb8xxumb8p   my_web.1   nginx:latest   swarmmanger   Running         Running 5 minutes ago</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 此时，我们分别curl 两个节点的ip:端口</span></span><br><span class="line">curl http://192.0.0.30:8080/</span><br><span class="line"><span class="comment">#&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="comment">#&lt;html&gt;</span></span><br><span class="line"><span class="comment">#&lt;head&gt;</span></span><br><span class="line"><span class="comment">#&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后curl 另一个，发现结果是一样的</span></span><br><span class="line">curl http://192.0.0.31:8080/</span><br></pre></td></tr></table></figure>
<p>即内部有一套流量转发机制</p>
<p>引用官方</p>
<blockquote>
<p><a href="https://docs.docker.com/engine/swarm/services/#publish-ports" target="_blank" rel="noopener">https://docs.docker.com/engine/swarm/services/#publish-ports</a></p>
</blockquote>
<blockquote>
<p>You don’t need to know which nodes are running the tasks; connecting to port 8080 on any of the 10 nodes connects you to one of the three nginx tasks. You can test this using curl. The following example assumes that localhost is one of the swarm nodes. If this is not the case, or localhost does not resolve to an IP address on your host, substitute the host’s IP address or resolvable host name.</p>
</blockquote>
<p>大意是访问任何节点的该端口都会转发运行该服务的task的节点上（官方是10个节点，在3个节点上运行nginx，即–replicas 3）。</p>
<h1 id="机缘巧合发现个问题"><a href="#机缘巧合发现个问题" class="headerlink" title="机缘巧合发现个问题"></a>机缘巧合发现个问题</h1><p>另外，我发现个问题</p>
<p>由于第3个节点swarmworker2的没有配置代理，也没有提前去pull image</p>
<p>当我在执行 <code>docker service create ..... --replicas=2 ......</code> 的时候，恰好给swarmworker2分配了一个task</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 2 --name hello_without_constraint  alpine ping docker.com</span><br><span class="line"><span class="comment"># b32kykwlr8gcpinfmpfugzkpy</span></span><br><span class="line"><span class="comment"># overall progress: 1 out of 2 tasks</span></span><br><span class="line"><span class="comment"># 1/2: preparing [=================================&gt;                 ]</span></span><br><span class="line"><span class="comment"># 2/2: running   [==================================================&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 到这里就卡住了很久，开始我还以为是虚拟机卡了（毕竟电脑内存不大），一直找不到原因，没反应过来。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后我就ctrl+c 退出了，显示出以下信息（注意第一行的^C，是ctrl+c，也给打印出来了）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ^COperation continuing in background.</span></span><br><span class="line"><span class="comment"># Use `docker service ps b32kykwlr8gcpinfmpfugzkpy` to check progress.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按提示，我执行了命令</span></span><br><span class="line">docker service ps b32kykwlr8gcpinfmpfugzkpy</span><br><span class="line"><span class="comment"># ID             NAME                         IMAGE           NODE           DESIRED STATE   CURRENT STATE                  ERROR     PORTS</span></span><br><span class="line"><span class="comment"># xnuy658s5b7u   hello_without_constraint.1   alpine:latest   swarmworker1   Running         Running about a minute ago</span></span><br><span class="line"><span class="comment"># cqft2hmpdbdu   hello_without_constraint.2   alpine:latest   swarmworker2   Running         Preparing about a minute ago</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后又多试了几次，发现，只要是在swarmworker2节点上，就启动不了</span></span><br><span class="line"><span class="comment"># 通过检查排除，发现是没有image。后台还在pull吧，这该死的网络，该死的gfw。</span></span><br></pre></td></tr></table></figure>
<p>这个问题我我也去了解了一下，就是节点只会用自己本地的image，不会用其它节点的。为什么不设计成节点共享呢，哪怕给个命令手动互相copy也行啊。</p>
<p>尤其对一些用于本地测试的私有image而言来说，就必须把image publish到仓库才行</p>
<p>怎么解决呢，要么手动 export/import</p>
<p>要么就自己搭个中转仓库</p>
<p>具体的情况，再搜搜吧</p>
<p>既然已经出了这档问题，顺便测试一下，直接将该节点剔除，看是什么反应</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 剔除之前</span></span><br><span class="line">docker service ps hello_without_constraint</span><br><span class="line"><span class="comment"># ID             NAME                         IMAGE           NODE           DESIRED STATE   CURRENT STATE             ERROR     PORTS</span></span><br><span class="line"><span class="comment"># xnuy658s5b7u   hello_without_constraint.1   alpine:latest   swarmworker1   Running         Running 8 minutes ago</span></span><br><span class="line"><span class="comment"># cqft2hmpdbdu   hello_without_constraint.2   alpine:latest   swarmworker2   Running         Preparing 8 minutes ago</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 swarmworker2 上执行leave，注意，只有工作节点才能leave，管理节点的话，要先降级成工作节点</span></span><br><span class="line">docker swarm leave</span><br><span class="line">Node left the swarm.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 再在管理节点上查看service</span></span><br><span class="line">docker service ps hello_without_constraint</span><br><span class="line"><span class="comment"># ID             NAME                             IMAGE           NODE           DESIRED STATE   CURRENT STATE            ERROR     PORTS</span></span><br><span class="line"><span class="comment"># xnuy658s5b7u   hello_without_constraint.1       alpine:latest   swarmworker1   Running         Running 3 hours ago</span></span><br><span class="line"><span class="comment"># exf4xl00dttl   hello_without_constraint.2       alpine:latest   swarmmanger    Running         Running 13 seconds ago</span></span><br><span class="line"><span class="comment"># cqft2hmpdbdu    \_ hello_without_constraint.2   alpine:latest   swarmworker2   Shutdown        Preparing 3 hours ago</span></span><br></pre></td></tr></table></figure>
<p>由此可见 swarmworker2 关闭了，又从swarmmanger 启动了一个task</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在多个节点中：</p>
<p>要运行指定个数的task变得简单</p>
<p>对于使用网络端口对外作为服务的task，不用考虑task具体运行在哪些节点上，每个节点都能访问到task</p>
<p>如果某些task因为某些原因挂掉了，系统会自动帮忙重新运行新的task，并且在此节点池内，总个数不会变化</p>
<p>考虑到特定情况，将指定task运行在符合条件的node上也很容易</p>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>develop</tag>
        <tag>swarm</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>rsatitle</title>
    <url>/2017/2017-2017-03-02-js-php-rsa/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>rsa的js加密和php解密<br>群里的同志需要的前端js加密，后端php解密的实例<br><a id="more"></a>  </p>
<h1 id="开始说明"><a href="#开始说明" class="headerlink" title="开始说明"></a>开始说明</h1><p>后面有一个实例</p>
<h1 id="javascript加密"><a href="#javascript加密" class="headerlink" title="javascript加密"></a>javascript加密</h1><h2 id="引入相关的js库"><a href="#引入相关的js库" class="headerlink" title="引入相关的js库"></a>引入相关的js库</h2><blockquote>
<p>jsbn.js ,</p>
<p>prng4.js ,</p>
<p>rng4.js ,</p>
<p>rsa.js ,</p>
<p>base64.js</p>
</blockquote>
<p>他们的远程目录为： <a href="http://www-cs-students.stanford.edu/~tjw/jsbn/" target="_blank" rel="noopener">http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>
<p>前端代码：<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www-cs-students.stanford.edu/~tjw/jsbn/jsbn.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www-cs-students.stanford.edu/~tjw/jsbn/prng4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www-cs-students.stanford.edu/~tjw/jsbn/rng.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://www-cs-students.stanford.edu/~tjw/jsbn/base64.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>本 blog 也拷贝了这几个库，网址的目录为： <a href="http://blog.lopy.win/assets/rsa" target="_blank" rel="noopener">http://blog.lopy.win/assets/rsa/</a> ，将几个文件名加在后面就可以了。</p>
<p>github地址：<a href>https://github.com/uljjmhn520/uljjmhn520.github.io/tree/master/assets/rsa</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jquery 方便dom操作 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/2.1.3/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 本blog的js文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://blog.lopy.win/assets/rsa/jsbn.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://blog.lopy.win/assets/rsa/prng4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://blog.lopy.win/assets/rsa/rng.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://blog.lopy.win/assets/rsa/rsa.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://blog.lopy.win/assets/rsa/base64.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>test —————–</p>

<p>test —————– end</p>
<h2 id="js代码第一部分"><a href="#js代码第一部分" class="headerlink" title="js代码第一部分"></a>js代码第一部分</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个rsa类，只有一个加密方法，构造函数为公钥中的 n 和 e 也就是模和指数。</span></span><br><span class="line"><span class="keyword">var</span> MyRsa = <span class="function"><span class="keyword">function</span>(<span class="params">module,eVal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">module</span> = <span class="built_in">module</span> || <span class="string">''</span>;</span><br><span class="line">    eVal = eVal || <span class="string">'010001'</span>;</span><br><span class="line">    <span class="keyword">var</span> rsaObj = <span class="keyword">new</span> RSAKey();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span>(<span class="params">module,eVal</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">module</span>)&#123;</span><br><span class="line">            rsaObj.setPublic(<span class="built_in">module</span>,eVal);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    init(key,eVal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    <span class="keyword">this</span>.encrypt = <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> strEncoded = rsaObj.encrypt(str);</span><br><span class="line">        <span class="keyword">if</span>(!strEncoded)&#123;</span><br><span class="line">            alert(<span class="string">'hello what\'s your name'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hex2b64(strEncoded);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="js代码第二部分"><a href="#js代码第二部分" class="headerlink" title="js代码第二部分"></a>js代码第二部分</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//n和e为rsa的模和指数，他们的值是从密钥对中获得的，后文会给出php 中获取的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n =<span class="string">"E0F1E67A3E1E54B1820A481F1DFC98545542B85EAEC149627591593C19A25B3B6CDAAA9346D83EF695193FA268E3ED27C9B57DCFB5B6FB873D646FA3947105E4ACF07EDF623D321881D8930E0CFD391191F2EB3B3EB3DF2409F25B96B2BD4C5D2EAF42B43059D2FDDBAF5BE51E7F66E69B617FE319DFC2AD2567A841D765EB0DF5BAB631146EB6FD5688028658A0AEAF1CBD470BF437BCFA6641159E8C2F857B0C7D806326C6D3037DEAD1EC463673E0CA30D51EAF7F70EB7AFD46A765FB5FB4C89791A4CF4C4072E4D29D5DEDE90D75DC2D9669AEB888133F349179264EFF2DF0BCEFDA11FDAC32B57F75E2D2072ADC117DDAC3BEA8F431253228594BF0419B"</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">'010001'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myRsa = <span class="keyword">new</span> MyRsa(n,e);</span><br><span class="line"><span class="keyword">var</span> encoded = myRsa.encrypt(<span class="string">'hello world'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(encoded);</span><br><span class="line"></span><br><span class="line"><span class="comment">// result，以下为结果之一，每次加密的结果都可能不一样</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// XJJeZhc4tYp50OXDAyBS6aK0lWOPNR6IVOM4auccxb+uk0+d5GewFq9ffAWhlBpAiRTuo1IbKm8e23UdU3kbIFs9nNAMCSdj/2FL3C9NrXlW67Jfs6azAMHMHKW3f3rXPCRMTvFGq09KdobwLiy71GidRZtbQYQEaZ8QhHpZC/QYem9EAdu4ULdBX5e1uigIPm3ukzK6RUKRbBYM44ApoL6kNUdbELvC2J6psqs1YxprwAw9D5C8N41tWFRwx7MIPx83TG8aGYDCU/q1E5Xd7fDpXlm4gZxPPXMHwIT4WJBvzDZoCCpxJSEYEzHzfF6HTTWcWo8BBbUeC8qssCHiyA==</span></span><br></pre></td></tr></table></figure>
<h1 id="php解密"><a href="#php解密" class="headerlink" title="php解密"></a>php解密</h1><h2 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h2><p>解密用的私钥，与加密用的公钥为一对。</p>
<p>密钥对用php函数 <strong>openssl_pkey_new</strong> 和 <strong>openssl_pkey_export</strong> 生成；公钥可用已存在的私钥生成，后文中会介绍</p>
<p>以下为某一个私钥</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDg8eZ6Ph5UsYIK</span><br><span class="line">SB8d/JhUVUK4Xq7BSWJ1kVk8GaJbO2zaqpNG2D72lRk/omjj7SfJtX3Ptbb7hz1k</span><br><span class="line">b6OUcQXkrPB+32I9MhiB2JMODP05EZHy6zs+s98kCfJblrK9TF0ur0K0MFnS/duv</span><br><span class="line">W+Uef2bmm2F/4xnfwq0lZ6hB12XrDfW6tjEUbrb9VogChligrq8cvUcL9De8+mZB</span><br><span class="line">FZ6ML4V7DH2AYybG0wN96tHsRjZz4Mow1R6vf3Drev1Gp2X7X7TIl5Gkz0xAcuTS</span><br><span class="line">nV3t6Q113C2Waa64iBM/NJF5Jk7/LfC879oR/awytX914tIHKtwRfdrDvqj0MSUy</span><br><span class="line">KFlL8EGbAgMBAAECggEBAIWKtpRd6m3HT/dAp9CKk/iFAW4pL8AqC9zWJE7MvRlC</span><br><span class="line">ZzZNy89kM8T58RpZFcIymctjBsTYEUC0IhtNN6S5kJEYplH71fuUkP4NEAhoZ7CI</span><br><span class="line">oMfBJNPtvwxLJ2l+RrCg9DTx8Ty986WR9ejeOmBnrDQ9jJ16unKfxWEOb9JeyO/I</span><br><span class="line">pcuNi1+FKjCJDExNrEbPsiVdHK3tWI7a3lKVA6pTVSypjp3gLlbxwHpgVaEm+dak</span><br><span class="line">RFiPoyCoxYigQhsmnKp0ou+2qrJIl7b6NM+mfWD/o21zhAD3q/2vDfc5M661Uhlj</span><br><span class="line">Q/CvinB6P39Zs4gIhZa17AeZOXEgekcx/I068vLRKLkCgYEA9xaztzsvJTOQOjYX</span><br><span class="line">ZAaTssVO1VpDp9YbaXzLhrmc9HZVTgIiuDumKHrZ98r0yxQ21CszyJUEVbDSmVze</span><br><span class="line">hYnkMpC6lV03H8KuODNtjbeUkEw87g3+wiEuDAPUPHpVo/Afzxnd3kvH0dOKkMkY</span><br><span class="line">H09tuBbI7JXEbeJtxOuCxc7QCT0CgYEA6Q7AXNnerxcIcfBmFQR2HArmcIQcfmyx</span><br><span class="line">1D7USxwbub2kdSTd1Qr3pFbyPiqGmO2YjrvJCnXPH1ofq6gWWTH46Q0uxrNjp2Xn</span><br><span class="line">ZAPG03I+2gyGzs4ASSdFbDJwmQ6t0Pk253qArlzlcQgrGqtRS/4SzfivYiO6B27u</span><br><span class="line">aon8174Us7cCgYAYDsjOxV9wwtV/JXcfkRheZqGnWlOOCuW+Xp0+b+IdV0w0/TY+</span><br><span class="line">M+iYtmV0n/k3sK8p907ib8ftQ/stXYJ5BBUI61iPZHUSjZUC+dbn3oEDj7i7APfW</span><br><span class="line">FP7zwoeun8ao4J9oPb+BfmVlQ7CRKlND8Srgqq9Dgc2PWWWQr9GayuksjQKBgQCM</span><br><span class="line">Vr2vK+LUPGJxefl+nnkg2c954ZPm7T0IOe1MbVikuHXXtKOALmKBK3ojxSfX3vsG</span><br><span class="line">uD2PdvGKR5LaoxUSEO16KN4J+OwBWXPE3iFUIm+GjhR/Y7z4UBWV2anEAPrZ47gU</span><br><span class="line">G8hxNq9TKUALhy4lPJHGRgIWbr0OzNX0gbMnluaQcQKBgDyQeTvFpPuziNltPVm0</span><br><span class="line">BEbD6mSgHTky1i5w/k2UiR72tUHb3ekx98fPc0YHqczYbc7l8vP7mDO0+ZmtdFmq</span><br><span class="line">JjcixY3ZlvWeVjZ/QlI7wpgCy5hsgSRnxdy94IrLhrA5zlL0dDC0mAVzTPzJltIX</span><br><span class="line">QrbpjdKjcOCrdDny0WUw+OX4</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<h2 id="php代码部分"><a href="#php代码部分" class="headerlink" title="php代码部分"></a>php代码部分</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上文中的私钥</span></span><br><span class="line">$privateStr = <span class="string">'&lt;&lt;&lt;privateKey'</span></span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">privateKey;</span><br><span class="line"></span><br><span class="line">$pKey = openssl_pkey_get_private($privateStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//encoded 为 上文js加密后的密文</span></span><br><span class="line">$encoded = base64_decode($encoded);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密</span></span><br><span class="line">openssl_private_decrypt($encoded,$decrypted,$pKey,OPENSSL_PKCS1_PADDING);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $decrypted;</span><br><span class="line"><span class="comment">//如果一切正常的话，就能解密出结果 hello world</span></span><br></pre></td></tr></table></figure>
<h1 id="一些说明"><a href="#一些说明" class="headerlink" title="一些说明"></a>一些说明</h1><h2 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h2><p> php的openssl 扩展官网 <a href="http://php.net/manual/en/ref.openssl.php" target="_blank" rel="noopener">点击进入</a></p>
<h2 id="创建密钥对"><a href="#创建密钥对" class="headerlink" title="创建密钥对"></a>创建密钥对</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$ssl = openssl_pkey_new([]);</span><br></pre></td></tr></table></figure>
<h2 id="提取私钥"><a href="#提取私钥" class="headerlink" title="提取私钥"></a>提取私钥</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">openssl_pkey_export($res, $privKey);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $privKey;</span><br><span class="line"></span><br><span class="line"><span class="comment">//privKey 就为私钥 格式为 </span></span><br><span class="line"><span class="comment">// -----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="comment">// xxxxxxxxxx</span></span><br><span class="line"><span class="comment">// xxxxxxxxxx</span></span><br><span class="line"><span class="comment">// xxxxxxxxxx</span></span><br><span class="line"><span class="comment">// xxxxxxxxxx</span></span><br><span class="line"><span class="comment">// -----END PRIVATE KEY-----</span></span><br></pre></td></tr></table></figure>
<h2 id="获取detail，包括公钥、模、指数等信息"><a href="#获取detail，包括公钥、模、指数等信息" class="headerlink" title="获取detail，包括公钥、模、指数等信息"></a>获取detail，包括公钥、模、指数等信息</h2><h3 id="方式一，从密钥对里面提取"><a href="#方式一，从密钥对里面提取" class="headerlink" title="方式一，从密钥对里面提取"></a>方式一，从密钥对里面提取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取detail</span></span><br><span class="line">$detail = openssl_pkey_get_details($ssl);</span><br><span class="line"></span><br><span class="line"><span class="comment">//公钥</span></span><br><span class="line">$publicKey = $detail[<span class="string">'key'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//模，值为二进制乱码，转为16进制</span></span><br><span class="line">$module = $detail[<span class="string">'rsa'</span>][<span class="string">'n'</span>];</span><br><span class="line">$module = bin2hex($module);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指数，值为二进制乱码，转为16进制</span></span><br><span class="line">$exponent = $detail[<span class="string">'rsa'</span>][<span class="string">'e'</span>];</span><br><span class="line">$exponent = bin2hex($exponent); <span class="comment">//一般结果为 010001 （65537）</span></span><br></pre></td></tr></table></figure>
<h3 id="方式二，从私钥里提取"><a href="#方式二，从私钥里提取" class="headerlink" title="方式二，从私钥里提取"></a>方式二，从私钥里提取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取detail</span></span><br><span class="line">$privateKeySource = openssl_get_privatekey($privKey);</span><br><span class="line">$detail = openssl_pkey_get_details($privateKeySource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面取模、指数等信息同 方式一</span></span><br></pre></td></tr></table></figure>
<h3 id="方式三，从公钥里提取"><a href="#方式三，从公钥里提取" class="headerlink" title="方式三，从公钥里提取"></a>方式三，从公钥里提取</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//$publicKey 为方式一中提取的 publicKey </span></span><br><span class="line">$publicKeySource = openssl_get_publickey($publicKey);</span><br><span class="line">$publicKeyDetail = openssl_pkey_get_details($publicKeySource);</span><br><span class="line"></span><br><span class="line"><span class="comment">//后面取模、指数等信息同方式一</span></span><br><span class="line"><span class="comment">//从公钥里面提取的 detail 的内容较少</span></span><br></pre></td></tr></table></figure>
<h2 id="解密"><a href="#解密" class="headerlink" title="解密"></a>解密</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $encoded 为已被加密的密文</span></span><br><span class="line">$encoded = base64_decode($encoded);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私钥</span></span><br><span class="line">$pKey = openssl_pkey_get_private($privKey);</span><br><span class="line"></span><br><span class="line"><span class="comment">//私钥解密</span></span><br><span class="line">openssl_private_decrypt($encoded,$decoded,$pKey,OPENSSL_PKCS1_PADDING);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $decoded;</span><br></pre></td></tr></table></figure>
<h1 id="完整的实例"><a href="#完整的实例" class="headerlink" title="完整的实例"></a>完整的实例</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>以下内容基于 phalcon 的 controller ，如果你没有使用phalcon，可能会修改一部分代码</p>
<p>controller里面有三个action</p>
<blockquote>
<p>index：html 页面，包括js加密部分</p>
</blockquote>
<blockquote>
<p>decode：php 解密部分，接收post数据，与页面index 的ajax交互</p>
</blockquote>
<blockquote>
<p>create：展示了创建密钥对</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@brief</span></span></span><br><span class="line"><span class="comment">    * Created by PhpStorm.</span></span><br><span class="line"><span class="comment">    * User: zy&amp;cs</span></span><br><span class="line"><span class="comment">    * Date: 17-3-2</span></span><br><span class="line"><span class="comment">    * Time: 上午11:47</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Modules</span>\<span class="title">Tester</span>\<span class="title">Controllers</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RsaController</span> <span class="keyword">extends</span> <span class="title">ControllerBase</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 内置了几个私钥，用该方法获取一个，</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 可以自己用 createAction 自己往后面加，实际操作中用缓存或数据库就能解决了</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> bool|int $key 默认取第一个，$key === false 时，取所有</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">rsaPrivateKey</span><span class="params">($key=false)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $rsaKeys = [];</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">0</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDMYA9a+x7XxFh8</span></span><br><span class="line"><span class="string">Ihk9EK+6N0xZNq8qhBH5jypFO7zVvOHYPDjr1OAoKXYESDF5Yk+bbivXRY3Ptjbb</span></span><br><span class="line"><span class="string">QF2f0kNTkGBO0bwUmmDJ8RWs14uA+OyPmByHpBxRDLvddNNe3sj0GWbOKMXhSNQD</span></span><br><span class="line"><span class="string">zdu+U7vCtpjrHfKcoa8X5VjVln/A/gmQ4sCl3eQgeWcBciMV1AMY3b5Ez3ZuVM2C</span></span><br><span class="line"><span class="string">HNQl4dyGzMtEmSxOTT9oFFlDI64q+6QjlDOeo0cOD3lZDuR7x1knXWtLJtQ4v2Al</span></span><br><span class="line"><span class="string">8Ovoci6b33DApSRJJCFMclIhakIRHfmQxSANxu7L25OslJ0UhbOZEVoWm5hkkjrC</span></span><br><span class="line">h3opznJjAgMBAAECggEBAIFHgm8ayrfSC+b56t0l4QL6V+FXJhbO1E/<span class="number">4</span>r9R7pUfO</span><br><span class="line"><span class="number">403</span>VSmxjjCfbkjvDLwiJl7HKTxEtfjcWHD00ygR/DPefLEyvfznJLdCQIBXlguli</span><br><span class="line">jMGIhwOGXCMo2u2LKOmqI5PFPbLLN+D6IKMHZSlP7kWNG84ec4mA/TEwcrEpMkbx</span><br><span class="line">SaK7J5psPJ14OwRyj3Ok/Q7cF6jfqWmBKDVErHlsQHrqVVuq3Ik67u9E4bQvdgRC</span><br><span class="line">A+<span class="number">1</span>z61ruu9pmyNhGBj0KsQCBU/e+<span class="number">4</span>X1TpKVPgnBS/q2qLGT5JwL556Fax5xiT4Pj</span><br><span class="line">uFI607WXdjsl5Zi1pYbxTJBgJhfeUs64pRkwHzMp/<span class="number">4</span>ECgYEA7b5PwkozKiYWFBzq</span><br><span class="line">JhutrykTTAZj+L4WomV3fwWNYJLboBX4fq7w4/rOP1xQtbtlSVeQxRV6+uka8QU5</span><br><span class="line">f+f+cH+/h2d/G0/ppwOPuavkW4pXhYNFlrJ6l9/KMG9Niw+R4Jrf09h47QgEXfjm</span><br><span class="line">uJfBlTnLb5FyvZ0miAcuabuhoh8CgYEA3BHHZPsDaJpSLaoN8RUYfbTyOU1kj4Pp</span><br><span class="line"><span class="number">4</span>N7psZ5AKxZblBMPYubZMcR+accZ2TDlch4rZJBOyfay6Cw4ZzneKeUO5NI/hr2g</span><br><span class="line">Qh6Zd2ZpxHEE8SxYRDOOf3l8gP83aspLzL8KT/XNySJraRacaknXETiP+pNcKqFo</span><br><span class="line">zy0J3ujVDz0CgYBKnsM1/kgU4KNpaLHtiB55rfDKme7i8fb0vdhF3B5Fw5J/qqW2</span><br><span class="line">TX56cAwwQu9qOwlNfdiIo3dYLbYxFCy6Ar0P3mjlPQzeK7TwoOOJqXQhb0iNNWiw</span><br><span class="line">JhDofmtdzHGQRjDJSJMcUQOTkkKcpDT2l1tBVUSPHh3feeXQKEDfGu9ejQKBgQCR</span><br><span class="line">XYUSZORZgiZqV3wiFUc6Mf4Wb9LPIdmpWlWPp/LHA1u2sehl8grh3uOJx6SBXNUS</span><br><span class="line">zm7nXJNOwRBoYF1ZglYH4nA2IdMok7V6N3Az+IhA5E7ZZ+teEZg9B+h/<span class="number">5</span>RWcCsiL</span><br><span class="line">FF4hd0JZa8z7e54Sb3gKvgwM/q3Q0xHCWAO/JJkoGQKBgQCXP+SGszS+YExHp+zO</span><br><span class="line">Bv1KRtv98YO9hZq9c+eXbVVbqEOo2/QM3G6joSdla7fD4SuEHA0MoEalgPkZ2teV</span><br><span class="line">+Wsq/CbbrlZTTbdjMXuJu6VY7aKXG4nq3ZaU1cjxKSovP5S4NNueCNvUYWXp218E</span><br><span class="line">S19cTtlOxaiqzUFB6csgohAxwQ==</span><br><span class="line">-----END <span class="keyword">PRIVATE</span> KEY-----</span><br><span class="line">rsakey;</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">1</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDETB/jy7cTG9SN</span></span><br><span class="line"><span class="string">EAgqh+wgIn7BCjBUGYP5po5oAYSsksQeMzBow2upsAw1JTizUwPyRhiuA7+WCUNg</span></span><br><span class="line"><span class="string">W65zh4Lj/gnjRa2SQWAx1PgUh5xhKJBKU84UPrPRt6CRL5HRdqL6vi0YU26lpewS</span></span><br><span class="line"><span class="string">HPC2TWVuXyQrKGPLCkcRG0gnWEyCN53Ua/zpYYas3gNr3Qs64ZT60VIGXdXktpbS</span></span><br><span class="line"><span class="string">ozdofOmI8rXUzzVJbj5ahlnGzTtM+XBtlDvY2Sb2sB3FjH6jXLyTdr26AcpuSRJQ</span></span><br><span class="line"><span class="string">ZAJffHBm1bZwWJszpVKYNP7bYpt/Ey5uCuJUNq/XlNlmKKN5H9mzG2UITirduxRv</span></span><br><span class="line"><span class="string">vfV+QzVDAgMBAAECggEAdKO/Nz5vVF1vGTrzf0Iw3o9gvhfty6s1rnx3lfmA+oJj</span></span><br><span class="line"><span class="string">IobMNxQXv0aqmlG5tWSYrbdVJuF3UBHFBVa0/FUDQ7JJ8dAPaR6LqFCh8KD8HQdb</span></span><br><span class="line"><span class="string">Za8SfxkbBHyWXm7juJFEGrYyWYgJ8Uf8VG754Xlv0fuapEJludorjFCnuSlQnPag</span></span><br><span class="line">tw6t3tcj/BzbXTrrGi6V36vm9lkg4qrdozJcYl9cIXs/SAdWUX5jIkCAHVSrNoKA</span><br><span class="line">LSwylPeNMSVzJu3o6ivj4OPfn6/HuNZZ3Z18O/veNB13B4xb4M9f7RduQQFNC9Bq</span><br><span class="line">qH8nyfRiYtFFFj3SRfmF74GJCYe3xP4MDB3PV5DpUQKBgQDnpt1qqPiVbuaL4Kro</span><br><span class="line">a3b62u66RZnZxGCvvpaBeP7+cx69RGwcXxfYRNVSQ3VRbChuhsbw9UWrFY+akOT7</span><br><span class="line"><span class="number">5</span>QLCorxpyaSiYkv0aHpFqjWX9IaKY3PJN7hq7VICHTRehdpiNpp1Y092HWz6+qxn</span><br><span class="line"><span class="number">4</span>h8D4+bTmyQmU7S5gvfc5H00xwKBgQDY7fcXAfbuxnKw8j8BZQAhkjF2RvN0DGD/</span><br><span class="line">Uocee06LKrXzGWwP0ydCismxL50DvsddmJ92CEHqBtf8zoq32MlMTlCyBvSmFx/Z</span><br><span class="line">PEKalHxNlHuDDjnMSI4yYhd9losFhagXI767Uhce28AiNoHKd8dXM+<span class="number">8</span>NY77QxZJ9</span><br><span class="line">g/yzyatHpQKBgA1vbx4ViL1Z/kMUl7T9LpxkAD6LdN3dduIagq4lr1xgnuLJSh/n</span><br><span class="line">IAHqFBk+UlqTlFC8vmMRRqYijP6g8rbtVFiniZf1GvhUDSWyvYy2z37trrPuCrQb</span><br><span class="line"><span class="number">6</span>DVDaGM5AGWPC9hwZEr0pJIsKLrxuPgZdEUMfcG+GL2kUzIDN473LY/XAoGANcji</span><br><span class="line">f5DcIZ2QaDDX0EezfZ9apiG3UOmUzxkuKS+XbMfdLvX5pf7LeCMjGMxeWMRfd+RU</span><br><span class="line">fRZVCWpC+QpYuHaGimXMeidhVyDao6jeNqdkHnQXH4pSaEUBBJrvihLeSzM1Vu9k</span><br><span class="line"><span class="number">5</span>drXoq4HeDQdgA6snQFiXuaBNBAYXwhvikAROIUCgYEA3SkKhaZVXgsfIQpKwR1F</span><br><span class="line">WrTgh1976+<span class="number">40</span>ZY8a1Ktg9W7HJm8FmyEcsgnZxVM0IMVZ4W6LS1HboNL3XR0C7UtC</span><br><span class="line">Ga/EXZWqau7eMuob1lz9MyxQMYtiNKRBpGrJyo9HoFjS1M4xVGyVq0C6V3SplMB4</span><br><span class="line">vjjY7Snq6YKVk8Rw770Tnus=</span><br><span class="line">-----END <span class="keyword">PRIVATE</span> KEY-----</span><br><span class="line">rsakey;</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">2</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDg8eZ6Ph5UsYIK</span></span><br><span class="line">SB8d/JhUVUK4Xq7BSWJ1kVk8GaJbO2zaqpNG2D72lRk/omjj7SfJtX3Ptbb7hz1k</span><br><span class="line">b6OUcQXkrPB+<span class="number">32</span>I9MhiB2JMODP05EZHy6zs+s98kCfJblrK9TF0ur0K0MFnS/duv</span><br><span class="line">W+Uef2bmm2F/<span class="number">4</span>xnfwq0lZ6hB12XrDfW6tjEUbrb9VogChligrq8cvUcL9De8+mZB</span><br><span class="line">FZ6ML4V7DH2AYybG0wN96tHsRjZz4Mow1R6vf3Drev1Gp2X7X7TIl5Gkz0xAcuTS</span><br><span class="line">nV3t6Q113C2Waa64iBM/NJF5Jk7/LfC879oR/awytX914tIHKtwRfdrDvqj0MSUy</span><br><span class="line">KFlL8EGbAgMBAAECggEBAIWKtpRd6m3HT/dAp9CKk/iFAW4pL8AqC9zWJE7MvRlC</span><br><span class="line">ZzZNy89kM8T58RpZFcIymctjBsTYEUC0IhtNN6S5kJEYplH71fuUkP4NEAhoZ7CI</span><br><span class="line">oMfBJNPtvwxLJ2l+RrCg9DTx8Ty986WR9ejeOmBnrDQ9jJ16unKfxWEOb9JeyO/I</span><br><span class="line">pcuNi1+FKjCJDExNrEbPsiVdHK3tWI7a3lKVA6pTVSypjp3gLlbxwHpgVaEm+dak</span><br><span class="line">RFiPoyCoxYigQhsmnKp0ou+<span class="number">2</span>qrJIl7b6NM+mfWD/o21zhAD3q/<span class="number">2</span>vDfc5M661Uhlj</span><br><span class="line">Q/CvinB6P39Zs4gIhZa17AeZOXEgekcx/I068vLRKLkCgYEA9xaztzsvJTOQOjYX</span><br><span class="line">ZAaTssVO1VpDp9YbaXzLhrmc9HZVTgIiuDumKHrZ98r0yxQ21CszyJUEVbDSmVze</span><br><span class="line">hYnkMpC6lV03H8KuODNtjbeUkEw87g3+wiEuDAPUPHpVo/Afzxnd3kvH0dOKkMkY</span><br><span class="line">H09tuBbI7JXEbeJtxOuCxc7QCT0CgYEA6Q7AXNnerxcIcfBmFQR2HArmcIQcfmyx</span><br><span class="line"><span class="number">1</span>D7USxwbub2kdSTd1Qr3pFbyPiqGmO2YjrvJCnXPH1ofq6gWWTH46Q0uxrNjp2Xn</span><br><span class="line">ZAPG03I+<span class="number">2</span>gyGzs4ASSdFbDJwmQ6t0Pk253qArlzlcQgrGqtRS/<span class="number">4</span>SzfivYiO6B27u</span><br><span class="line">aon8174Us7cCgYAYDsjOxV9wwtV/JXcfkRheZqGnWlOOCuW+Xp0+b+IdV0w0/TY+</span><br><span class="line">M+iYtmV0n/k3sK8p907ib8ftQ/stXYJ5BBUI61iPZHUSjZUC+dbn3oEDj7i7APfW</span><br><span class="line">FP7zwoeun8ao4J9oPb+BfmVlQ7CRKlND8Srgqq9Dgc2PWWWQr9GayuksjQKBgQCM</span><br><span class="line">Vr2vK+LUPGJxefl+nnkg2c954ZPm7T0IOe1MbVikuHXXtKOALmKBK3ojxSfX3vsG</span><br><span class="line">uD2PdvGKR5LaoxUSEO16KN4J+OwBWXPE3iFUIm+GjhR/Y7z4UBWV2anEAPrZ47gU</span><br><span class="line">G8hxNq9TKUALhy4lPJHGRgIWbr0OzNX0gbMnluaQcQKBgDyQeTvFpPuziNltPVm0</span><br><span class="line">BEbD6mSgHTky1i5w/k2UiR72tUHb3ekx98fPc0YHqczYbc7l8vP7mDO0+ZmtdFmq</span><br><span class="line">JjcixY3ZlvWeVjZ/QlI7wpgCy5hsgSRnxdy94IrLhrA5zlL0dDC0mAVzTPzJltIX</span><br><span class="line">QrbpjdKjcOCrdDny0WUw+OX4</span><br><span class="line">-----END <span class="keyword">PRIVATE</span> KEY-----</span><br><span class="line">rsakey;</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">3</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIBUwIBADANBgkqhkiG9w0BAQEFAASCAT0wggE5AgEAAkEA0ZJCQOOdXAGtSN1W</span></span><br><span class="line">MBNQp27kzLC7qE275nNgJsxk7VN2okNDPoTyn2jKO66VSy6j2Jgnsa2Ivd8w0kZQ</span><br><span class="line">s96viwIDAQABAkANFdDFNHES2Zf0QL2s6sfSbH4kubQ94fyleva59XEn0D1RtQou</span><br><span class="line">ELkG8ziIYbqucTMJm5IkyR7wFYDCDuGgDU6BAiEA9hRhdeQfdwLzNUQfrReNEScL</span><br><span class="line">LhDMGbDqVsEvu8ik8zsCIQDaBRndLKubqbTtE/HP6tFG8bNHLpCfRbv+YTBgbyvP</span><br><span class="line"><span class="number">8</span>QIgfdbKSClSVd/yU2j08eU7RGw88V+xn+myzI6aRGNExwUCIHBIIEHgN6E7jYpr</span><br><span class="line">syW5cX5wDDykpqbgaylfNGL13kKBAiAZwTtHJmMuApSOrdesqoeNMOqKhoDgyNZy</span><br><span class="line">GbnWQa+Dxg==</span><br><span class="line">-----END <span class="keyword">PRIVATE</span> KEY-----</span><br><span class="line">rsakey;</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">4</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAMpVIE75OR2lftwn</span></span><br><span class="line">U2WXszG5YPCxZno7Q2cdfpXQ2aW69hcdjiQDgBeVfSngRtrK2lXlkiBw5wIuK9MI</span><br><span class="line">e0jL1tatPRJ+/kHSnQadh01NpHsz/FiMQsJ8jOdfP2zhCO6F6p6cgTH7ccSp3AHq</span><br><span class="line">XvmGIPZByba5N3KVgqSayux4cDQhAgMBAAECgYArPA1vUqn1v8tf17dmWggcc/RW</span><br><span class="line">+lFfhRJeElteQAaB93VmcxZQc78HSxY3wIjjb70/<span class="number">5</span>ZJYBEgYmy0aJxHQ+F2rmE7J</span><br><span class="line">viFtDUNp3wC64juvntuSoEOBjmjYVYhfNHOvoVrh/Lh8/<span class="number">8</span>cj5bba2D2/G0h+DAhC</span><br><span class="line">NuHDA2yesAmUm3icEQJBAPROBPTAHSdAh46osdpnjFp1skrsK5ZAzvLzvNGA9WtO</span><br><span class="line"><span class="number">581</span>u7cbKdmfKZOa/<span class="number">0</span>G3grOtC9reRovNxHzyLqhcD9HMCQQDUBLuNsdZOfOe5fRnl</span><br><span class="line">oH3Bs/U63VHpGuhD619kX3ZFC9J0yykSk37eWm6+lXJ9iEmMOpbIByzEzt5FvxCQ</span><br><span class="line">teQbAkBk0gXNk7L0Tfcjco7jWTRc6JGJxek++sPtE5VqyFN/<span class="number">03</span>JqH0tVbJxsvOPj</span><br><span class="line">LmmvzrbN6Da1Dw82dAq2C9VH5kPtAkAE18rU9L/<span class="number">5</span>cP72DLZ/uUfGGe87Ff0d/wBZ</span><br><span class="line">NNIr/<span class="number">8</span>Y604dOJandg8L9H0GyVsWTun47lscE8K0EHdmT7EZbl9wLAkEA5vV71Jk8</span><br><span class="line">zxGDhpDdqmviFDTMGjl2zQwIh8AW+OL+R1GAlsJlcWy0E4C6lm3xohv5vO1V9Png</span><br><span class="line">nWMKYJf8FW2DvA==</span><br><span class="line">-----END <span class="keyword">PRIVATE</span> KEY-----</span><br><span class="line">rsakey;</span><br><span class="line"></span><br><span class="line">        $rsaKeys[<span class="number">5</span>] = <span class="string">&lt;&lt;&lt;rsakey</span></span><br><span class="line"><span class="string">-----BEGIN PRIVATE KEY-----</span></span><br><span class="line"><span class="string">MIIBFAIBADANBgkqhkiG9w0BAQEFAASB/zCB/AIBAAIzAVKoys24WgfliPeAh2LH</span></span><br><span class="line"><span class="string">vhFEQ1KmxEETTrOwjSLtYFgA6opEvcND4Hie61syD3i/g7sBAgMBAAECMwDfbilP</span></span><br><span class="line"><span class="string">DH+pkhCJaizoSOvnLGhWUVxNqtVSKTXJX/Nri/a5Ye3sr+ZZIaCcxZCeBOejIQIa</span></span><br><span class="line"><span class="string">AbPKiMN2IzV+WpDMr9zspM1Khz2Hy3y0hKUCGgDG8O8syaInZ7/qdrn2/1TIuZkO</span></span><br><span class="line"><span class="string">CkE4+KItAhlgyLtlBai+Kai9fegU3a2gNkwg2zbTJFhNAhkyNURnrUu7XjfVWLl+</span></span><br><span class="line"><span class="string">WNpw/kZegMANPNLRAhoBgZPB6KHFUtqcodgnJvRkyt8wVlUk0Lx6Qg==</span></span><br><span class="line"><span class="string">-----END PRIVATE KEY-----</span></span><br><span class="line"><span class="string">rsakey;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($key === <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> $rsaKeys;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">isset</span>($rsaKeys[$key])) &#123;</span><br><span class="line">            $key=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> $rsaKeys[$key];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> $id</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getDetailFromPKId</span><span class="params">($id)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $key = <span class="keyword">$this</span>-&gt;rsaPrivateKey($id);</span><br><span class="line">        $resource = openssl_get_privatekey($key);</span><br><span class="line">        <span class="keyword">return</span>  openssl_pkey_get_details($resource);;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getHtml</span><span class="params">($keyId,$rsaModule,$rsaExponent)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//rsa 的那几个js</span></span><br><span class="line">        $rsaAssets = [</span><br><span class="line">            <span class="string">'jsbn.js'</span>,</span><br><span class="line">            <span class="string">'prng4.js'</span>,</span><br><span class="line">            <span class="string">'rng.js'</span>,</span><br><span class="line">            <span class="string">'rsa.js'</span>,</span><br><span class="line">            <span class="string">'base64.js'</span>,</span><br><span class="line">        ];</span><br><span class="line">        $rsaJsPre = <span class="string">'http://blog.lopy.win/assets/rsa/'</span>;</span><br><span class="line">        $rsaJs = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">foreach</span>($rsaAssets <span class="keyword">as</span> $val)&#123;</span><br><span class="line">            $rsaJs .= <span class="string">'&lt;script src="'</span> . $rsaJsPre . $val . <span class="string">'"&gt;&lt;/script&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//切换 privateKey</span></span><br><span class="line">        $switchStr = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="keyword">$this</span>-&gt;rsaPrivateKey() <span class="keyword">as</span> $key=&gt;$val)</span><br><span class="line">        &#123;</span><br><span class="line">            $switchStr .= <span class="string">'&lt;li&gt;&lt;a href="index?key_id='</span> . $key . <span class="string">'"&gt;密钥 - '</span> . $key . <span class="string">' &lt;/a&gt;&lt;/li&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//密钥长度</span></span><br><span class="line">        $moduleLength = strlen($rsaModule) * <span class="number">8</span> / <span class="number">2</span>; <span class="comment">//为毛要除以2 ，因为 bin2hex 后，长度为两倍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//html 代码</span></span><br><span class="line">        $html = <span class="string">&lt;&lt;&lt;html</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;script src="//cdn.bootcss.com/jquery/2.1.3/jquery.min.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"><span class="subst">$rsaJs</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">    //class rsa</span></span><br><span class="line"><span class="string">    var MyRsa = function(key,eVal)&#123;</span></span><br><span class="line"><span class="string">        key = key || '';</span></span><br><span class="line"><span class="string">        eVal = eVal || '010001';</span></span><br><span class="line"><span class="string">        var rsaObj = new RSAKey();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var init = function(key,eVal)&#123;</span></span><br><span class="line"><span class="string">            if(key)&#123;</span></span><br><span class="line"><span class="string">                rsaObj.setPublic(key,eVal);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        this.encrypt = function(str)&#123;</span></span><br><span class="line"><span class="string">            var strEncoded = rsaObj.encrypt(str);</span></span><br><span class="line"><span class="string">            if(!strEncoded)&#123;</span></span><br><span class="line"><span class="string">                alert('hello what\'s your name');</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            return hex2b64(strEncoded);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        init(key,eVal);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function submitCheck()&#123;</span></span><br><span class="line"><span class="string">        var rsaModule = "<span class="subst">$rsaModule</span>";</span></span><br><span class="line"><span class="string">        var rsaExponent = "<span class="subst">$rsaExponent</span>";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        var myRsa = new MyRsa(rsaModule,rsaExponent);</span></span><br><span class="line"><span class="string">        $("[name=input]").val(myRsa.encrypt($("#input").val()));</span></span><br><span class="line"><span class="string">        var url = "decode";</span></span><br><span class="line"><span class="string">        var data =&#123;</span></span><br><span class="line"><span class="string">            key_id:$("[name=key_id]").val(),</span></span><br><span class="line"><span class="string">            input:$("[name=input]").val(),</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        $.post(url,data,function(json)&#123;</span></span><br><span class="line"><span class="string">            if(json.flag ===0)&#123;</span></span><br><span class="line"><span class="string">                $('#decoded').val(json.decoded);</span></span><br><span class="line"><span class="string">            &#125;else&#123;</span></span><br><span class="line"><span class="string">                alert(json.msg);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return false;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">    input.full&#123;</span></span><br><span class="line"><span class="string">        width: 100%;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;ul&gt;<span class="subst">$switchStr</span>&lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;form action="#" method="post"&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="hidden" name="key_id" value="<span class="subst">$keyId</span>"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;密钥长度&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" readonly value="<span class="subst">$moduleLength</span>" class="full"&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;模（n）&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" readonly value="<span class="subst">$rsaModule</span>" class="full"&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;指数（e）&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" readonly value="<span class="subst">$rsaExponent</span>" class="full"&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;输入要加密的字符串：&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" id="input" class="full"&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;js加密后&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;input type="text" name="input" readonly class="full"&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;php解密后&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;input type="text" id="decoded" readonly class="full"&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;li&gt;</span></span><br><span class="line"><span class="string">            &lt;button type="submit" onclick="return submitCheck();"&gt;encode &amp;&amp; decode&lt;/button&gt;</span></span><br><span class="line"><span class="string">        &lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">html;</span></span><br><span class="line">        <span class="keyword">return</span> $html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $keyId = <span class="keyword">$this</span>-&gt;request-&gt;get(<span class="string">'key_id'</span>,<span class="string">'int'</span>,<span class="number">0</span>);</span><br><span class="line">        $keyId = $keyId &lt; <span class="number">0</span> ? <span class="number">0</span> : $keyId;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取一个私钥 private key</span></span><br><span class="line">        $detail = <span class="keyword">$this</span>-&gt;getDetailFromPKId($keyId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得该密钥对的 模 和指数，也是 n 和 e</span></span><br><span class="line">        $rsaModule = strtoupper(bin2hex($detail[<span class="string">'rsa'</span>][<span class="string">'n'</span>]));</span><br><span class="line"></span><br><span class="line">        $rsaExponent = bin2hex($detail[<span class="string">'rsa'</span>][<span class="string">'e'</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出html</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;getHtml($keyId, $rsaModule, $rsaExponent);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">decodeAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//post 参数</span></span><br><span class="line">        $keyId = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'key_id'</span>, <span class="string">'int'</span>, <span class="number">0</span>);</span><br><span class="line">        $input = <span class="keyword">$this</span>-&gt;request-&gt;getPost(<span class="string">'input'</span>, [<span class="string">'string'</span>, <span class="string">'trim'</span>], <span class="string">''</span>);</span><br><span class="line">        $json = [</span><br><span class="line">            <span class="string">'flag'</span> =&gt; <span class="number">1</span>,</span><br><span class="line">            <span class="string">'msg'</span>  =&gt; <span class="string">''</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>($keyId &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            $json[<span class="string">'msg'</span>] = <span class="string">'what\'s your name?'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!$input)&#123;</span><br><span class="line">            $json[<span class="string">'msg'</span>] = <span class="string">'how old are you'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $str = base64_decode($input);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//私钥</span></span><br><span class="line">            $pKey = openssl_pkey_get_private(<span class="keyword">$this</span>-&gt;rsaPrivateKey($keyId));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//私钥解密</span></span><br><span class="line">            openssl_private_decrypt($str,$decrypted,$pKey,OPENSSL_PKCS1_PADDING);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//结果</span></span><br><span class="line">            $json[<span class="string">'flag'</span>] = <span class="number">0</span>;</span><br><span class="line">            $json[<span class="string">'decoded'</span>] = $decrypted;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">$this</span>-&gt;response-&gt;setJsonContent($json);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">createAction</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>;</span><br><span class="line">        <span class="comment">//创建密钥对</span></span><br><span class="line">        <span class="comment">//$rsaPair = openssl_pkey_new([]);</span></span><br><span class="line"></span><br><span class="line">        $rsaPair = openssl_pkey_new([</span><br><span class="line">            <span class="string">'private_key_bits'</span>=&gt;<span class="number">401</span></span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get 私钥</span></span><br><span class="line">        openssl_pkey_export($rsaPair, $privateKey);</span><br><span class="line"></span><br><span class="line">        var_dump($privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get detail of private key</span></span><br><span class="line">        <span class="comment">//array(</span></span><br><span class="line">        <span class="comment">//  bits    位数</span></span><br><span class="line">        <span class="comment">//  key 公钥</span></span><br><span class="line">        <span class="comment">//  rsa =&gt; array(</span></span><br><span class="line">        <span class="comment">//      n 模</span></span><br><span class="line">        <span class="comment">// 。。。。。。</span></span><br><span class="line">        <span class="comment">//  )</span></span><br><span class="line">        <span class="comment">//  type</span></span><br><span class="line">        <span class="comment">//)</span></span><br><span class="line">        $privateKeyDetail = openssl_pkey_get_details($rsaPair);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        //这样也行，两种方法</span></span><br><span class="line"><span class="comment">        $privateKeySource = openssl_get_privatekey($privateKey);</span></span><br><span class="line"><span class="comment">        $privateKeyDetail = openssl_pkey_get_details($privateKeySource);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//get 公钥 public key</span></span><br><span class="line">        var_dump($privateKeyDetail[<span class="string">'key'</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'------------------------------------------ private key start ------------------------------------------'</span>);</span><br><span class="line">        <span class="comment">//模 n ，一般用hex 显示</span></span><br><span class="line">        var_dump(strtoupper(bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'n'</span>])));</span><br><span class="line">        <span class="comment">//指数 e</span></span><br><span class="line"></span><br><span class="line">        var_dump(bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'e'</span>]));</span><br><span class="line"></span><br><span class="line">        var_dump(strtoupper(bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'d'</span>])));</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'------ p and q ------'</span>);</span><br><span class="line">        var_dump((bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'p'</span>])));</span><br><span class="line">        var_dump((bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'q'</span>])));</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'------------------------------------------ private key end ------------------------------------------'</span>);</span><br><span class="line">        var_dump(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'------------------------------------------ public key start ------------------------------------------'</span>);</span><br><span class="line">        <span class="comment">//也可以用public key 获取 detail</span></span><br><span class="line">        <span class="comment">//public 的 detail 里面的 rsa 的东西要少些</span></span><br><span class="line">        $publicKeySource = openssl_get_publickey($privateKeyDetail[<span class="string">'key'</span>]);</span><br><span class="line">        $publicKeyDetail = openssl_pkey_get_details($publicKeySource);</span><br><span class="line"></span><br><span class="line">        var_dump(strtoupper(bin2hex($publicKeyDetail[<span class="string">'rsa'</span>][<span class="string">'n'</span>])));</span><br><span class="line">        var_dump(bin2hex($privateKeyDetail[<span class="string">'rsa'</span>][<span class="string">'e'</span>]));</span><br><span class="line"></span><br><span class="line">        var_dump(<span class="string">'------------------------------------------ public key end ------------------------------------------'</span>);</span><br><span class="line">        var_dump($publicKeyDetail);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><ul>
<li><p>rsa<br>  <a href>http://www-cs-students.stanford.edu/~tjw/jsbn/</a></p>
</li>
<li><p>demo<br>  <a href>http://www-cs-students.stanford.edu/~tjw/jsbn/rsa.html</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>develop</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>js</tag>
        <tag>rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>Node初学者入门，一本全面的NodeJS教程</title>
    <url>/2015/2015-2015-12-05-node-js-learn/</url>
    <content><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>从前blog移植过来，暂无摘要，后期再补</p>
<a id="more"></a>
<h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>本书致力于教会你如何用Node.js来开发应用，过程中会传授你所有所需的“高级”JavaScript知识。本书绝不是一本“Hello World”的教程。</p>
<h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>你正在阅读的已经是本书的最终版。因此，只有当进行错误更正以及针对新版本Node.js的改动进行对应的修正时，才会进行更新。</p>
<p>本书中的代码案例都在Node.js 0.6.11版本中测试过，可以正确工作。</p>
<h2 id="读者对象"><a href="#读者对象" class="headerlink" title="读者对象"></a>读者对象</h2><p>本书最适合与我有相似技术背景的读者： 至少对一门诸如Ruby、Python、PHP或者Java这样面向对象的语言有一定的经验；对JavaScript处于初学阶段，并且完全是一个Node.js的新手。</p>
<p>这里指的适合对其他编程语言有一定经验的开发者，意思是说，本书不会对诸如数据类型、变量、控制结构等等之类非常基础的概念作介绍。要读懂本书，这些基础的概念我都默认你已经会了。</p>
<p>然而，本书还是会对JavaScript中的函数和对象作详细介绍，因为它们与其他同类编程语言中的函数和对象有很大的不同。</p>
<h2 id="本书结构"><a href="#本书结构" class="headerlink" title="本书结构"></a>本书结构</h2><p>读完本书之后，你将完成一个完整的web应用，该应用允许用户浏览页面以及上传文件。</p>
<p>当然了，应用本身并没有什么了不起的，相比为了实现该功能书写的代码本身，我们更关注的是如何创建一个框架来对我们应用的不同模块进行干净地剥离。 是不是很玄乎？稍后你就明白了。</p>
<p>本书先从介绍在Node.js环境中进行JavaScript开发和在浏览器环境中进行JavaScript开发的差异开始。</p>
<p>紧接着，会带领大家完成一个最传统的“Hello World”应用，这也是最基础的Node.js应用。</p>
<p>最后，会和大家讨论如何设计一个“真正”完整的应用，剖析要完成该应用需要实现的不同模块，并一步一步介绍如何来实现这些模块。</p>
<p>可以确保的是，在这过程中，大家会学到JavaScript中一些高级的概念、如何使用它们以及为什么使用这些概念就可以实现而其他编程语言中同类的概念就无法实现。</p>
<p>该应用所有的源代码都可以通过 本书Github代码仓库.</p>
<p>目录</p>
<ul>
<li><p><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">关于</a></p>
<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">状态</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">读者对象</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">本书结构</a></li>
</ul>
</li>
<li><p><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">JavaScript与Node.js</a></p>
<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">JavaScript与你</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">简短申明</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">服务器端JavaScript</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">“Hello World”</a></li>
</ul>
</li>
<li><p><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">一个完整的基于Node.js的web应用</a></p>
<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">用例</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">应用不同模块分析</a></li>
</ul>
</li>
<li><p><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">构建应用的模块</a></p>
<ul>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">处理POST请求</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">处理文件上传</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">不好的实现方式</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">阻塞与非阻塞</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">以非阻塞操作进行请求响应</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">一个基础的HTTP服务器</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">分析HTTP服务器</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">进行函数传递</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">函数传递是如何让HTTP服务器工作的</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">基于事件驱动的回调</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">服务器是如何处理请求的</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">服务端的模块放在哪里</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">如何来进行请求的“路由”</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">行为驱动执行</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">路由给真正的请求处理程序</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">让请求处理程序作出响应</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">更有用的场景</a></li>
<li><a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com#about" target="_blank" rel="noopener">总结与展望</a></li>
</ul>
</li>
</ul>
<h2 id="JavaScript与Node-js"><a href="#JavaScript与Node-js" class="headerlink" title="JavaScript与Node.js"></a>JavaScript与Node.js</h2><h3 id="JavaScript与你"><a href="#JavaScript与你" class="headerlink" title="JavaScript与你"></a>JavaScript与你</h3><p>抛开技术，我们先来聊聊你以及你和JavaScript的关系。本章的主要目的是想让你看看，对你而言是否有必要继续阅读后续章节的内容。</p>
<p>如果你和我一样，那么你很早就开始利用HTML进行“开发”，正因如此，你接触到了这个叫JavaScript有趣的东西，而对于JavaScript，你只会基本的操作——为web页面添加交互。</p>
<p>而你真正想要的是“干货”，你想要知道如何构建复杂的web站点 —— 于是，你学习了一种诸如PHP、Ruby、Java这样的编程语言，并开始书写“后端”代码。</p>
<p>与此同时，你还始终关注着JavaScript，随着通过一些对jQuery，Prototype之类技术的介绍，你慢慢了解到了很多JavaScript中的进阶技能，同时也感受到了JavaScript绝非仅仅是window.open() 那么简单。 .</p>
<p>不过，这些毕竟都是前端技术，尽管当想要增强页面的时候，使用jQuery总让你觉得很爽，但到最后，你顶多是个JavaScript用户，而非JavaScript开发者。</p>
<p>然后，出现了Node.js，服务端的JavaScript，这有多酷啊？</p>
<p>于是，你觉得是时候该重新拾起既熟悉又陌生的JavaScript了。但是别急，写Node.js应用是一件事情；理解为什么它们要以它们书写的这种方式来书写则意味着——你要懂JavaScript。这次是玩真的了。</p>
<p>问题来了： 由于JavaScript真正意义上以两种，甚至可以说是三种形态存在（从中世纪90年代的作为对DHTML进行增强的小玩具，到像jQuery那样严格意义上的前端技术，一直到现在的服务端技术），因此，很难找到一个“正确”的方式来学习JavaScript，使得让你书写Node.js应用的时候感觉自己是在真正开发它而不仅仅是使用它。</p>
<p>因为这就是关键： 你本身已经是个有经验的开发者，你不想通过到处寻找各种解决方案（其中可能还有不正确的）来学习新的技术，你要确保自己是通过正确的方式来学习这项技术。</p>
<p>当然了，外面不乏很优秀的学习JavaScript的文章。但是，有的时候光靠那些文章是远远不够的。你需要的是指导。</p>
<p>本书的目标就是给你提供指导。</p>
<h2 id="简短申明"><a href="#简短申明" class="headerlink" title="简短申明"></a>简短申明</h2><p>业界有非常优秀的JavaScript程序员。而我并非其中一员。</p>
<p>我就是上一节中描述的那个我。我熟悉如何开发后端web应用，但是对“真正”的JavaScript以及Node.js，我都只是新手。我也只是最近学习了一些JavaScript的高级概念，并没有实践经验。</p>
<p>因此，本书并不是一本“从入门到精通”的书，更像是一本“从初级入门到高级入门”的书。</p>
<p>如果成功的话，那么本书就是我当初开始学习Node.js最希望拥有的教程。</p>
<h2 id="服务端JavaScript"><a href="#服务端JavaScript" class="headerlink" title="服务端JavaScript"></a>服务端JavaScript</h2><p>JavaScript最早是运行在浏览器中，然而浏览器只是提供了一个上下文，它定义了使用JavaScript可以做什么，但并没有“说”太多关于JavaScript语言本身可以做什么。事实上，JavaScript是一门“完整”的语言： 它可以使用在不同的上下文中，其能力与其他同类语言相比有过之而无不及。</p>
<p>Node.js事实上就是另外一种上下文，它允许在后端（脱离浏览器环境）运行JavaScript代码。</p>
<p>要实现在后台运行JavaScript代码，代码需要先被解释然后正确的执行。Node.js的原理正是如此，它使用了Google的V8虚拟机（Google的Chrome浏览器使用的JavaScript执行环境），来解释和执行JavaScript代码。</p>
<p>除此之外，伴随着Node.js的还有许多有用的模块，它们可以简化很多重复的劳作，比如向终端输出字符串。</p>
<p>因此，Node.js事实上既是一个运行时环境，同时又是一个库。</p>
<p>要使用Node.js,首先需要进行安装。关于如何安装Node.js，这里就不赘述了，可以直接参考官方的安装指南。安装完成后，继续回来阅读本书下面的内容。</p>
<h2 id="“Hello-World”"><a href="#“Hello-World”" class="headerlink" title="“Hello World”"></a>“Hello World”</h2><p>好了，“废话”不多说了，马上开始我们第一个Node.js应用：“Hello World”。</p>
<p>打开你最喜欢的编辑器，创建一个helloworld.js文件。我们要做就是向STDOUT输出“Hello World”，如下是实现该功能的代码：</p>
<pre><code>console.log(&quot;Hello World&quot;);
</code></pre><p>保存该文件，并通过Node.js来执行：</p>
<pre><code>node helloworld.js
</code></pre><p>正常的话，就会在终端输出Hello World 。</p>
<p>好吧，我承认这个应用是有点无趣，那么下面我们就来点“干货”。</p>
<h2 id="一个完整的基于Node-js的web应用"><a href="#一个完整的基于Node-js的web应用" class="headerlink" title="一个完整的基于Node.js的web应用"></a>一个完整的基于Node.js的web应用</h2><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><p>我们来把目标设定得简单点，不过也要够实际才行：</p>
<p>用户可以通过浏览器使用我们的应用。</p>
<p>当用户请求<a href="http://domain/start时，可以看到一个欢迎页面，页面上有一个文件上传的表单。" target="_blank" rel="noopener">http://domain/start时，可以看到一个欢迎页面，页面上有一个文件上传的表单。</a></p>
<p>用户可以选择一个图片并提交表单，随后文件将被上传到<a href="http://domain/upload，该页面完成上传后会把图片显示在页面上。" target="_blank" rel="noopener">http://domain/upload，该页面完成上传后会把图片显示在页面上。</a></p>
<p>差不多了，你现在也可以去Google一下，找点东西乱搞一下来完成功能。但是我们现在先不做这个。</p>
<p>更进一步地说，在完成这一目标的过程中，我们不仅仅需要基础的代码而不管代码是否优雅。我们还要对此进行抽象，来寻找一种适合构建更为复杂的Node.js应用的方式。</p>
<h2 id="应用不同模块分析"><a href="#应用不同模块分析" class="headerlink" title="应用不同模块分析"></a>应用不同模块分析</h2><p>我们来分解一下这个应用，为了实现上文的用例，我们需要实现哪些部分呢？</p>
<ul>
<li><p>我们需要提供Web页面，因此需要一个HTTP服务器</p>
</li>
<li><p>对于不同的请求，根据请求的URL，我们的服务器需要给予不同的响应，因此我们需要一个路由，用于把请求对应到请求处理程序（request handler）</p>
</li>
<li><p>当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，因此我们需要最终的请求处理程序</p>
</li>
<li><p>路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理入程序，因此需要请求数据处理功能</p>
</li>
<li><p>我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器</p>
</li>
<li><p>最后，用户需要上传图片，所以我们需要上传处理功能来处理这方面的细节</p>
</li>
</ul>
<p>我们先来想想，使用PHP的话我们会怎么构建这个结构。一般来说我们会用一个Apache HTTP服务器并配上mod_php5模块。<br>从这个角度看，整个“接收HTTP请求并提供Web页面”的需求根本不需要PHP来处理。</p>
<p>不过对Node.js来说，概念完全不一样了。使用Node.js时，我们不仅仅在实现一个应用，同时还实现了整个HTTP服务器。事实上，我们的Web应用以及对应的Web服务器基本上是一样的。</p>
<p>听起来好像有一大堆活要做，但随后我们会逐渐意识到，对Node.js来说这并不是什么麻烦的事。</p>
<p>现在我们就来开始实现之路，先从第一个部分–HTTP服务器着手。</p>
<h2 id="构建应用的模块"><a href="#构建应用的模块" class="headerlink" title="构建应用的模块"></a>构建应用的模块</h2><h3 id="一个基础的HTTP服务器"><a href="#一个基础的HTTP服务器" class="headerlink" title="一个基础的HTTP服务器"></a>一个基础的HTTP服务器</h3><p>当我准备开始写我的第一个“真正的”Node.js应用的时候，我不但不知道怎么写Node.js代码，也不知道怎么组织这些代码。<br>我应该把所有东西都放进一个文件里吗？网上有很多教程都会教你把所有的逻辑都放进一个用Node.js写的基础HTTP服务器里。但是如果我想加入更多的内容，同时还想保持代码的可读性呢？</p>
<p>实际上，只要把不同功能的代码放入不同的模块中，保持代码分离还是相当简单的。</p>
<p>这种方法允许你拥有一个干净的主文件（main file），你可以用Node.js执行它；同时你可以拥有干净的模块，它们可以被主文件和其他的模块调用。</p>
<p>那么，现在我们来创建一个用于启动我们的应用的主文件，和一个保存着我们的HTTP服务器代码的模块。</p>
<p>在我的印象里，把主文件叫做index.js或多或少是个标准格式。把服务器模块放进叫server.js的文件里则很好理解。</p>
<p>让我们先从服务器模块开始。在你的项目的根目录下创建一个叫server.js的文件，并写入以下代码：</p>
<pre><code>var http = require(&quot;http&quot;);

http.createServer(function(request, response) {
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello World&quot;);
  response.end();
}).listen(8888);
</code></pre><p>搞定！你刚刚完成了一个可以工作的HTTP服务器。为了证明这一点，我们来运行并且测试这段代码。首先，用Node.js执行你的脚本：</p>
<pre><code>node server.js
</code></pre><p>接下来，打开浏览器访问<a href="http://localhost:8888/，你会看到一个写着“Hello" target="_blank" rel="noopener">http://localhost:8888/，你会看到一个写着“Hello</a> World”的网页。</p>
<p>这很有趣，不是吗？让我们先来谈谈HTTP服务器的问题，把如何组织项目的事情先放一边吧，你觉得如何？我保证之后我们会解决那个问题的。</p>
<h2 id="分析HTTP服务器"><a href="#分析HTTP服务器" class="headerlink" title="分析HTTP服务器"></a>分析HTTP服务器</h2><p>那么接下来，让我们分析一下这个HTTP服务器的构成。</p>
<p>第一行请求（require）Node.js自带的 http 模块，并且把它赋值给 http 变量。</p>
<p>接下来我们调用http模块提供的函数： createServer 。这个函数会返回一个对象，这个对象有一个叫做 listen 的方法，这个方法有一个数值参数，指定这个HTTP服务器监听的端口号。</p>
<p>咱们暂时先不管 http.createServer 的括号里的那个函数定义。</p>
<p>我们本来可以用这样的代码来启动服务器并侦听8888端口：</p>
<pre><code>var http = require(&quot;http&quot;);

var server = http.createServer();
server.listen(8888);
</code></pre><p>这段代码只会启动一个侦听8888端口的服务器，它不做任何别的事情，甚至连请求都不会应答。</p>
<p>最有趣（而且，如果你之前习惯使用一个更加保守的语言，比如PHP，它还很奇怪）的部分是 createSever() 的第一个参数，一个函数定义。</p>
<p>实际上，这个函数定义是 createServer() 的第一个也是唯一一个参数。因为在JavaScript中，函数和其他变量一样都是可以被传递的。</p>
<h2 id="进行函数传递"><a href="#进行函数传递" class="headerlink" title="进行函数传递"></a>进行函数传递</h2><p>举例来说，你可以这样做：</p>
<pre><code>function say(word) {
  console.log(word);
}

function execute(someFunction, value) {
  someFunction(value);
}

execute(say, &quot;Hello&quot;);
</code></pre><p>请仔细阅读这段代码！在这里，我们把 say 函数作为execute函数的第一个变量进行了传递。这里传递的不是 say 的返回值，而是 say 本身！</p>
<p>这样一来， say 就变成了execute 中的本地变量 someFunction ，execute可以通过调用 someFunction() （带括号的形式）来使用 say 函数。</p>
<p>当然，因为 say 有一个变量， execute 在调用 someFunction 时可以传递这样一个变量。</p>
<p>我们可以，就像刚才那样，用它的名字把一个函数作为变量传递。但是我们不一定要绕这个“先定义，再传递”的圈子，我们可以直接在另一个函数的括号中定义和传递这个函数：</p>
<pre><code>function execute(someFunction, value) {
  someFunction(value);
}

execute(function(word){ console.log(word) }, &quot;Hello&quot;);
</code></pre><p>我们在 execute 接受第一个参数的地方直接定义了我们准备传递给 execute 的函数。</p>
<p>用这种方式，我们甚至不用给这个函数起名字，这也是为什么它被叫做 匿名函数。</p>
<p>这是我们和我所认为的“进阶”JavaScript的第一次亲密接触，不过我们还是得循序渐进。现在，我们先接受这一点：在JavaScript中，一个函数可以作为另一个函数接收一个参数。我们可以先定义一个函数，然后传递，也可以在传递参数的地方直接定义函数。</p>
<h2 id="函数传递是如何让HTTP服务器工作的"><a href="#函数传递是如何让HTTP服务器工作的" class="headerlink" title="函数传递是如何让HTTP服务器工作的"></a>函数传递是如何让HTTP服务器工作的</h2><p>带着这些知识，我们再来看看我们简约而不简单的HTTP服务器：</p>
<p>var http = require(“http”);</p>
<pre><code>http.createServer(function(request, response) {
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello World&quot;);
  response.end();
}).listen(8888);
</code></pre><p>现在它看上去应该清晰了很多：我们向 createServer 函数传递了一个匿名函数。</p>
<p>用这样的代码也可以达到同样的目的：</p>
<pre><code>var http = require(&quot;http&quot;);

function onRequest(request, response) {
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello World&quot;);
  response.end();
}
</code></pre><p>http.createServer(onRequest).listen(8888);<br>也许现在我们该问这个问题了：我们为什么要用这种方式呢？</p>
<h2 id="基于事件驱动的回调"><a href="#基于事件驱动的回调" class="headerlink" title="基于事件驱动的回调"></a>基于事件驱动的回调</h2><p>这个问题可不好回答（至少对我来说），不过这是Node.js原生的工作方式。它是事件驱动的，这也是它为什么这么快的原因。</p>
<p>你也许会想花点时间读一下Felix Geisendörfer的大作Understanding node.js，它介绍了一些背景知识。</p>
<p>这一切都归结于“Node.js是事件驱动的”这一事实。好吧，其实我也不是特别确切的了解这句话的意思。不过我会试着解释，为什么它对我们用Node.js写网络应用（Web based application）是有意义的。</p>
<p>当我们使用 http.createServer 方法的时候，我们当然不只是想要一个侦听某个端口的服务器，我们还想要它在服务器收到一个HTTP请求的时候做点什么。</p>
<p>问题是，这是异步的：请求任何时候都可能到达，但是我们的服务器却跑在一个单进程中。</p>
<p>写PHP应用的时候，我们一点也不为此担心：任何时候当有请求进入的时候，网页服务器（通常是Apache）就为这一请求新建一个进程，并且开始从头到尾执行相应的PHP脚本。</p>
<p>那么在我们的Node.js程序中，当一个新的请求到达8888端口的时候，我们怎么控制流程呢？</p>
<p>嗯，这就是Node.js/JavaScript的事件驱动设计能够真正帮上忙的地方了——虽然我们还得学一些新概念才能掌握它。让我们来看看这些概念是怎么应用在我们的服务器代码里的。</p>
<p>我们创建了服务器，并且向创建它的方法传递了一个函数。无论何时我们的服务器收到一个请求，这个函数就会被调用。</p>
<p>我们不知道这件事情什么时候会发生，但是我们现在有了一个处理请求的地方：它就是我们传递过去的那个函数。至于它是被预先定义的函数还是匿名函数，就无关紧要了。</p>
<p>这个就是传说中的 回调 。我们给某个方法传递了一个函数，这个方法在有相应事件发生时调用这个函数来进行 回调 。</p>
<p>至少对我来说，需要一些功夫才能弄懂它。你如果还是不太确定的话就再去读读Felix的博客文章。</p>
<p>让我们再来琢磨琢磨这个新概念。我们怎么证明，在创建完服务器之后，即使没有HTTP请求进来、我们的回调函数也没有被调用的情况下，我们的代码还继续有效呢？我们试试这个：</p>
<pre><code>var http = require(&quot;http&quot;);

function onRequest(request, response) {
  console.log(&quot;Request received.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello World&quot;);
  response.end();
}

http.createServer(onRequest).listen(8888);

console.log(&quot;Server has started.&quot;);
</code></pre><p>注意：在 onRequest （我们的回调函数）触发的地方，我用 console.log 输出了一段文本。在HTTP服务器开始工作之后，也输出一段文本。</p>
<p>当我们与往常一样，运行它node server.js时，它会马上在命令行上输出“Server has started.”。当我们向服务器发出请求（在浏览器访问<a href="http://localhost:8888/），“Request" target="_blank" rel="noopener">http://localhost:8888/），“Request</a> received.”这条消息就会在命令行中出现。</p>
<p>这就是事件驱动的异步服务器端JavaScript和它的回调啦！</p>
<p>（请注意，当我们在服务器访问网页时，我们的服务器可能会输出两次“Request received.”。那是因为大部分服务器都会在你访问 <a href="http://localhost:8888" target="_blank" rel="noopener">http://localhost:8888</a> /时尝试读取 <a href="http://localhost:8888/favicon.ico" target="_blank" rel="noopener">http://localhost:8888/favicon.ico</a> )</p>
<h2 id="服务器是如何处理请求的"><a href="#服务器是如何处理请求的" class="headerlink" title="服务器是如何处理请求的"></a>服务器是如何处理请求的</h2><p>好的，接下来我们简单分析一下我们服务器代码中剩下的部分，也就是我们的回调函数 onRequest() 的主体部分。</p>
<p>当回调启动，我们的 onRequest() 函数被触发的时候，有两个参数被传入：request 和 response 。</p>
<p>它们是对象，你可以使用它们的方法来处理HTTP请求的细节，并且响应请求（比如向发出请求的浏览器发回一些东西）。</p>
<p>所以我们的代码就是：当收到请求时，使用 response.writeHead() 函数发送一个HTTP状态200和HTTP头的内容类型（content-type），使用 response.write() 函数在HTTP相应主体中发送文本“Hello World”。</p>
<p>最后，我们调用 response.end() 完成响应。</p>
<p>目前来说，我们对请求的细节并不在意，所以我们没有使用 request 对象。</p>
<h2 id="服务端的模块放在哪里"><a href="#服务端的模块放在哪里" class="headerlink" title="服务端的模块放在哪里"></a>服务端的模块放在哪里</h2><p>OK，就像我保证过的那样，我们现在可以回到我们如何组织应用这个问题上了。我们现在在 server.js 文件中有一个非常基础的HTTP服务器代码，而且我提到通常我们会有一个叫 index.js 的文件去调用应用的其他模块（比如 server.js 中的HTTP服务器模块）来引导和启动应用。</p>
<p>我们现在就来谈谈怎么把server.js变成一个真正的Node.js模块，使它可以被我们（还没动工）的 index.js 主文件使用。</p>
<p>也许你已经注意到，我们已经在代码中使用了模块了。像这样：</p>
<pre><code>var http = require(&quot;http&quot;);

...

http.createServer(...);
</code></pre><p>Node.js中自带了一个叫做“http”的模块，我们在我们的代码中请求它并把返回值赋给一个本地变量。</p>
<p>这把我们的本地变量变成了一个拥有所有 http 模块所提供的公共方法的对象。</p>
<p>给这种本地变量起一个和模块名称一样的名字是一种惯例，但是你也可以按照自己的喜好来：</p>
<pre><code>var foo = require(&quot;http&quot;);

...

foo.createServer(...);
</code></pre><p>很好，怎么使用Node.js内部模块已经很清楚了。我们怎么创建自己的模块，又怎么使用它呢？</p>
<p>等我们把 server.js 变成一个真正的模块，你就能搞明白了。</p>
<p>事实上，我们不用做太多的修改。把某段代码变成模块意味着我们需要把我们希望提供其功能的部分 导出 到请求这个模块的脚本。</p>
<p>目前，我们的HTTP服务器需要导出的功能非常简单，因为请求服务器模块的脚本仅仅是需要启动服务器而已。</p>
<p>我们把我们的服务器脚本放到一个叫做 start 的函数里，然后我们会导出这个函数。</p>
<pre><code>var http = require(&quot;http&quot;);

function start() {
  function onRequest(request, response) {
    console.log(&quot;Request received.&quot;);
    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;Hello World&quot;);
    response.end();
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>这样，我们现在就可以创建我们的主文件 index.js 并在其中启动我们的HTTP了，虽然服务器的代码还在 server.js 中。</p>
<p>创建 index.js 文件并写入以下内容：</p>
<pre><code>var server = require(&quot;./server&quot;);

server.start();
</code></pre><p>正如你所看到的，我们可以像使用任何其他的内置模块一样使用server模块：请求这个文件并把它指向一个变量，其中已导出的函数就可以被我们使用了。</p>
<p>好了。我们现在就可以从我们的主要脚本启动我们的的应用了，而它还是老样子：</p>
<pre><code>node index.js
</code></pre><p>非常好，我们现在可以把我们的应用的不同部分放入不同的文件里，并且通过生成模块的方式把它们连接到一起了。</p>
<p>我们仍然只拥有整个应用的最初部分：我们可以接收HTTP请求。但是我们得做点什么——对于不同的URL请求，服务器应该有不同的反应。</p>
<p>对于一个非常简单的应用来说，你可以直接在回调函数 onRequest() 中做这件事情。不过就像我说过的，我们应该加入一些抽象的元素，让我们的例子变得更有趣一点儿。</p>
<p>处理不同的HTTP请求在我们的代码中是一个不同的部分，叫做“路由选择”——那么，我们接下来就创造一个叫做 路由 的模块吧。</p>
<h2 id="如何来进行请求的“路由”"><a href="#如何来进行请求的“路由”" class="headerlink" title="如何来进行请求的“路由”"></a>如何来进行请求的“路由”</h2><p>我们要为路由提供请求的URL和其他需要的GET及POST参数，随后路由需要根据这些数据来执行相应的代码（这里“代码”对应整个应用的第三部分：一系列在接收到请求时真正工作的处理程序）。</p>
<p>因此，我们需要查看HTTP请求，从中提取出请求的URL以及GET/POST参数。这一功能应当属于路由还是服务器（甚至作为一个模块自身的功能）确实值得探讨，但这里暂定其为我们的HTTP服务器的功能。</p>
<p>我们需要的所有数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。但是为了解析这些数据，我们需要额外的Node.JS模块，它们分别是url和querystring模块。</p>
<pre><code>                               url.parse(string).query
                                           |
           url.parse(string).pathname      |
                       |                   |
                       |                   |
                     ------ -------------------
http://localhost:8888/start?foo=bar&amp;hello=world
                                ---       -----
                                 |          |
                                 |          |
              querystring(string)[&quot;foo&quot;]    |
                                            |
                         querystring(string)[&quot;hello&quot;]
</code></pre><p>当然我们也可以用querystring模块来解析POST请求体中的参数，稍后会有演示。</p>
<p>现在我们来给onRequest()函数加上一些逻辑，用来找出浏览器请求的URL路径：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start() {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);
    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;Hello World&quot;);
    response.end();
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>好了，我们的应用现在可以通过请求的URL路径来区别不同请求了–这使我们得以使用路由（还未完成）来将请求以URL路径为基准映射到处理程序上。</p>
<p>在我们所要构建的应用中，这意味着来自/start和/upload的请求可以使用不同的代码来处理。稍后我们将看到这些内容是如何整合到一起的。</p>
<p>现在我们可以来编写路由了，建立一个名为router.js的文件，添加以下内容：</p>
<pre><code>function route(pathname) {
  console.log(&quot;About to route a request for &quot; + pathname);
}

exports.route = route;
</code></pre><p>如你所见，这段代码什么也没干，不过对于现在来说这是应该的。在添加更多的逻辑以前，我们先来看看如何把路由和服务器整合起来。</p>
<p>我们的服务器应当知道路由的存在并加以有效利用。我们当然可以通过硬编码的方式将这一依赖项绑定到服务器上，但是其它语言的编程经验告诉我们这会是一件非常痛苦的事，因此我们将使用依赖注入的方式较松散地添加路由模块（你可以读读Martin Fowlers关于依赖注入的大作来作为背景知识）。</p>
<p>首先，我们来扩展一下服务器的start()函数，以便将路由函数作为参数传递过去：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route) {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);

    route(pathname);

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;Hello World&quot;);
    response.end();
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>同时，我们会相应扩展index.js，使得路由函数可以被注入到服务器中：</p>
<pre><code>var server = require(&quot;./server&quot;);
var router = require(&quot;./router&quot;);

server.start(router.route);
</code></pre><p>在这里，我们传递的函数依旧什么也没做。</p>
<p>如果现在启动应用（node index.js，始终记得这个命令行），随后请求一个URL，你将会看到应用输出相应的信息，这表明我们的HTTP服务器已经在使用路由模块了，并会将请求的路径传递给路由：</p>
<pre><code>bash$ node index.js
Request for /foo received.
About to route a request for /foo
</code></pre><p>（以上输出已经去掉了比较烦人的/favicon.ico请求相关的部分）。</p>
<h2 id="行为驱动执行"><a href="#行为驱动执行" class="headerlink" title="行为驱动执行"></a>行为驱动执行</h2><p>请允许我再次脱离主题，在这里谈一谈函数式编程。</p>
<p>将函数作为参数传递并不仅仅出于技术上的考量。对软件设计来说，这其实是个哲学问题。想想这样的场景：在index文件中，我们可以将router对象传递进去，服务器随后可以调用这个对象的route函数。</p>
<p>就像这样，我们传递一个东西，然后服务器利用这个东西来完成一些事。嗨那个叫路由的东西，能帮我把这个路由一下吗？</p>
<p>但是服务器其实不需要这样的东西。它只需要把事情做完就行，其实为了把事情做完，你根本不需要东西，你需要的是动作。也就是说，你不需要名词，你需要动词。</p>
<p>理解了这个概念里最核心、最基本的思想转换后，我自然而然地理解了函数编程。</p>
<p>我是在读了Steve Yegge的大作名词王国中的死刑之后理解函数编程。你也去读一读这本书吧，真的。这是曾给予我阅读的快乐的关于软件的书籍之一。</p>
<h2 id="路由给真正的请求处理程序"><a href="#路由给真正的请求处理程序" class="headerlink" title="路由给真正的请求处理程序"></a>路由给真正的请求处理程序</h2><p>回到正题，现在我们的HTTP服务器和请求路由模块已经如我们的期望，可以相互交流了，就像一对亲密无间的兄弟。</p>
<p>当然这还远远不够，路由，顾名思义，是指我们要针对不同的URL有不同的处理方式。例如处理/start的“业务逻辑”就应该和处理/upload的不同。</p>
<p>在现在的实现下，路由过程会在路由模块中“结束”，并且路由模块并不是真正针对请求“采取行动”的模块，否则当我们的应用程序变得更为复杂时，将无法很好地扩展。</p>
<p>我们暂时把作为路由目标的函数称为请求处理程序。现在我们不要急着来开发路由模块，因为如果请求处理程序没有就绪的话，再怎么完善路由模块也没有多大意义。</p>
<p>应用程序需要新的部件，因此加入新的模块 – 已经无需为此感到新奇了。我们来创建一个叫做requestHandlers的模块，并对于每一个请求处理程序，添加一个占位用函数，随后将这些函数作为模块的方法导出：</p>
<pre><code>function start() {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);
}

function upload() {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
}

exports.start = start;
exports.upload = upload;
</code></pre><p>这样我们就可以把请求处理程序和路由模块连接起来，让路由“有路可寻”。</p>
<p>在这里我们得做个决定：是将requestHandlers模块硬编码到路由里来使用，还是再添加一点依赖注入？虽然和其他模式一样，依赖注入不应该仅仅为使用而使用，但在现在这个情况下，使用依赖注入可以让路由和请求处理程序之间的耦合更加松散，也因此能让路由的重用性更高。</p>
<p>这意味着我们得将请求处理程序从服务器传递到路由中，但感觉上这么做更离谱了，我们得一路把这堆请求处理程序从我们的主文件传递到服务器中，再将之从服务器传递到路由。</p>
<p>那么我们要怎么传递这些请求处理程序呢？别看现在我们只有2个处理程序，在一个真实的应用中，请求处理程序的数量会不断增加，我们当然不想每次有一个新的URL或请求处理程序时，都要为了在路由里完成请求到处理程序的映射而反复折腾。除此之外，在路由里有一大堆if request == x then call handler y也使得系统丑陋不堪。</p>
<p>仔细想想，有一大堆东西，每个都要映射到一个字符串（就是请求的URL）上？似乎关联数组（associative array）能完美胜任。</p>
<p>不过结果有点令人失望，JavaScript没提供关联数组 – 也可以说它提供了？事实上，在JavaScript中，真正能提供此类功能的是它的对象。</p>
<p>在这方面，<a href="http://msdn.microsoft.com/en-us/magazine/cc163419.aspx有一个不错的介绍，我在此摘录一段：" target="_blank" rel="noopener">http://msdn.microsoft.com/en-us/magazine/cc163419.aspx有一个不错的介绍，我在此摘录一段：</a></p>
<blockquote>
<p>在C++或C#中，当我们谈到对象，指的是类或者结构体的实例。对象根据他们实例化的模板（就是所谓的类），会拥有不同的属性和方法。但在JavaScript里对象不是这个概念。在JavaScript中，对象就是一个键/值对的集合 – 你可以把JavaScript的对象想象成一个键为字符串类型的字典。</p>
</blockquote>
<p>但如果JavaScript的对象仅仅是键/值对的集合，它又怎么会拥有方法呢？好吧，这里的值可以是字符串、数字或者……函数！</p>
<p>好了，最后再回到代码上来。现在我们已经确定将一系列请求处理程序通过一个对象来传递，并且需要使用松耦合的方式将这个对象注入到route()函数中。</p>
<p>我们先将这个对象引入到主文件index.js中：</p>
<pre><code>var server = require(&quot;./server&quot;);
var router = require(&quot;./router&quot;);
var requestHandlers = require(&quot;./requestHandlers&quot;);

var handle = {}
handle[&quot;/&quot;] = requestHandlers.start;
handle[&quot;/start&quot;] = requestHandlers.start;
handle[&quot;/upload&quot;] = requestHandlers.upload;

server.start(router.route, handle);
</code></pre><p>虽然handle并不仅仅是一个“东西”（一些请求处理程序的集合），我还是建议以一个动词作为其命名，这样做可以让我们在路由中使用更流畅的表达式，稍后会有说明。</p>
<p>正如所见，将不同的URL映射到相同的请求处理程序上是很容易的：只要在对象中添加一个键为”/“的属性，对应requestHandlers.start即可，这样我们就可以干净简洁地配置/start和/的请求都交由start这一处理程序处理。</p>
<p>在完成了对象的定义后，我们把它作为额外的参数传递给服务器，为此将server.js修改如下：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route, handle) {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);

    route(handle, pathname);

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;Hello World&quot;);
    response.end();
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。</p>
<p>然后我们相应地在route.js文件中修改route()函数：</p>
<pre><code>function route(handle, pathname) {
  console.log(&quot;About to route a request for &quot; + pathname);
  if (typeof handle[pathname] === &apos;function&apos;) {
    handle[pathname]();
  } else {
    console.log(&quot;No request handler found for &quot; + pathname);
  }
}

exports.route = route;
</code></pre><p>通过以上代码，我们首先检查给定的路径对应的请求处理程序是否存在，如果存在的话直接调用相应的函数。我们可以用从关联数组中获取元素一样的方式从传递的对象中获取请求处理函数，因此就有了简洁流畅的形如handle<a href>pathname</a>;的表达式，这个感觉就像在前方中提到的那样：“嗨，请帮我处理了这个路径”。</p>
<p>有了这些，我们就把服务器、路由和请求处理程序在一起了。现在我们启动应用程序并在浏览器中访问<a href="http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：" target="_blank" rel="noopener">http://localhost:8888/start，以下日志可以说明系统调用了正确的请求处理程序：</a></p>
<pre><code>Server has started.
Request for /start received.
About to route a request for /start
Request handler &apos;start&apos; was called.
</code></pre><p>并且在浏览器中打开<a href="http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：" target="_blank" rel="noopener">http://localhost:8888/可以看到这个请求同样被start请求处理程序处理了：</a></p>
<pre><code>Request for / received.
About to route a request for /
Request handler &apos;start&apos; was called.
</code></pre><p>让请求处理程序作出响应</p>
<p>很好。不过现在要是请求处理程序能够向浏览器返回一些有意义的信息而并非全是“Hello World”，那就更好了。</p>
<p>这里要记住的是，浏览器发出请求后获得并显示的“Hello World”信息仍是来自于我们server.js文件中的onRequest函数。</p>
<p>其实“处理请求”说白了就是“对请求作出响应”，因此，我们需要让请求处理程序能够像onRequest函数那样可以和浏览器进行“对话”。</p>
<h2 id="不好的实现方式"><a href="#不好的实现方式" class="headerlink" title="不好的实现方式"></a>不好的实现方式</h2><p>对于我们这样拥有PHP或者Ruby技术背景的开发者来说，最直截了当的实现方式事实上并不是非常靠谱： 看似有效，实则未必如此。</p>
<p>这里我指的“直截了当的实现方式”意思是：让请求处理程序通过onRequest函数直接返回（return()）他们要展示给用户的信息。</p>
<p>我们先就这样去实现，然后再来看为什么这不是一种很好的实现方式。</p>
<p>让我们从让请求处理程序返回需要在浏览器中显示的信息开始。我们需要将requestHandler.js修改为如下形式：</p>
<pre><code>function start() {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);
  return &quot;Hello Start&quot;;
}

function upload() {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  return &quot;Hello Upload&quot;;
}

exports.start = start;
exports.upload = upload;
</code></pre><p>好的。同样的，请求路由需要将请求处理程序返回给它的信息返回给服务器。因此，我们需要将router.js修改为如下形式：</p>
<pre><code>function route(handle, pathname) {
  console.log(&quot;About to route a request for &quot; + pathname);
  if (typeof handle[pathname] === &apos;function&apos;) {
    return handle[pathname]();
  } else {
    console.log(&quot;No request handler found for &quot; + pathname);
    return &quot;404 Not found&quot;;
  }
}

exports.route = route;
</code></pre><p>正如上述代码所示，当请求无法路由的时候，我们也返回了一些相关的错误信息。</p>
<p>最后，我们需要对我们的server.js进行重构以使得它能够将请求处理程序通过请求路由返回的内容响应给浏览器，如下所示：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route, handle) {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    var content = route(handle, pathname)
    response.write(content);
    response.end();
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>如果我们运行重构后的应用，一切都会工作的很好：请求<a href="http://localhost:8888/start,浏览器会输出“Hello" target="_blank" rel="noopener">http://localhost:8888/start,浏览器会输出“Hello</a> Start”，请求<a href="http://localhost:8888/upload会输出“Hello" target="_blank" rel="noopener">http://localhost:8888/upload会输出“Hello</a> Upload”,而请求<a href="http://localhost:8888/foo" target="_blank" rel="noopener">http://localhost:8888/foo</a> 会输出“404 Not found”。</p>
<p>好，那么问题在哪里呢？简单的说就是： 当未来有请求处理程序需要进行非阻塞的操作的时候，我们的应用就“挂”了。</p>
<p>没理解？没关系，下面就来详细解释下。</p>
<h2 id="阻塞与非阻塞"><a href="#阻塞与非阻塞" class="headerlink" title="阻塞与非阻塞"></a>阻塞与非阻塞</h2><p>正如此前所提到的，当在请求处理程序中包括非阻塞操作时就会出问题。但是，在说这之前，我们先来看看什么是阻塞操作。</p>
<p>我不想去解释“阻塞”和“非阻塞”的具体含义，我们直接来看，当在请求处理程序中加入阻塞操作时会发生什么。</p>
<p>这里，我们来修改下start请求处理程序，我们让它等待10秒以后再返回“Hello Start”。因为，JavaScript中没有类似sleep()这样的操作，所以这里只能够来点小Hack来模拟实现。</p>
<p>让我们将requestHandlers.js修改成如下形式：</p>
<pre><code>function start() {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  function sleep(milliSeconds) {
    var startTime = new Date().getTime();
    while (new Date().getTime() &lt; startTime + milliSeconds);
  }

  sleep(10000);
  return &quot;Hello Start&quot;;
}

function upload() {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  return &quot;Hello Upload&quot;;
}

exports.start = start;
exports.upload = upload;
</code></pre><p>上述代码中，当函数start()被调用的时候，Node.js会先等待10秒，之后才会返回“Hello Start”。当调用upload()的时候，会和此前一样立即返回。</p>
<p>（当然了，这里只是模拟休眠10秒，实际场景中，这样的阻塞操作有很多，比方说一些长时间的计算操作等。）</p>
<p>接下来就让我们来看看，我们的改动带来了哪些变化。</p>
<p>如往常一样，我们先要重启下服务器。为了看到效果，我们要进行一些相对复杂的操作（跟着我一起做）： 首先，打开两个浏览器窗口或者标签页。在第一个浏览器窗口的地址栏中输入<a href="http://localhost:8888/start，" target="_blank" rel="noopener">http://localhost:8888/start，</a> 但是先不要打开它！</p>
<p>在第二个浏览器窗口的地址栏中输入<a href="http://localhost:8888/upload，" target="_blank" rel="noopener">http://localhost:8888/upload，</a> 同样的，先不要打开它！</p>
<p>接下来，做如下操作：在第一个窗口中（“/start”）按下回车，然后快速切换到第二个窗口中（“/upload”）按下回车。</p>
<p>注意，发生了什么： /start URL加载花了10秒，这和我们预期的一样。但是，/upload URL居然也花了10秒，而它在对应的请求处理程序中并没有类似于sleep()这样的操作！</p>
<p>这到底是为什么呢？原因就是start()包含了阻塞操作。形象的说就是“它阻塞了所有其他的处理工作”。</p>
<p>这显然是个问题，因为Node一向是这样来标榜自己的：“在node中除了代码，所有一切都是并行执行的”。</p>
<p>这句话的意思是说，Node.js可以在不新增额外线程的情况下，依然可以对任务进行并行处理 —— Node.js是单线程的。它通过事件轮询（event loop）来实现并行操作，对此，我们应该要充分利用这一点 —— 尽可能的避免阻塞操作，取而代之，多使用非阻塞操作。</p>
<p>然而，要用非阻塞操作，我们需要使用回调，通过将函数作为参数传递给其他需要花时间做处理的函数（比方说，休眠10秒，或者查询数据库，又或者是进行大量的计算）。</p>
<p>对于Node.js来说，它是这样处理的：“嘿，probablyExpensiveFunction()（译者注：这里指的就是需要花时间处理的函数），你继续处理你的事情，我（Node.js线程）先不等你了，我继续去处理你后面的代码，请你提供一个callbackFunction()，等你处理完之后我会去调用该回调函数的，谢谢！”</p>
<p>（如果想要了解更多关于事件轮询细节，可以阅读Mixu的博文——理解node.js的事件轮询。）</p>
<p>接下来，我们会介绍一种错误的使用非阻塞操作的方式。</p>
<p>和上次一样，我们通过修改我们的应用来暴露问题。</p>
<p>这次我们还是拿start请求处理程序来“开刀”。将其修改成如下形式：</p>
<pre><code>var exec = require(&quot;child_process&quot;).exec;

function start() {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);
  var content = &quot;empty&quot;;

  exec(&quot;ls -lah&quot;, function (error, stdout, stderr) {
    content = stdout;
  });

  return content;
}

function upload() {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  return &quot;Hello Upload&quot;;
}

exports.start = start;
exports.upload = upload;
</code></pre><p>上述代码中，我们引入了一个新的Node.js模块，child_process。之所以用它，是为了实现一个既简单又实用的非阻塞操作：exec()。</p>
<p>exec()做了什么呢？它从Node.js来执行一个shell命令。在上述例子中，我们用它来获取当前目录下所有的文件（“ls -lah”）,然后，当/startURL请求的时候将文件信息输出到浏览器中。</p>
<p>上述代码是非常直观的： 创建了一个新的变量content（初始值为“empty”），执行“ls -lah”命令，将结果赋值给content，最后将content返回。</p>
<p>和往常一样，我们启动服务器，然后访问“<a href="http://localhost:8888/start”" target="_blank" rel="noopener">http://localhost:8888/start”</a> 。</p>
<p>之后会载入一个漂亮的web页面，其内容为“empty”。怎么回事？</p>
<p>这个时候，你可能大致已经猜到了，exec()在非阻塞这块发挥了神奇的功效。它其实是个很好的东西，有了它，我们可以执行非常耗时的shell操作而无需迫使我们的应用停下来等待该操作。</p>
<p>（如果想要证明这一点，可以将“ls -lah”换成比如“find /”这样更耗时的操作来效果）。</p>
<p>然而，针对浏览器显示的结果来看，我们并不满意我们的非阻塞操作，对吧？</p>
<p>好，接下来，我们来修正这个问题。在这过程中，让我们先来看看为什么当前的这种方式不起作用。</p>
<p>问题就在于，为了进行非阻塞工作，exec()使用了回调函数。</p>
<p>在我们的例子中，该回调函数就是作为第二个参数传递给exec()的匿名函数：</p>
<pre><code>function (error, stdout, stderr) {
  content = stdout;
}
</code></pre><p>现在就到了问题根源所在了：我们的代码是同步执行的，这就意味着在调用exec()之后，Node.js会立即执行 return content ；在这个时候，content仍然是“empty”，因为传递给exec()的回调函数还未执行到——因为exec()的操作是异步的。</p>
<p>我们这里“ls -lah”的操作其实是非常快的（除非当前目录下有上百万个文件）。这也是为什么回调函数也会很快的执行到 —— 不过，不管怎么说它还是异步的。</p>
<p>为了让效果更加明显，我们想象一个更耗时的命令： “find /”，它在我机器上需要执行1分钟左右的时间，然而，尽管在请求处理程序中，我把“ls -lah”换成“find /”，当打开/start URL的时候，依然能够立即获得HTTP响应 —— 很明显，当exec()在后台执行的时候，Node.js自身会继续执行后面的代码。并且我们这里假设传递给exec()的回调函数，只会在“find /”命令执行完成之后才会被调用。</p>
<p>那究竟我们要如何才能实现将当前目录下的文件列表显示给用户呢？</p>
<p>好，了解了这种不好的实现方式之后，我们接下来来介绍如何以正确的方式让请求处理程序对浏览器请求作出响应。</p>
<p>以非阻塞操作进行请求响应</p>
<p>我刚刚提到了这样一个短语 —— “正确的方式”。而事实上通常“正确的方式”一般都不简单。</p>
<p>不过，用Node.js就有这样一种实现方案： 函数传递。下面就让我们来具体看看如何实现。</p>
<p>到目前为止，我们的应用已经可以通过应用各层之间传递值的方式（请求处理程序 -&gt; 请求路由 -&gt; 服务器）将请求处理程序返回的内容（请求处理程序最终要显示给用户的内容）传递给HTTP服务器。</p>
<p>现在我们采用如下这种新的实现方式：相对采用将内容传递给服务器的方式，我们这次采用将服务器“传递”给内容的方式。 从实践角度来说，就是将response对象（从服务器的回调函数onRequest()获取）通过请求路由传递给请求处理程序。 随后，处理程序就可以采用该对象上的函数来对请求作出响应。</p>
<p>原理就是如此，接下来让我们来一步步实现这种方案。</p>
<p>先从server.js开始：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route, handle) {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);

    route(handle, pathname, response);
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>相对此前从route()函数获取返回值的做法，这次我们将response对象作为第三个参数传递给route()函数，并且，我们将onRequest()处理程序中所有有关response的函数调都移除，因为我们希望这部分工作让route()函数来完成。</p>
<p>下面就来看看我们的router.js:</p>
<pre><code>function route(handle, pathname, response) {
  console.log(&quot;About to route a request for &quot; + pathname);
  if (typeof handle[pathname] === &apos;function&apos;) {
    handle[pathname](response);
  } else {
    console.log(&quot;No request handler found for &quot; + pathname);
    response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;404 Not found&quot;);
    response.end();
  }
}

exports.route = route;
</code></pre><p>同样的模式：相对此前从请求处理程序中获取返回值，这次取而代之的是直接传递response对象。</p>
<p>如果没有对应的请求处理器处理，我们就直接返回“404”错误。</p>
<p>最后，我们将requestHandler.js修改为如下形式：</p>
<pre><code>var exec = require(&quot;child_process&quot;).exec;

function start(response) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  exec(&quot;ls -lah&quot;, function (error, stdout, stderr) {
    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(stdout);
    response.end();
  });
}

function upload(response) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello Upload&quot;);
  response.end();
}

exports.start = start;
exports.upload = upload;
</code></pre><p>我们的处理程序函数需要接收response参数，为了对请求作出直接的响应。</p>
<p>start处理程序在exec()的匿名回调函数中做请求响应的操作，而upload处理程序仍然是简单的回复“Hello World”，只是这次是使用response对象而已。</p>
<p>这时再次我们启动应用（node index.js），一切都会工作的很好。</p>
<p>如果想要证明/start处理程序中耗时的操作不会阻塞对/upload请求作出立即响应的话，可以将requestHandlers.js修改为如下形式：</p>
<pre><code>var exec = require(&quot;child_process&quot;).exec;

function start(response) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  exec(&quot;find /&quot;,
    { timeout: 10000, maxBuffer: 20000*1024 },
    function (error, stdout, stderr) {
      response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
      response.write(stdout);
      response.end();
    });
}

function upload(response) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello Upload&quot;);
  response.end();
}

exports.start = start;
exports.upload = upload;
</code></pre><p>这样一来，当请求<a href="http://localhost:8888/start的时候，会花10秒钟的时间才载入，而当请求http://localhost:8888/upload的时候，会立即响应，纵然这个时候/start响应还在处理中。" target="_blank" rel="noopener">http://localhost:8888/start的时候，会花10秒钟的时间才载入，而当请求http://localhost:8888/upload的时候，会立即响应，纵然这个时候/start响应还在处理中。</a></p>
<p>更有用的场景</p>
<p>到目前为止，我们做的已经很好了，但是，我们的应用没有实际用途。</p>
<p>服务器，请求路由以及请求处理程序都已经完成了，下面让我们按照此前的用例给网站添加交互：用户选择一个文件，上传该文件，然后在浏览器中看到上传的文件。 为了保持简单，我们假设用户只会上传图片，然后我们应用将该图片显示到浏览器中。</p>
<p>好，下面就一步步来实现，鉴于此前已经对JavaScript原理性技术性的内容做过大量介绍了，这次我们加快点速度。</p>
<p>要实现该功能，分为如下两步： 首先，让我们来看看如何处理POST请求（非文件上传），之后，我们使用Node.js的一个用于文件上传的外部模块。之所以采用这种实现方式有两个理由。</p>
<p>第一，尽管在Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多。<br>第二，用Node.js来处理文件上传（multipart POST请求）是比较复杂的，它不在本书的范畴，但，如何使用外部模块却是在本书涉猎内容之内。</p>
<p>处理POST请求</p>
<p>考虑这样一个简单的例子：我们显示一个文本区（textarea）供用户输入内容，然后通过POST请求提交给服务器。最后，服务器接受到请求，通过处理程序将输入的内容展示到浏览器中。</p>
<p>/start请求处理程序用于生成带文本区的表单，因此，我们将requestHandlers.js修改为如下形式：</p>
<pre><code>function start(response) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+
    &apos;charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;Hello Upload&quot;);
  response.end();
}

exports.start = start;
exports.upload = upload;
</code></pre><p>好了，现在我们的应用已经很完善了，都可以获得威比奖（Webby Awards）了，哈哈。（译者注：威比奖是由国际数字艺术与科学学院主办的评选全球最佳网站的奖项，具体参见详细说明）通过在浏览器中访问<a href="http://localhost:8888/start就可以看到简单的表单了，要记得重启服务器哦！" target="_blank" rel="noopener">http://localhost:8888/start就可以看到简单的表单了，要记得重启服务器哦！</a></p>
<p>你可能会说：这种直接将视觉元素放在请求处理程序中的方式太丑陋了。说的没错，但是，我并不想在本书中介绍诸如MVC之类的模式，因为这对于你了解JavaScript或者Node.js环境来说没多大关系。</p>
<p>余下的篇幅，我们来探讨一个更有趣的问题： 当用户提交表单时，触发/upload请求处理程序处理POST请求的问题。</p>
<p>现在，我们已经是新手中的专家了，很自然会想到采用异步回调来实现非阻塞地处理POST请求的数据。</p>
<p>这里采用非阻塞方式处理是明智的，因为POST请求一般都比较“重” —— 用户可能会输入大量的内容。用阻塞的方式处理大数据量的请求必然会导致用户操作的阻塞。</p>
<p>为了使整个过程非阻塞，Node.js会将POST数据拆分成很多小的数据块，然后通过触发特定的事件，将这些小数据块传递给回调函数。这里的特定的事件有data事件（表示新的小数据块到达了）以及end事件（表示所有的数据都已经接收完毕）。</p>
<p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。怎么告诉呢？ 我们通过在request对象上注册监听器（listener） 来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。</p>
<p>如下所示：</p>
<pre><code>request.addListener(&quot;data&quot;, function(chunk) {
  // called when a new chunk of data was received
});

request.addListener(&quot;end&quot;, function() {
  // called when all chunks of data have been received
});
</code></pre><p>问题来了，这部分逻辑写在哪里呢？ 我们现在只是在服务器中获取到了request对象 —— 我们并没有像之前response对象那样，把 request 对象传递给请求路由和请求处理程序。</p>
<p>在我看来，获取所有来自请求的数据，然后将这些数据给应用层处理，应该是HTTP服务器要做的事情。因此，我建议，我们直接在服务器中处理POST数据，然后将最终的数据传递给请求路由和请求处理器，让他们来进行进一步的处理。</p>
<p>因此，实现思路就是： 将data和end事件的回调函数直接放在服务器中，在data事件回调中收集所有的POST数据，当接收到所有数据，触发end事件后，其回调函数调用请求路由，并将数据传递给它，然后，请求路由再将该数据传递给请求处理程序。</p>
<p>还等什么，马上来实现。先从server.js开始：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route, handle) {
  function onRequest(request, response) {
    var postData = &quot;&quot;;
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);

    request.setEncoding(&quot;utf8&quot;);

    request.addListener(&quot;data&quot;, function(postDataChunk) {
      postData += postDataChunk;
      console.log(&quot;Received POST data chunk &apos;&quot;+
      postDataChunk + &quot;&apos;.&quot;);
    });

    request.addListener(&quot;end&quot;, function() {
      route(handle, pathname, response, postData);
    });

  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
</code></pre><p>上述代码做了三件事情： 首先，我们设置了接收数据的编码格式为UTF-8，然后注册了“data”事件的监听器，用于收集每次接收到的新数据块，并将其赋值给postData 变量，最后，我们将请求路由的调用移到end事件处理程序中，以确保它只会当所有数据接收完毕后才触发，并且只触发一次。我们同时还把POST数据传递给请求路由，因为这些数据，请求处理程序会用到。</p>
<p>上述代码在每个数据块到达的时候输出了日志，这对于最终生产环境来说，是很不好的（数据量可能会很大，还记得吧？），但是，在开发阶段是很有用的，有助于让我们看到发生了什么。</p>
<p>我建议可以尝试下，尝试着去输入一小段文本，以及大段内容，当大段内容的时候，就会发现data事件会触发多次。</p>
<p>再来点酷的。我们接下来在/upload页面，展示用户输入的内容。要实现该功能，我们需要将postData传递给请求处理程序，修改router.js为如下形式：</p>
<pre><code>function route(handle, pathname, response, postData) {
  console.log(&quot;About to route a request for &quot; + pathname);
  if (typeof handle[pathname] === &apos;function&apos;) {
    handle[pathname](response, postData);
  } else {
    console.log(&quot;No request handler found for &quot; + pathname);
    response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
    response.write(&quot;404 Not found&quot;);
    response.end();
  }
}

exports.route = route;
</code></pre><p>然后，在requestHandlers.js中，我们将数据包含在对upload请求的响应中：</p>
<pre><code>function start(response, postData) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+
    &apos;charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response, postData) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;You&apos;ve sent: &quot; + postData);
  response.end();
}

exports.start = start;
exports.upload = upload;
</code></pre><p>好了，我们现在可以接收POST数据并在请求处理程序中处理该数据了。</p>
<p>我们最后要做的是： 当前我们是把请求的整个消息体传递给了请求路由和请求处理程序。我们应该只把POST数据中，我们感兴趣的部分传递给请求路由和请求处理程序。在我们这个例子中，我们感兴趣的其实只是text字段。</p>
<p>我们可以使用此前介绍过的querystring模块来实现：</p>
<pre><code>var querystring = require(&quot;querystring&quot;);

function start(response, postData) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+
    &apos;charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response, postData) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;You&apos;ve sent the text: &quot;+
  querystring.parse(postData).text);
  response.end();
}

exports.start = start;
exports.upload = upload;
</code></pre><p>好了，以上就是关于处理POST数据的全部内容。</p>
<p>处理文件上传</p>
<p>最后，我们来实现我们最终的用例：允许用户上传图片，并将该图片在浏览器中显示出来。</p>
<p>回到90年代，这个用例完全可以满足用于IPO的商业模型了，如今，我们通过它能学到这样两件事情： 如何安装外部Node.js模块，以及如何将它们应用到我们的应用中。</p>
<p>这里我们要用到的外部模块是Felix Geisendörfer开发的node-formidable模块。它对解析上传的文件数据做了很好的抽象。 其实说白了，处理文件上传“就是”处理POST数据 —— 但是，麻烦的是在具体的处理细节，所以，这里采用现成的方案更合适点。</p>
<p>使用该模块，首先需要安装该模块。Node.js有它自己的包管理器，叫NPM。它可以让安装Node.js的外部模块变得非常方便。通过如下一条命令就可以完成该模块的安装：</p>
<pre><code>npm install formidable
</code></pre><p>如果终端输出如下内容：</p>
<pre><code>npm info build Success: formidable@1.0.9
npm ok
</code></pre><p>就说明模块已经安装成功了。</p>
<p>现在我们就可以用formidable模块了——使用外部模块与内部模块类似，用require语句将其引入即可：</p>
<pre><code>var formidable = require(&quot;formidable&quot;);
</code></pre><p>这里该模块做的就是将通过HTTP POST请求提交的表单，在Node.js中可以被解析。我们要做的就是创建一个新的IncomingForm，它是对提交表单的抽象表示，之后，就可以用它解析request对象，获取表单中需要的数据字段。</p>
<p>node-formidable官方的例子展示了这两部分是如何融合在一起工作的：</p>
<pre><code>var formidable = require(&apos;formidable&apos;),
    http = require(&apos;http&apos;),
    util = require(&apos;util&apos;);

http.createServer(function(req, res) {
  if (req.url == &apos;/upload&apos; &amp;&amp; req.method.toLowerCase() == &apos;post&apos;) {
    // parse a file upload
    var form = new formidable.IncomingForm();
    form.parse(req, function(err, fields, files) {
      res.writeHead(200, {&apos;content-type&apos;: &apos;text/plain&apos;});
      res.write(&apos;received upload:\n\n&apos;);
      res.end(util.inspect({fields: fields, files: files}));
    });
    return;
  }

  // show a file upload form
  res.writeHead(200, {&apos;content-type&apos;: &apos;text/html&apos;});
  res.end(
    &apos;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &apos;+
    &apos;method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;input type=&quot;text&quot; name=&quot;title&quot;&gt;&lt;br&gt;&apos;+
    &apos;&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&lt;br&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Upload&quot;&gt;&apos;+
    &apos;&lt;/form&gt;&apos;
  );
}).listen(8888);
</code></pre><p>如果我们将上述代码，保存到一个文件中，并通过node来执行，就可以进行简单的表单提交了，包括文件上传。然后，可以看到通过调用form.parse传递给回调函数的files对象的内容，如下所示：</p>
<p>received upload:</p>
<pre><code>{ fields: { title: &apos;Hello World&apos; },
  files:
   { upload:
      { size: 1558,
        path: &apos;/tmp/1c747974a27a6292743669e91f29350b&apos;,
        name: &apos;us-flag.png&apos;,
        type: &apos;image/png&apos;,
        lastModifiedDate: Tue, 21 Jun 2011 07:02:41 GMT,
        _writeStream: [Object],
        length: [Getter],
        filename: [Getter],
        mime: [Getter] } } }
</code></pre><p>为了实现我们的功能，我们需要将上述代码应用到我们的应用中，另外，我们还要考虑如何将上传文件的内容（保存在/tmp目录中）显示到浏览器中。</p>
<p>我们先来解决后面那个问题： 对于保存在本地硬盘中的文件，如何才能在浏览器中看到呢？</p>
<p>显然，我们需要将该文件读取到我们的服务器中，使用一个叫fs的模块。</p>
<p>我们来添加/showURL的请求处理程序，该处理程序直接硬编码将文件/tmp/test.png内容展示到浏览器中。当然了，首先需要将该图片保存到这个位置才行。</p>
<p>将requestHandlers.js修改为如下形式：</p>
<pre><code>var querystring = require(&quot;querystring&quot;),
    fs = require(&quot;fs&quot;);

function start(response, postData) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; &apos;+
    &apos;content=&quot;text/html; charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;textarea name=&quot;text&quot; rows=&quot;20&quot; cols=&quot;60&quot;&gt;&lt;/textarea&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Submit text&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response, postData) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;You&apos;ve sent the text: &quot;+
  querystring.parse(postData).text);
  response.end();
}

function show(response, postData) {
  console.log(&quot;Request handler &apos;show&apos; was called.&quot;);
  fs.readFile(&quot;/tmp/test.png&quot;, &quot;binary&quot;, function(error, file) {
    if(error) {
      response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
      response.write(error + &quot;\n&quot;);
      response.end();
    } else {
      response.writeHead(200, {&quot;Content-Type&quot;: &quot;image/png&quot;});
      response.write(file, &quot;binary&quot;);
      response.end();
    }
  });
}

exports.start = start;
exports.upload = upload;
exports.show = show;
我们还需要将这新的请求处理程序，添加到index.js中的路由映射表中：

var server = require(&quot;./server&quot;);
var router = require(&quot;./router&quot;);
var requestHandlers = require(&quot;./requestHandlers&quot;);

var handle = {}
handle[&quot;/&quot;] = requestHandlers.start;
handle[&quot;/start&quot;] = requestHandlers.start;
handle[&quot;/upload&quot;] = requestHandlers.upload;
handle[&quot;/show&quot;] = requestHandlers.show;

server.start(router.route, handle);
</code></pre><p>重启服务器之后，通过访问<a href="http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。" target="_blank" rel="noopener">http://localhost:8888/show，就可以看到保存在/tmp/test.png的图片了。</a></p>
<p>好，最后我们要的就是：</p>
<p>在/start表单中添加一个文件上传元素</p>
<p>将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到/tmp/test.png</p>
<p>将上传的图片内嵌到/uploadURL输出的HTML中</p>
<p>第一项很简单。只需要在HTML表单中，添加一个multipart/form-data的编码类型，移除此前的文本区，添加一个文件上传组件，并将提交按钮的文案改为“Upload file”即可。 如下requestHandler.js所示：</p>
<pre><code>var querystring = require(&quot;querystring&quot;),
    fs = require(&quot;fs&quot;);

function start(response, postData) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; &apos;+
    &apos;content=&quot;text/html; charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &apos;+
    &apos;method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;input type=&quot;file&quot; name=&quot;upload&quot;&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response, postData) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);
  response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
  response.write(&quot;You&apos;ve sent the text: &quot;+
  querystring.parse(postData).text);
  response.end();
}

function show(response, postData) {
  console.log(&quot;Request handler &apos;show&apos; was called.&quot;);
  fs.readFile(&quot;/tmp/test.png&quot;, &quot;binary&quot;, function(error, file) {
    if(error) {
      response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
      response.write(error + &quot;\n&quot;);
      response.end();
    } else {
      response.writeHead(200, {&quot;Content-Type&quot;: &quot;image/png&quot;});
      response.write(file, &quot;binary&quot;);
      response.end();
    }
  });
}

exports.start = start;
exports.upload = upload;
exports.show = show;
</code></pre><p>很好。下一步相对比较复杂。这里有这样一个问题： 我们需要在upload处理程序中对上传的文件进行处理，这样的话，我们就需要将request对象传递给node-formidable的form.parse函数。</p>
<p>但是，我们有的只是response对象和postData数组。看样子，我们只能不得不将request对象从服务器开始一路通过请求路由，再传递给请求处理程序。 或许还有更好的方案，但是，不管怎么说，目前这样做可以满足我们的需求。</p>
<p>到这里，我们可以将postData从服务器以及请求处理程序中移除了 —— 一方面，对于我们处理文件上传来说已经不需要了，另外一方面，它甚至可能会引发这样一个问题： 我们已经“消耗”了request对象中的数据，这意味着，对于form.parse来说，当它想要获取数据的时候就什么也获取不到了。（因为Node.js不会对数据做缓存）</p>
<p>我们从server.js开始 —— 移除对postData的处理以及request.setEncoding （这部分node-formidable自身会处理），转而采用将request对象传递给请求路由的方式：</p>
<pre><code>var http = require(&quot;http&quot;);
var url = require(&quot;url&quot;);

function start(route, handle) {
  function onRequest(request, response) {
    var pathname = url.parse(request.url).pathname;
    console.log(&quot;Request for &quot; + pathname + &quot; received.&quot;);
    route(handle, pathname, response, request);
  }

  http.createServer(onRequest).listen(8888);
  console.log(&quot;Server has started.&quot;);
}

exports.start = start;
接下来是 router.js —— 我们不再需要传递postData了，这次要传递request对象：

function route(handle, pathname, response, request) {
  console.log(&quot;About to route a request for &quot; + pathname);
  if (typeof handle[pathname] === &apos;function&apos;) {
    handle[pathname](response, request);
  } else {
    console.log(&quot;No request handler found for &quot; + pathname);
    response.writeHead(404, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(&quot;404 Not found&quot;);
    response.end();
  }
}

exports.route = route;
</code></pre><p>现在，request对象就可以在我们的upload请求处理程序中使用了。node-formidable会处理将上传的文件保存到本地/tmp目录中，而我们需要做的是确保该文件保存成/tmp/test.png。 没错，我们保持简单，并假设只允许上传PNG图片。</p>
<p>这里采用fs.renameSync(path1,path2)来实现。要注意的是，正如其名，该方法是同步执行的， 也就是说，如果该重命名的操作很耗时的话会阻塞。 这块我们先不考虑。</p>
<p>接下来，我们把处理文件上传以及重命名的操作放到一起，如下requestHandlers.js所示：</p>
<pre><code>var querystring = require(&quot;querystring&quot;),
    fs = require(&quot;fs&quot;),
    formidable = require(&quot;formidable&quot;);

function start(response) {
  console.log(&quot;Request handler &apos;start&apos; was called.&quot;);

  var body = &apos;&lt;html&gt;&apos;+
    &apos;&lt;head&gt;&apos;+
    &apos;&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; &apos;+
    &apos;charset=UTF-8&quot; /&gt;&apos;+
    &apos;&lt;/head&gt;&apos;+
    &apos;&lt;body&gt;&apos;+
    &apos;&lt;form action=&quot;/upload&quot; enctype=&quot;multipart/form-data&quot; &apos;+
    &apos;method=&quot;post&quot;&gt;&apos;+
    &apos;&lt;input type=&quot;file&quot; name=&quot;upload&quot; multiple=&quot;multiple&quot;&gt;&apos;+
    &apos;&lt;input type=&quot;submit&quot; value=&quot;Upload file&quot; /&gt;&apos;+
    &apos;&lt;/form&gt;&apos;+
    &apos;&lt;/body&gt;&apos;+
    &apos;&lt;/html&gt;&apos;;

    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(body);
    response.end();
}

function upload(response, request) {
  console.log(&quot;Request handler &apos;upload&apos; was called.&quot;);

  var form = new formidable.IncomingForm();
  console.log(&quot;about to parse&quot;);
  form.parse(request, function(error, fields, files) {
    console.log(&quot;parsing done&quot;);
    fs.renameSync(files.upload.path, &quot;/tmp/test.png&quot;);
    response.writeHead(200, {&quot;Content-Type&quot;: &quot;text/html&quot;});
    response.write(&quot;received image:&lt;br/&gt;&quot;);
    response.write(&quot;&lt;img src=&apos;/show&apos; /&gt;&quot;);
    response.end();
  });
}

function show(response) {
  console.log(&quot;Request handler &apos;show&apos; was called.&quot;);
  fs.readFile(&quot;/tmp/test.png&quot;, &quot;binary&quot;, function(error, file) {
    if(error) {
      response.writeHead(500, {&quot;Content-Type&quot;: &quot;text/plain&quot;});
      response.write(error + &quot;\n&quot;);
      response.end();
    } else {
      response.writeHead(200, {&quot;Content-Type&quot;: &quot;image/png&quot;});
      response.write(file, &quot;binary&quot;);
      response.end();
    }
  });
}

exports.start = start;
exports.upload = upload;
exports.show = show;
</code></pre><p>好了，重启服务器，我们应用所有的功能就可以用了。选择一张本地图片，将其上传到服务器，然后浏览器就会显示该图片。</p>
<p>总结与展望</p>
<p>恭喜，我们的任务已经完成了！我们开发完了一个Node.js的web应用，应用虽小，但却“五脏俱全”。 期间，我们介绍了很多技术点：服务端JavaScript、函数式编程、阻塞与非阻塞、回调、事件、内部和外部模块等等。</p>
<p>当然了，还有许多本书没有介绍到的： 如何操作数据库、如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。</p>
<p>但本书毕竟只是一本给初学者的教程 —— 不可能覆盖到所有的内容。</p>
<p>幸运的是，Node.js社区非常活跃（作个不恰当的比喻就是犹如一群有多动症小孩子在一起，能不活跃吗？）， 这意味着，有许多关于Node.js的资源，有什么问题都可以向社区寻求解答。 其中Node.js社区的wiki以及 NodeCloud就是最好的资源。</p>
<blockquote>
<p>引用地址：<a href="http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com" target="_blank" rel="noopener">http://www.nodebeginner.org/index-zh-cn.html?utm_source=ourjs.com</a></p>
</blockquote>
]]></content>
      <categories>
        <category>lessons</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
</search>
